{
  "id": "http://arxiv.org/abs/1202.4883v3",
  "title": "The Dissecting Power of Regular Languages",
  "authors": [
    "Tomoyuki Yamakami",
    "Yuichi Kato"
  ],
  "abstract": "A recent study on structural properties of regular and context-free languages\nhas greatly promoted our basic understandings of the complex behaviors of those\nlanguages. We continue the study to examine how regular languages behave when\nthey need to cut numerous infinite languages. A particular interest rests on a\nsituation in which a regular language needs to \"dissect\" a given infinite\nlanguage into two subsets of infinite size. Every context-free language is\ndissected by carefully chosen regular languages (or it is REG-dissectible). In\na larger picture, we show that constantly-growing languages and semi-linear\nlanguages are REG-dissectible. Under certain natural conditions, complements\nand finite intersections of semi-linear languages also become REG-dissectible.\nRestricted to bounded languages, the intersections of finitely many\ncontext-free languages and, more surprisingly, the entire Boolean hierarchy\nover bounded context-free languages are REG-dissectible. As an immediate\napplication of the REG-dissectibility, we show another structural property, in\nwhich an appropriate bounded context-free language can \"separate with infinite\nmargins\" two given nested infinite bounded context-free languages.",
  "text": "arXiv:1202.4883v3  [cs.FL]  12 Dec 2012\nThe Dissecting Power of Regular Languages\nTomoyuki Yamakami∗\nand\nYuichi Kato∗\nAbstract. A recent study on structural properties of regular and context-free languages has\ngreatly promoted our basic understandings of the complex behaviors of those languages. We\ncontinue the study to examine how regular languages behave when they need to cut numerous\ninﬁnite languages. A particular interest rests on a situation in which a regular language needs to\n“dissect” a given inﬁnite language into two subsets of inﬁnite size. Every context-free language is\ndissected by carefully chosen regular languages (or it is REG-dissectible). In a larger picture, we\nshow that constantly-growing languages and semi-linear languages are REG-dissectible. Under\ncertain natural conditions, complements and ﬁnite intersections of semi-linear languages also\nbecome REG-dissectible. Restricted to bounded languages, the intersections of ﬁnitely many\ncontext-free languages and, more surprisingly, the entire Boolean hierarchy over bounded context-\nfree languages are REG-dissectible. As an immediate application of the REG-dissectibility, we\nshow another structural property, in which an appropriate bounded context-free language can\n“separate with inﬁnite margins” two given nested inﬁnite bounded context-free languages.\nkeywords.\ntheory of computing, formal languages, regular language, context-free language,\nbounded language, semi-linear, constantly growing, dissectible, i-separate\n1\nBackground Knowledge and the Results’ Overview\nThe exquisitely complex behaviors of formal languages are often dictated by multiple-layers of inner struc-\ntures of the languages and a mathematical theory over those languages has been developed in the past\nsix decades alongside the discovery of some of the hidden structures. In an early stage of the study of\ncontext-free languages, for instance, a notion of semi-linearity—a structural property on the frequency of\noccurrences of symbols—was found in [8] and a pumping lemma—another property regarding the growth\nrate of strings—was proven in [1]. Similarly, underlying structures of regular languages have been analyzed\nwithin a number of diﬀerent frameworks, including the Myhill-Nerode theorem, monadic second-order logic,\nand ﬁnitely generated monoids. Recently, new realms of structural properties of languages have been stud-\nied by obvious analogy with structural complexity issues of polynomial time-bounded complexity classes.\nSuch properties include primeimmunity as well as pseudorandomness against the regular and context-free\nlanguages, introduced in [11], and a notion of minimal cover, which was applied to the regular languages in\n[3]. In the literature, numerous key questions concerning the behaviors of languages have been raised but\nleft unsolved. We suspect that the diﬃculty in answering those questions may be rooted in yet-unknown\nstructures that constitute the languages.\nTo promote our understandings of formal languages in general, it may be desirable to unearth the hidden\nstructural properties of the languages. In this line of study, this paper aims at exploring another structural\nproperty, which is seemingly innocent but possibly fundamental, concerning the ability to partition a target\ninﬁnite set into two portions of inﬁnite size. This simple property, which we name “dissectibility,” seems\nmore suitable for weak computations, because, as shown in Section 3, polynomial-time decidable languages,\nfor instance, are powerful enough to dissect any recursive languages of inﬁnite size. Among models of weak\ncomputations, we are focused on the regular languages, because they are generally regarded as weak in\nrecognition power; however, they could exhibit surprisingly high power in dissecting inﬁnite languages. To\nbe more precise at this point, an inﬁnite set C is said to dissect a target inﬁnite set L, as illustrated in\nFig.1, if two disjoint sets C ∩L and C ∩L (= L −C) are both inﬁnite, where C expresses the complement of\nC. When C is particularly a regular language, we succinctly say that L is REG-dissectible. We are mostly\ninterested in clarifying exactly what kind of languages are REG-dissectible. A typical example of REG-\ndissectible language is the aforementioned context-free languages (Corollary 4.2). As for another example,\nlet us consider a language L1 generated by a grammar whose productions include a special form S →SS,\nwhere S is the start symbol. Irrelevant to its computational complexity, the language L1 can be dissected\nby a regular language composed of strings of lengths that are equal to zero modulo 3, because L1 contains\na series of strings of lengths 2k, 3k, 4k, . . . for an appropriately chosen constant k > 0. A more concrete\n∗Present Aﬃliation: Department of Information Science, University of Fukui, 3-9-1 Bunkyo, Fukui 910-8507, Japan.\n1\nexample is the language L2 = {wn! | w ∈{a, b}2, n ∈N}. Although this language L2 is not even context-\nfree, it can be easily dissected by a regular language consisting of strings, each of which begins with the\nletter a. The third example language is L3 = {(abn)n | n ∈N}, whose complement is context-free. This\nlanguage L3 can be easily dissected by a regular language whose strings contain an even number of a’s. As\na relevant notion, a C-pseudorandom language [11] also dissects any language in C with quite large margins,\nwhere the intuitive term “margin” refers to the diﬀerence between two given sets.\nThrough Sections 3 to 4, two wider families of languages, constantly-growing languages and semi-linear\nlanguages, will be shown to be REG-dissectible. Under certain natural conditions, the complements, the\nintersections, and the diﬀerences of semi-linear languages are proven to be REG-dissectible using a simple\nanalysis of length patterns of strings inside a given language. This analysis involves a manipulation of solu-\ntions of semi-linear equations and those conditions are indeed necessary to guarantee the REG-dissectibility.\nOn the contrary, a rather obvious limitation exists for the REG-dissectibility; namely, as shown in Section 3,\nthere is a logarithmic-space computable language that cannot be REG-dissectible (Theorem 3.5). Taking a\nstep further forward, when limited to bounded languages of Ginsburg and Spanier [5], we will be able to show\nthat the intersections of ﬁnitely many context-free languages are dissected by appropriate regular languages,\ndespite the fact that the intersections of k bounded context-free languages for k ≥1 form an inﬁnite hierar-\nchy within the family of context-sensitive languages [7]. By elaborating our argument further, we will prove\nthat the entire Boolean hierarchy over the class of bounded context-free languages is also REG-dissectible\n(Theorem 4.4). These results will be presented in Section 4.\nThe REG-dissectibility notion has intimate connections to other notions. Earlier, Domaratzki, Shallit,\nand Yu [3] studied a notion of minimal cover, which means the “smallest” superset A of a given set B,\nwhere “smallest” means that there is no set between A and B with inﬁnite margins. Motivated by their\nnotion and results, we pay a special attention to a structural property of separating two inﬁnite “nested”\nlanguages with inﬁnite margins. In our term of “separation with inﬁnite margins” (or i-separation, in short),\nwe actually mean, as illustrated in Fig.2, that a pair of inﬁnite sets A and B, denoted by i(B, A), for which\nA covers B with an inﬁnite margin, can be separated by an appropriate set C that lies in between the two\nsets with inﬁnite margins. As an immediate application of the aforementioned REG-dissectibility results for\nthe bounded context-free languages, we will show in Section 5 that two bounded context-free languages can\nbe i-separated by bounded context-free languages. This i-separation result will be further extended into any\nlevel of the Boolean hierarchy over bounded context-free languages (Theorem 5.2).\nFrom the next section, we will formally introduce the key notions of the REG-dissectibility and the\ni-separation and we will present detailed proofs of our major results mentioned above.\n2\nNotions and Notations\nWe brieﬂy explain a set of basic notions and notations that will be used in the subsequent sections. First,\nwe denote by N the set of all natural numbers (i.e., nonnegative integers) and we write N+ for N −{0}. For\neach number n ∈N+, the notation [n] denotes the integer interval {1, 2, 3, . . ., n}. Associated with three\narbitrary numbers a, b, k ∈N, we deﬁne Aa,b,k to be the set {an + b | n ∈N, n ≥k}. The generic notation O\ndenotes both an all-zero vector and an all-zero matrix of appropriate dimension. For two sets A and B, the\nset {x | x ∈A, x ̸∈B} is the diﬀerence between A and B and is expressed as A −B. When A is a countable\nset, the succinct notation |A| = ∞(resp., |A| < ∞) indicates that A is an inﬁnite (resp., a ﬁnite) set. Given\ntwo countable sets A and B, we write A ⊆ae B to mean |A −B| < ∞, and the notation A =ae B is used\nwhenever both A ⊆ae B and B ⊆ae A hold, where the subscript “ae” stands for “almost everywhere.”\nAn alphabet Σ is a ﬁnite nonempty set of “symbols” and a string over Σ is a ﬁnite sequence of symbols\nin Σ. The set of all strings over Σ is denoted Σ∗, and Σ+ expresses the set Σ∗−{λ}, where λ is the empty\nstring. The length |x| of any string x is the total number of occurrences of symbols in x. For any string x and\nFigure 1: C dissects L.\nFigure 2: C i-separates i(B, A).\n2\nany symbol σ, the notation #σ(x) stands for the number of occurrences of σ in x. Given a language S, the\nlength set of S, denoted LT (S), is the collection of all lengths |x| for any strings x in S. We often identify a\nlanguage S with its characteristic function, which is also denoted S (i.e., S(x) = 1 if x ∈S, and S(x) = 0\notherwise). The sets of all regular languages and of all context-free languages are expressed respectively as\nREG and CFL.\nThe complement of a language B over alphabet Σ is the set Σ∗−B and it is denoted B as far as\nits underlying alphabet Σ is clear from the context. For ease of our notations, we use the following four\nclass operations: (1) C ∧D = {C ∩D | C ∈C, D ∈D}, (2) C ∨D = {C ∪D | C ∈C, D ∈D}, (3)\nC −D = {C −D | C ∈C, D ∈D}, and (4) co-C = {C | C ∈C}, where C and D are language families. Given\nany family F of languages, a language S is said to be F-immune if S is inﬁnite and S has no inﬁnite subset\nbelonging to F (see, e.g., [11]).\n3\nHow to Dissect Languages\nLet us recall from Section 1 that an inﬁnite language S is REG-dissectible exactly when there exists a regular\nlanguage C that dissects S (i.e., |C ∩S| = |C ∩S| = ∞). Moreover, a nonempty language family F is REG-\ndissectible if and only if every inﬁnite language in F is REG-dissectible. Notice that, since this deﬁnition\ndisregards all ﬁnite languages inside F, we implicitly assume that F contains inﬁnite languages. We can\nnaturally expand the REG-dissectibility to a more general notion of C-dissectibility simply by replacing REG\nwith an arbitrary nonempty language family C; however, the choice of REG is actually of great importance.\nIn fact, it is more interesting to consider low-complexity language families like REG as a candidate for C.\nOne reason is that polynomial-time decidable languages, for instance, are powerful enough to dissect any\ninﬁnite recursive languages.\nExample 3.1 We claim that every inﬁnite recursive language is P-dissectible, where P is the family of\nall polynomial-time decidable languages. Let L be any inﬁnite language over alphabet Σ recognized by a\ntwo-way single-tape deterministic Turing machine M that eventually halts on all inputs. For simplicity, let\nΣ = {0, 1} and assume that L ̸=ae Σ∗because, otherwise, a regular set C = {0x | x ∈Σ∗} easily dissects\nL. Now, we deﬁne C as follows. Let z0, z1, z2, . . . be a standard lexicographic order of all strings over Σ.\nGiven each string x, to determine the value C(x), we go through the following procedure P from round 0 to\nround |x|. Initially, we set A = R = Ø. At round i, we ﬁrst compute the value C(zi) by calling P recursively\nround by round. We then simulate M on the input zi within |x| steps. When M(zi) = 1, we update A to\nA ∪{i} if C(zi) = 1, and R to R ∪{i} if C(zi) = 0. On the contrary, when either M(zi) = 0 or M(zi) is\nnot obtained within |x| steps, we do nothing. After round |x|, if |A| > |R|, then deﬁne C(x) = 0; otherwise,\ndeﬁne C(x) = 1. Clearly, C is in P. By a diagonalization argument, we can show that |C ∩L| = |C ∩L| = ∞.\nTherefore, every inﬁnite recursive language can be dissected by an appropriate language in P.\nIn the following second example, we will show that a simple use of advice makes it possible to dissect\narbitrary languages by appropriate regular languages. For basic properties of the advice, the reader may\nrefer to [9, 10, 11].\nExample 3.2 We claim that every inﬁnite language is REG/n-dissectible, where REG/n is the collection of\nadvised regular languages, each of which is of the form {x | M accepts [\nx\nh(|x|)]} for an appropriate deterministic\nﬁnite automaton (or dfa), an advice alphabet Γ, and an advice function h : N →Γ∗satisfying |h(n)| = n\nfor all n ∈N, where [ x\ny] is a track notation used in [9]. To verify this claim, take any inﬁnite language\nL over alphabet Σ. Since L is inﬁnite, the length set LT (L) is also inﬁnite. Hence, we partition LT (L)\ninto two inﬁnite subsets, say, S1 and S2; that is, S1 ∩S2 = Ø, LT (L) = S1 ∪S2, and |S1| = |S2| = ∞.\nWithout loss of generality, we assume that 0 ̸∈S1. Now, let us deﬁne an advice function h : N →{0, 1}∗as\nh(n) = 10n−1 if n ∈S1 and h(n) = 0n otherwise. We also deﬁne a dfa M that behaves as follows: on input\n[ x\ny], if y = 10|x|−1 with |x| ≥1, then M accepts the input; otherwise, it rejects the input. The language\nC = {x | M accepts [\nx\nh(|x|)]} then belongs to REG/n. Obviously, for any string x ∈L with |x| ∈S1, since\nh(|x|) = 10|x|−1, M accepts [\nx\nh(|x|)]. It thus holds that |C ∩L| = ∞. Similarly, for any x ∈S with |x| ∈S2,\nM rejects [\nx\nh(|x|)], implying |C ∩L| = ∞. In conclusion, C dissects L.\nAs noted in Section 1, a pattern of the lengths of strings in a target language surely plays a key role in\nproving its REG-dissectibility. This fact turns our attention to languages composed of strings satisfying a\ncertain length condition, known as a “constant growth property.” Formally, a nonempty language L is said\n3\nto be constantly growing if there exist a constant p > 0 and a ﬁnite subset K ⊆N+ that meet the following\ncondition: for every string x in L with |x| ≥p, there exist a string y ∈L and a constant c ∈K for which\n|x| = |y| + c holds. Such languages can be easily dissected by appropriately chosen regular languages as\nshown in the next lemma.\nLemma 3.3 Every inﬁnite constantly-growing language is REG-dissectible.\nProof.\nLet L be any inﬁnite language over alphabet Σ and assume that L is constantly growing with a\nconstant p > 0 and a ﬁnite set K ⊆N+. Now, let c denote the maximal element in K and set c′ = c + 1.\nFor each index i ∈[c], we take a special language Li = {x ∈L | |x| ≡i (mod c′)}, and we wish to prove\nthat at least two distinct indices i1, i2 ∈[c] satisfy that |Li1| = |Li2| = ∞. Toward a contradiction, we\nassume otherwise. Since L = S\ni∈[c] Li, exactly one index i ∈[c] must make Li inﬁnite. Let us ﬁx such\nan index, say, i. Given any index j ∈[c], we set Si,j to be {y ∈L | ∃x ∈Li [ |x| = |y| + j ]}.\nSince\nL is constantly growing, a set Si,j must be inﬁnite for a certain index j. Note that Si,j ⊆Lℓholds for\nℓ= i −j mod c′. This containment implies that Lℓis inﬁnite, contradicting the uniqueness of i since i ̸= ℓ.\nTherefore, we can choose two distinct indices i1, i2 ∈[c] for which |Li1| = |Li2| = ∞. Finally, we deﬁne\nC = {x ∈Σ∗| |x| ≡i1 (mod c′)}, which is clearly regular. Since Li1 ⊆C and Li2 ⊆C, it obviously follows\nthat |C ∩L| = |C ∩L| = ∞. In other words, C dissects L, as requested.\n✷\nFor a wider application of Lemma 3.3, it is desirable to strengthen the lemma slightly. In what follows, we\nsuccinctly write CGL for the family of all constantly-growing languages and use the notion of CGL-immunity\nto describe our proposition.\nProposition 3.4 Every language that is not CGL-immune is REG-dissectible.\nThe above proposition comes from Lemma 3.3 as well as the following transitive closure property of\nREG-dissectibility: for any two inﬁnite languages A and B, if A is REG-dissectible and A ⊆B, then B is\nalso REG-dissectible.\nLuckily, a length pattern of strings in a language is not the only feature used to dissect the target language.\nFor example, the languages L2 and L3 exempliﬁed in Section 1 are not constantly growing; however, they\nare dissected by regular languages. Before presenting more examples of REG-dissectible languages in the\nnext section, we will show a plausible limitation of the dissecting power of the regular languages. Following a\nstandard convention, the notation L stands for the family of all languages that can be recognized by two-way\ndeterministic Turing machines using a read-only input tape together with a constant number of logarithmic\nspace-bounded read/write work tapes. In the next proposition, we will show that L contains a language that\ncannot be dissected by any regular languages.\nTheorem 3.5 The language family L is not REG-dissectible.\nProof.\nLet us consider the unary language S = {0n! | n ∈N} over the alphabet Σ = {0}. Firstly, we will\nshow that S is in L. For this purpose, it suﬃces to design a logarithmic-space deterministic Turing machine\nthat recognizes S. On input of the form 0m, the desired machine M writes m in binary on its 1st work tape\nusing O(log m) cells and 1 on its 2nd work tape. At each round, M reads out a number, say, n in binary\nwritten on the 2nd tape and checks if m is a multiple of n using the 3rd work tape as a counter up to n. If\nnot, then M immediately rejects the input; otherwise, it increases n by one (in binary) before entering the\nnext round. If the machine does not reject until n reaches m, then it accepts the input.\nSecondly, we want to show that no regular language can dissect S. Assume otherwise; that is, there exists\nan inﬁnite language C ∈REG over Σ that dissects S. We need the following technical property (Claim 1)\nof this unary regular language C regarding its length set LT (C). Let us recall the notation Aa,b,k and, in\naddition, set G = {(a, b, k) | a, b, k ∈N, b < a} for the description of the property.\nClaim 1 For any unary language C, C is regular iﬀthere exists a ﬁnite set G ⊆G for which LT (C) =\nS\n(a,b,k)∈G Aa,b,k.\nClaim 1 is attributed to Parikh [8] and, since C ∈REG, the claim guarantees the existence of a ﬁnite set\nG that characterizes C; namely, LT (C) = S\n(a,b,k)∈G Aa,b,k.\nSince |C ∩S| = ∞, there exists a triplet (a, b, k) in G satisfying |{m | ∃n ≥k [ m! = an + b ]}| = ∞.\nNow, we argue that b = 0. First, take two integers m, n with n ≥k and m > a satisfying an + b = m!.\nSince a < m, m! ≡0 (mod a) holds. From an + b ≡b (mod a), we obtain b ≡0 (mod a). Since b < a, b\n4\nmust be zero, as requested. Moreover, it holds that a > 1. To see this fact, suppose that a = 1. Since A1,0,k\nequals {n | n ≥k}, we conclude that |N −A1,0,k| < ∞. Therefore, it follows that |LT (C) ∩LT (S)| < ∞,\ncontradicting |C ∩S| = ∞.\nSince a > 1 and b = 0, for a certain large constant k′, it holds that {m! | m ≥k′} ⊆Aa,0,k. This implies\nthat |LT (C) ∩LT (S)| < ∞. This is a clear contradiction, and therefore C cannot dissect S.\n✷\nFor convenience, we denote by REG-DISSECT the collection of all inﬁnite REG-dissectible languages.\nIt is not diﬃcult to prove the following closure/non-closure properties. (1) The set REG-DISSECT is closed\nunder concatenation, reversal, Kleene star, and union. (2) REG-DISSECT is not closed under intersection\nwith regular languages. (3) Moreover, REG-DISSECT is not closed under λ-free homomorphism as well as\nunder quotient with regular languages, where λ is the empty string. The last two properties can be proven\nusing certain languages derived from the one presented in the proof of Theorem 3.5.\n4\nContext-Free Languages and Bounded Languages\nParikh [8] discovered that the number of times that each symbol occurs in each string of a given context-free\nlanguage L must satisfy a certain system of linear Diophantine equations. This result inspired a notion\nof semi-linear languages. Context-free languages are an important example of semi-linear languages and\na semi-linear nature of languages will be exploited in certain cases of the REG-dissectibility proofs of the\nlanguages. First, we will explain the notion of semi-linear sets and languages using a matrix formalism. A\nsubset A of Nk is called linear if there exist a number m ∈N and an (m + 1) × k nonnegative integer matrix\n(called a critical matrix) T satisfying the following condition: for every point v ∈Nk, v is in A if and only\nif (1, z1, z2, . . . , zm)T = v holds for a certain tuple (called a solution) (z1, z2, . . . , zm) ∈Nm. A semi-linear\nset is a union of ﬁnitely many linear sets. Given any string x over alphabet Σ = {σ1, σ2, . . . , σk}, a Parikh\nimage of x, denoted by Ψ(x), is a point (#σ1(x), #σ2(x), . . . , #σk(x)) in the space Nk, and the commutative\nimage (or the Parikh image) Ψ(L) of a language L over Σ refers to the set {Ψ(x) | x ∈L}. A language L is\ncalled semi-linear whenever Ψ(L) is semi-linear.\nThe family of all semi-linear languages is denoted by SEMILIN, and SEMILIN(2) expresses the family\nSEMILIN ∧SEMILIN.\nLemma 4.1 SEMILIN ⊆REG-DISSECT but SEMILIN(2) ⊈REG-DISSECT.\nProof.\nEvery semi-linear language L is deﬁned by a ﬁnite set of certain linear equations and this fact\nproves that L has the property of constant growth. Lemma 3.3 therefore leads to the ﬁrst part of the lemma.\nTo see that SEMILIN(2) is not REG-dissectible, let us consider two example languages L1 = {0n1n | n ∈N}\nand L2 = {1n0n | n ∈N} ∪{0n!1n! | n ∈N} over the binary alphabet Σ = {0, 1}. Since Ψ(L1) = Ψ(L2) =\n{(n, n) | n ∈N}, L1 and L2 are semi-linear. However, the intersection L1 ∩L2 ∈SEMILIN(2), which equals\n{0n!1n! | n ∈N}, can be shown to be non-REG-dissectible by an argument similar to the proof of Theorem\n3.5.\n✷\nSince CFL ⊆SEMILIN [8], Lemma 4.1 immediately yields the following consequence.\nCorollary 4.2 The language family CFL is REG-dissectible.\nTo utilize well-studied properties on semi-linear languages, we limit our attention within a restricted\npart of context-free languages.\nA language L over alphabet Σ is said to be bounded if there are ﬁxed\nnonempty strings w1, w2, . . . , wm in Σ∗such that L is a subset of L[w1, w2, . . . , wm] =def {wi1\n1 wi2\n2 · · · wim\nm |\ni1, i2, . . . , im ∈N} [5]. For readability, we abbreviate as BCFL the family of all bounded context-free lan-\nguages. The k-conjunctive closure of BCFL, denoted BCFL(k), is deﬁned inductively as follows: BCFL(1) =\nBCFL and BCFL(k) = BCFL(k −1) ∧BCFL for every index k ≥2. Earlier, Liu and Weiner [7] proved\nthat the collection {BCFL(k) | k ∈N+} forms an inﬁnite hierarchy within the family of context-sensitive\nlanguages.\nTheorem 4.3 For any index k ≥1, BCFL(k) is REG-dissectible.\nFor the proof of Theorem 4.3, we deﬁne ˜Ψ(w) to be {(i1, i2, . . . , im) ∈Nm | w = wi1\n1 wi2\n2 · · · wim\nm } for\neach string w in L[w1, w2, . . . , wm]. Notice that ˜Ψ(w) could contain numerous elements because w may\nhave more than one expression of the form wi1\n1 wi2\n2 · · · wim\nm . Finally, we deﬁne ˜Ψ(L) = S\nw∈L ˜Ψ(w) for any\n5\nbounded language L. This operator ˜Ψ works similarly as Ψ does and, by exploiting this similarity, Ginsburg\n[4] exhibited a close relationship between a bounded context-free language L and the semi-linearity of ˜Ψ(L).\nWhat we need for our proof given below is the following slightly weaker form of [4, Theorem 5.4.2]: for any\nsubset L of L[w1, . . . , wk] in BCFL, ˜Ψ(L) is semi-linear, and thus L belongs to SEMILIN.\nProof of Theorem 4.3.\nWe start with the following general claim regarding Ψ. By viewing w1, w2, . . . , wm\nas “diﬀerent” symbols σ1, σ2, . . . , σm as in [4], a similarity between Ψ(w) and ˜Ψ(w) makes the claim true for\n˜Ψ as well.\nClaim 2 For any languages L1, L2 ∈SEMILIN, if |L1∩L2| = ∞and Ψ(L1)∩Ψ(L2) ⊆Ψ(L1∩L2) hold, then\nL1 ∩L2 is REG-dissectible. More generally, let k be any number ≥2 and let L1, L2, . . . , Lk be k semi-linear\nlanguages. If\n\f\f\fTk\ni=1 Li\n\f\f\f = ∞and Tk\ni=1 Ψ(Li) ⊆Ψ(Tk\ni=1 Li) hold, then Tk\ni=1 Li is REG-dissectible.\nProof.\nSince Ψ(L1 ∩L2) ⊆Ψ(L1) ∩Ψ(L2) always holds, our assumption actually means Ψ(L1 ∩L2) =\nΨ(L1)∩Ψ(L2). Since the set of all semi-linear sets is closed under Boolean operations (as well as projections)\n[6], we conclude that L1 ∩L2 belongs to SEMILIN. Lemma 4.1 implies that L1 ∩L2 ∈REG-DISSECT. The\nabove proof can be easily extended to the case of the intersection Tk\ni=1 Ψ(Li) of k commutative images. ✷\nNow, let L′ = L[w1, w2, . . . , wm] and take any k subsets L1, L2, . . . , Lk ∈BCFL of L′. As noted earlier, it\nfollows that L1, L2, . . . , Lk ∈SEMILIN. Here, we assume that L = Tk\ni=1 Li is an inﬁnite set. By Claim 2, we\nonly need to prove that Tk\ni=1 ˜Ψ(Li) ⊆˜Ψ(Tk\ni=1 Li). Firstly, choose any point v ∈Tk\ni=1 ˜Ψ(Li) and ﬁx i ∈[k]\narbitrarily. Since the inverse image ˜Ψ−1(v) = {w ∈L′ | v ∈˜Ψ(w)} must be a singleton, there exists a unique\nstring w ∈L′ for which ˜Ψ−1(v) = {w}. From v ∈˜Ψ(Li), we obtain the membership w ∈Li. Moreover,\nsince i is arbitrary, we conclude that w is in Tk\ni=1 Li. It therefore follows that v ∈˜Ψ(w) ⊆˜Ψ(Tk\ni=1 Li). In\nconclusion, L is REG-dissectible.\n✷\nWithout the condition Ψ(L1) ∩Ψ(L2) ⊆Ψ(L1 ∩L2) of Claim 2, nevertheless, it is impossible to prove\nthe intersection of two semi-linear languages to be REG-dissectible since SEMILIN(2) ⊈REG-DISSECT.\nNext, we will show the REG-dissectibility of the Boolean hierarchy over BCFL, where the Boolean\nhierarchy over BCFL is deﬁned as follows: BCFL1 = BCFL, BCFL2k = BCFL2k−1 ∧co-BCFL, and\nBCFL2k+1 = BCFL2k ∨BCFL for every number k ∈N+. Finally, we set BCFLBH = S\nk≥1 BCFLk.\nTheorem 4.4 The Boolean hierarchy BCFLBH is REG-dissectible.\nProof.\nSince BCFL2k−1 ⊆BCFL2k holds for every number k ∈N+, it is suﬃcient to prove that BCFL2k\nis REG-dissectible for all indices k ∈N. We will show this claim by induction on k. For the basis case of\nBCFL2 (= BCFL −BCFL), let L1 and L2 be languages over alphabet Σ in BCFL and concentrate on the\ndiﬀerence L1 −L2. First, we intend to prove Claim 3. In the claim, the notation ∥v∥1 for any vector v in a\nEuclidean space denotes the ℓ1-norm of v; that is, ∥v∥1 = P\ni |vi| if v = (vi)i.\nClaim 3 Let L1 and L2 be any two inﬁnite semi-linear languages satisfying Ψ(L1) ̸⊆ae Ψ(L2). If Ψ(L1) −\nΨ(L2) ⊆Ψ(L1 −L2) holds, then the diﬀerence L1 −L2 is REG-dissectible.\nProof.\nSince Ψ(L1) and Ψ(L2) are both semi-linear, the diﬀerence Ψ(L1) −Ψ(L2) is semi-linear as well\n[6]. By our assumption follows the equality Ψ(L1) −Ψ(L2) = Ψ(L1 −L2). There exists a series of critical\nmatrices that characterizes Ψ(L1 −L2). Here, we want to ﬁx one of them, say, T = (vj)1≤j≤m, where each vj\nis a column vector. For simplicity, we assume that v1 ̸= O and, moreover, the second entry of v1 is non-zero.\nGiven each index i ∈{0, 1}, let us consider a set Ai = {w ∈Σ∗| ∃z1 ∈N [ (1, 2z1 + i, 0, . . . , 0)T = Ψ(w) ]}.\nSince Ψ(A0 ∪A1) ⊆Ψ(L1 −L2), we conclude that A0 ∪A1 ⊆L1 −L2. It is clear that Ai is inﬁnite and the\nlanguage Ci = {w ∈Σ∗| |w| = ∥(1, 2z1 + i, 0, . . ., 0)T ∥1} is also inﬁnite because of Ai ⊆Ci. In addition,\nCi is regular because every string w in Ci satisﬁes |w| = ∥v0∥1 + (2z1 + i)∥v1∥1 and it is easy to determine\nwhether or not this is true for any given string w by running an appropriate dfa. Since C0 ∩C1 = Ø and\nAi ⊆Ci ∩(L1 −L2) for each index i ∈{0, 1}, Ci must dissect L1 −L2. Hence, L1 −L2 is REG-dissectible.\n✷\nNow, we claim that ˜Ψ(L1) −˜Ψ(L2) ⊆˜Ψ(L1 −L2) for two arbitrary languages L1 and L2 in BCFL. To\nprove this claim, take any point v ∈˜Ψ(L1) −˜Ψ(L2). Since v ∈˜Ψ(L1), there exists a string w ∈L1 for\nwhich v ∈˜Ψ(w). Note that w ̸∈L2 because, otherwise, we obtain v ∈˜Ψ(w) ⊆˜Ψ(L2), a contradiction. Since\n6\nw ∈L1 −L2, it follows that v ∈˜Ψ(w) ⊆˜Ψ(L1 −L2). Using a similarity between Ψ(w) and ˜Ψ(w) as in the\nproof of Theorem 4.3, we can apply Claim 3 and then obtain the REG-dissectibility of L1 −L2.\nThe remaining task is to deal with the induction case of BCFL2k for any number k ≥2. For this purpose,\nwe will present a simple fact on the even levels of the Boolean hierarchy over BCFL.\nClaim 4 For every number k ≥2, BCFL2k = BCFL2k−2 ∨BCFL2.\nProof.\nHere, we want to prove that (*) for every number k ≥2, BCFL2k−2 ∧co-BCFL = BCFL2k−2.\nWrite F for BCFL2k−2 ∧co-BCFL for simplicity. Since BCFL2k−2 = BCFL2k−3 ∧co-BCFL holds by the\ndeﬁnition, F equals BCFL2k−3 ∧(co-BCFL ∧co-BCFL), which is actually BCFL2k−3 ∧co-(BCFL ∨BCFL).\nSince BCFL is closed under union (i.e., BCFL∨BCFL = BCFL), it follows that F = BCFL2k−3 ∧co-BCFL.\nBy the deﬁnition again, the right-hand side of this equation coincides with BCFL2k−2. Therefore, Statement\n(*) holds.\nRecall that BCFL2k equals BCFL2k−1 ∧co-BCFL, which also coincides with (BCFL2k−2 ∨BCFL) ∧\nco-BCFL. By DeMorgan’s law, it holds that BCFL2k = (BCFL2k−2 ∧co-BCFL) ∨(BCFL ∧co-BCFL).\nStatement (*) then leads to BCFL2k = BCFL2k−2 ∨BCFL2, as requested.\n✷\nNotice that the induction hypothesis ensures the REG-dissectibility of BCFL2k−2. Since BCFL2 has been\nalready proven to be REG-dissectible, BCFL2k−2 ∨BCFL2 must be REG-dissectible by the closure property\nof REG-DISSECT discussed in Section 3. By Claim 4, this family is exactly BCFL2k. This completes the\nproof of Theorem 4.4\n✷\n5\nSeparation with Inﬁnite Margins\nIn this ﬁnal section, we will seek a meaningful application of our previous results regarding the REG-\ndissectibility of certain bounded languages. To describe this application, we need to introduce extra termi-\nnology. Given two inﬁnite sets A and B, we say that A covers B with an inﬁnite margin (A i-covers B, or A\nis an i-cover of B, in short) if both B ⊆A and A ̸=ae B hold. When A i-covers B, we brieﬂy write i(B, A)\nand call it an i-covering pair. A language C is said to separate i(B, A) with inﬁnite margins (or i-separate\ni(B, A), in short) if (i) B ⊆C ⊆A, (ii) A ̸=ae C, and (iii) B ̸=ae C. For convenience, we use the notation\ni(B, A) for two language families A and B to denote the set of all i-covering pairs i(B, A) satisfying A ∈A\nand B ∈B. Another language family C is said to i-separate i(B, A) if, for every pair i(B, A) in i(B, A), there\nexists a set in C that i-separates i(B, A).\nThe following is a key lemma that bridges between the REG-dissectibility and the i-separation.\nLemma 5.1 Let A and B be any two language families and assume that A −B is REG-dissectible. It then\nholds that, for any A ∈A and any B ∈B, if A i-covers B, then there exists a language in E that i-separates\ni(B, A), where E expresses the set {B ∪(A ∩C) | A ∈A, B ∈B, C ∈REG}. In other words, E i-separates\ni(B, A).\nProof.\nLet A ∈A and B ∈B be two inﬁnite languages. Let D = A −B and assume that D is inﬁnite.\nOur assumption guarantees the existence of a regular language C for which C dissects D. For convenience,\nwe set E = B ∪(A ∩C). Since C dissects D, it follows that |(A ∩C) −B| = ∞and |(A ∩C) −B| = ∞.\nThese conditions imply that B ⊆E ⊆A and |A −E| = |E −B| = ∞. Thus, E i-separates i(B, A). Since C\nis regular, E clearly belongs to the language family E.\n✷\nConcerning bounded context-free languages, we can show the following i-separation result.\nTheorem 5.2 For any index k ∈N+, BCFLk i-separates i(BCFLk, BCFLk). Thus, BCFLBH i-separates\ni(BCFLBH, BCFLBH).\nProof.\nHereafter, we intend to show that BCFLk −BCFLk is REG-dissectible because an application of\nLemma 5.1 immediately leads to the theorem. For our purpose, it suﬃces to prove that BCFLk −BCFLk\nis included in BCFLBH, because BCFLBH is REG-dissectible by Theorem 4.3.\nMore strongly, we will\ndemonstrate that, for any two indices i, j ≥1, BCFLi −BCFLj ⊆BCFLBH.\nGiven an index pair (i, j) ∈N+ × N+, let Fi,j = BCFLi −BCFLj = BCFLi ∧co-BCFLj and Gi,j =\nBCFLi ∧BCFLj for simplicity. We will show that Fi,j ⊆BCFLBH by induction on (i, j). For the basis case\n(1, 1), since F1,1 = BCFL2 holds, clearly F1,1 is a subset of BCFLBH. For the second case (2, 1), we ﬁrst\n7\nnote that BCFL4 = (BCFL2 ∧co-BCFL2) ∨(BCFL2 ∧BCFL2) = F2,1 ∨G2,2. We thus obtain F2,1 ⊆BCFL4\nas well as G2,2 ⊆BCFL4. For the induction case (i, j), it is enough to consider the case where i = 2k and\nj = 2m + 1. Similar to Claim 4, we can prove the next useful relation.\nClaim 5 co-BCFL2k+1 = BCFL2k−1 ∨BCFL2.\nBy Claims 4 and 5, F2k,2m+1 equals (BCFL2k−2∨BCFL2)∧(co-BCFL2m−1∨BCFL2), which can be trans-\nformed into F2k−2,2m−1 ∨F2,2m−1 ∨G2k−2,2 ∨G2,2. By the induction hypothesis, there are two indices ℓ1, ℓ2\nsuch that F2k−2,2m−1 ⊆BCFL2ℓ1 and F2,2m−1 ⊆BCFL2ℓ2. By applying Claim 4 repeatedly, we then ob-\ntain BCFL2ℓ1 = Wℓ1\ni=1 BCFL2 and BCFL2ℓ2 = Wℓ2\ni=1 BCFL2. Likewise, we obtain BCFL2k−2 = Wk−1\ni=1 BCFL2.\nHence, G2k−2,2 equals (Wk−1\ni=1 BCFL2)∧BCFL2 = Wk−1\ni=1 G2,2, which is included in Wk−1\ni=1 BCFL4 = BCFL4(k−1).\nThis fact implies the containment G2k−2,2 ∨G2,2 ⊆BCFL4k. It thus follows that F2k,2m+1 ⊆BCFL2ℓ1 ∨\nBCFL2ℓ2 ∨BCFL4k = Wℓ1+ℓ2+2k\ni=1\nBCFL2. As discussed before, this is equivalent to BCFL2(ℓ1+ℓ2+2k), which\nis obviously included in BCFLBH. Therefore, we conclude that F2k,2m+1 ⊆BCFLBH.\n✷\n6\nFuture Challenges\nWe have initiated a fundamental study on the dissecting power of regular languages and an application of\nthe REG-dissectibility to the i-separation. Throughout our initial study, a number of open questions have\narisen for future research. An important open question concerns the REG-dissectibility of co-CFL and, more\nwidely, CFLk and CFL(k), which are respectively CFL-analogues of BCFLk and BCFL(k), for every level\nk ≥2. Slightly apart from CFL, two other language families 1-C=LIN and 1-PLIN, introduced in [9], are,\nat this moment, unknown to be REG-dissectible. Much anticipated is a development of a coherent theory\nof a more general notion of C-dissectibility. Concerning the i-separation of i(CFL, CFL), on the contrary, a\nkey question of whether CFL i-separate i(CFL, CFL) still awaits its answer. Lately, we have learned that\nBucher [2] had raised essentially the same question back in 1980.\nAcknowledgments\nThe ﬁrst author is grateful to Jeﬀrey Shallit for drawing his attention to [3] whose\ncore concept has helped formulate an initial notion of “dissectibility” and to Jacobo Tor´an and a reviewer\nfor pointing to [2] and providing its hard copy in the last moment.\nReferences\n[1] Y. Bar-Hillel, M. Perles, and E. Shamir. On formal properties of simple phrase-structure grammars. Z.\nPhonetik Sprachwiss. Kommunik., 14, 143–172, 1961.\n[2] W. Bucher. A density problem for context-free languages. Bulletin of EATCS, 10, p.53, 1980.\n[3] M. Domaratzki, J. Shallit, and S. Yu. Minimal covers of formal languages. In Proc. of the 5th International\nConference on Developments in Language Theory (DLT 2001), Lecture Notes in Computer Science, Springer,\nVol.2295, pp.319–329, 2002.\n[4] S. Ginsburg. The Mathematical Theory of Context-Free Languages. McGraw-Hill, New York, 1966.\n[5] S. Ginsburg and E. H. Spanier. Bounded ALGOL-like languages. Trans. Amer. Math. Soc., 113, 333–368,\n1964.\n[6] S. Ginsburg and E. H. Spanier. Semigroups, Presburger formulas and languages. Paciﬁc J. Math., 16,\n285–296, 1966.\n[7] L. Y. Liu and P. Weiner. An inﬁnite hierarchy of intersections of context-free languages. Math. Systems\nTheory, 7, 185–192, 1973.\n[8] R. J. Parikh. On context-free languages. J. ACM, 13, 570–581, 1961.\n[9] K. Tadaki, T. Yamakami, and J. C. H. Lin. Theory of one-tape linear-time Turing machines. Theor. Comput.\nSci., 411, 22–43, 2010. An extended abstract appeared in the Proc. of the 30th SOFSEM Conference on\nCurrent Trends in Theory and Practice of Computer Science (SOFSEM 2004), Lecture Notes in Computer\nScience, Springer, Vol.2932, pp.335–348, 2004.\n8\n[10] T. Yamakami. The roles of advice to one-tape linear-time Turing machines and ﬁnite automata. Int. J.\nFound. Comput. Sci., 21, 941–962, 2010. An early version appeared in the Proc. of the 20th International\nSymposium on Algorithms and Computation (ISAAC 2009), Lecture Notes in Computer Science, Springer,\nVol.5878, pp.933–942, 2009.\n[11] T. Yamakami. Immunity and pseudorandomness of context-free languages. Theor. Comput. Sci., 412, 6432–\n6450, 2011.\n9\n",
  "categories": [
    "cs.FL",
    "cs.CC"
  ],
  "published": "2012-02-22",
  "updated": "2012-12-12"
}