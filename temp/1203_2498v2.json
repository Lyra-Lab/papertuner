{
  "id": "http://arxiv.org/abs/1203.2498v2",
  "title": "Fault detection system for Arabic language",
  "authors": [
    "Riadh Bouslimi",
    "Houda Amraoui"
  ],
  "abstract": "The study of natural language, especially Arabic, and mechanisms for the\nimplementation of automatic processing is a fascinating field of study, with\nvarious potential applications. The importance of tools for natural language\nprocessing is materialized by the need to have applications that can\neffectively treat the vast mass of information available nowadays on electronic\nforms. Among these tools, mainly driven by the necessity of a fast writing in\nalignment to the actual daily life speed, our interest is on the writing\nauditors. The morphological and syntactic properties of Arabic make it a\ndifficult language to master, and explain the lack in the processing tools for\nthat language. Among these properties, we can mention: the complex structure of\nthe Arabic word, the agglutinative nature, lack of vocalization, the\nsegmentation of the text, the linguistic richness, etc.",
  "text": "LES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 231 ~ \n \n Fault detection system for Arabic language  \nRiadh BOUSLIM1, Houda AMRAOUI2 \n1 University FSJEG Jendouba Tunisia \n  bouslimi.riadh@hotmail.com \n2 University FSJEG Jendouba Tunisia \nhouda.amrawi@gmail.com \n \n1. Introduction \nThe study of natural language, especially Arabic, and mechanisms for the \nimplementation of automatic processing is a fascinating field of study, with various \npotential applications. The importance of tools for natural language processing is \nmaterialized by the need to have applications that can effectively treat the vast \nmass of information available nowadays on electronic forms. Among these tools, \nmainly driven by the necessity of a fast writing in alignment to the actual daily life \nspeed, our interest is on the writing auditors. \nThe morphological and syntactic properties of Arabic make it a difficult language \nto master, and explain the lack in the processing tools for that language. Among \nthese properties, we can mention: the complex structure of the Arabic word, the \nagglutinative nature, lack of vocalization, the segmentation of the text, the \nlinguistic richness, etc. \nIn that perspective, our project aims to develop a system to detect errors in spelling, \nstructure and conjugation of the Arabic language. In this article we will proceed as \nfollows. In the first section we‘ll present some approaches used for the correction \nof errors. The second section will be devoted to detailed studies of our proposed \nsystem. In the last section, we‘ll perform experimental tests to evaluate the \nperformance of our system.  \n \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 232 ~ \n \n2. State of the art \n2.1. MASPAR \nA multi-agent system is a system of agents‘ group that communicate with one \nanother to provide answers about a goal to achieve. \nMASPAR is a system of analysis of Arabic texts based on the approach of multi-\nagents. It consists of a set of agents, using a direct communication by sending \nmessages. These agents work together in order to make syntaxes‘ analysis of a \nsentence given by the user by determining its syntax composition. (tree, je ne sais \npas si ca existe!!!c un mot relativement technique, il faut voir...) \n2.1.1. MASPAR System Limits \nThe major drawback of such system is the time taken by the agents for \ncommunication and interaction. \nOne might also note that the MASPAR system does not detect errors of \nconjugation. Also, it has a non-ergonomic interface. \n3. Proposed System \n3.1. General Description \nOur system (Figure 1) is designed to detect errors in spelling, structure and \nconjugation in a non- vowelized Arabic text. It consists of five phases, each uses \nthe information received from the previous phase to finally get a text containing the \nleast number of mistakes. \nThe segmentation phase consists on dividing the text into sentences and then into \nwords. The lexical phase subsequently receives the word and checks its existence \nin the database of words. \nAfter verifying that this word belongs to the language, the phase labelling \nassociates the word it has received the possible morph syntactic labels, this makes \nthe word ambiguous, hence the need to remove this ambiguity by passing phase \ndisambiguation, which in applying certain rules, is used to assign to this word the \nmost suitable label. \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 233 ~ \n \nTo correct the word ―Wc‖, we must compare it with the database of words that we \nhave, if this word belongs to our dictionary, it means that ―Wc‖ is a correct word \notherwise our system will detect a misspelling. \nThe algorithm then verify the proper structure of this sentence, otherwise the \nsystem will detect a structure fault. Finally, our system is also capable to detect the \nfaults of conjugation in a sentence. \nWe, first, introduce the general architecture of our system.  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 1 : Proposed system \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 234 ~ \n \n \n3.2. Detailed Description \nWhen receiving an electronic text to analyze, our system launches the first phase \nwhich is segmentation. This phase begins with the identification of the text‘ \nsentences based on punctuation signs then on the words in each sentence. \nSubsequently, the words in each sentence will be transferred one by one to the \nlexical phase. \nThis will verify whether the word belongs to the language or not by checking its \nexistence in our database of words. Subsequently, the word is sent to the next \nphase.  The phase label is responsible for providing possible morph syntactic \ncharacteristics of each received word (from the lexical phase). This means that a \nword can‘t go to the labelling phase unless its belonging to our database has been \nconfirmed within the lexical phase. \nBecause each word can have several labels, the analysis of the word can face \ncertain \nambiguity. \nThat‘s \nwhy \nwe \nmust \nuse \nrules \nto \nreduce \nthis \nambiguity. Therefore, disambiguation phase is triggered to limit the number of \nlabels associated with the word and assign a single label at a time. \nOnce the ambiguity is removed, we get into the final phase of the system which  \nrole is to apply rules that enable to compare the analyzed structures. This helps \ndetect errors in structure and conjugation. \n \nALGORITHM Editor \nSTARTERS: Wc: the word of the sentence \n           Phrase: the input sentence \n           BaseXml: the database contains dictionary words \n           BaseReglesStruc: the database of structural rules \n           BaseReglesConjug: the database according to the rules of conjugation \nSTART \n     FOR each Phrase DO \n            FOR each Wc of Phrase DO \n                 If   (Wc, BaseXml) == false then \n                     Write (Wc 'is incorrect') \n                     Otherwise \n                    Type ReccupererType (Wc, BaseXMl) \n                            Structurephrase  Type \n                End if \n           End For \n         Compare (Structurephrase, BaseReglesStruc) \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 235 ~ \n \n          If (compare == true) then \n               Write ('the structure of the sentence is not correct') \n              Otherwise \n              If the structure contains a verb then \n                    Apply (BaseReglesConjug, Structurephrase) \n              End if \n             If (Apply==false) then \n                 Write ('the combination is not correct') \n             End if \n       End if \nEnd For \nEND. \n   \n3.2.1. Segmentation \nThis phase consists on dividing the text into sentences and the sentences into words \nbased on markers at the beginning and the end, for example points, semicolons, \ncolons… \n3.2.2. Lexical Analysis \nThis phase checks the belonging of each word to the language, obtained from the \nsegmentation phase based on the data base of the words available.  \nVerify the existence of the base in the lexicon : We must ensure that the words \nintroduced constitute the basics of the Arabic language. For that reason, we verify \nthe existence of the base in the lexicon. We have to consult the database of Arabic \nwords, if the extracted base coincides with a word from the database; we conclude \nthat the word exists in Arabic. \n3.2.3. Labelling \nThis operation aims to add to the words linguistic information with morphological \nor syntactic nature in order to identify them. \nWe have presented several possible tags of the word minimum (prefix + base + \nsuffix): \nHowever, the lack of vocalization does not accurately determine the proper \netiquette of the word which causes a certain ambiguity. To reduce this ambiguity, \nwe will proceed to the next step. \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 236 ~ \n \n3.2.4. Disambiguation \nA disambiguation is needed to limit the number of labels of these words and \nsubsequently improve the detection of grammatical errors. \nCompatibility Rules: It can reduce the ambiguity of a word by associating it with \none type at a time, so the sentence containing the ambiguous word has more than a \nstructure based on the number of labels that word. Subsequently, the system \nassociates to the word the suitable type according to the structural rules.  \n3.2.5. Detecting faults \nFor the detection of faults, we can use rules of grammar. These rules describe \ncorrect grammatical patterns. For this, we have defined a basic structure rules and \nanother different basis for the conjugation rules. If some text does not match any \nrule, a structural or conjugal error is detected. To detect structural faults, we‘ll \ncompare our sentences‘ structure with the basic structural rules, if this structure \ndoes not coincide with any rule, then a lack of structure will be detected, otherwise, \nif the structure is correct and if it contains a verb, since the combination only \napplies to the verb, our system will have access to our database conjugation, \nsatisfies a certain compatibility between pre-and post-basic core that typically \naccompany the verb, if our sentence presents a bad combination when a fault is \ndetected. In the end, the user receives a text containing errors detected with \nstaining of these faults, each depending on the type of errors detected. \n3.2.6.The databases used in the system \nXML database for the detection of spelling errors \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 237 ~ \n \nTo detect if the spelling of a given word is correct or not, the verification process \nrun through the XML tree of the dictionary and compare the word with the word \nlist file. It sets out below a portion of our base words. \n \nXML Data Base for the detection of structural faults \nAfter ascertaining that the specified words are spelled correctly, we assess at this \nlevel whether the sentence structure is coherent or not by comparing it with the \nbase of the structures we have created an XML file with the following form:  \n \nXXM\nMLL  DDaattaa  BBaassee  ffoorr  ddeetteeccttiinngg  ffaauullttss  ccoonnjjuuggaattiioonn \nOur system can also detect conjugation errors. To handle this, we used an XML file \nas follows: \n \n4. Test and Validation \nWe choose to assess the performance criteria that are available: the ergonomics and \nthe response time chosen by our system. \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 238 ~ \n \nRegarding ergonomics, performance analyzers must have a user-friendly interface, \npresenting a number of functionality to help users better handle this interface to \nmanage the features offered by the system. \nThe speed of response is another important constraint for parsers for, to be useful \nin the real world, they must return a response very quickly. \n4.1. Experiments \nOur experiments on the system relate texts of Arabic literature in various \nfields. We introduced those relating to the field of Medicine, Marketing, \nEconomics and Arabic grammar. \n(-): If no fault is detected. \n(+): If an error is detected. \n \n \nSentences \nDetection of \nspelling \nerrors \nDetection of \nstructural errors \nDetecting of \nconjugation \nerrors \nيثحث في أطىل تكىيٍ انجًهح و قىاػذ اإلػشاب(-) \n(-) \n(-) \nو \n يثحث\nفي في \n ٍأطىل تكىي انجًح و قىاػذ \n(+) \n(+) (+) \n(-) \n ٌيتكى\nجسى اإلَساٌ يٍ أجهضج يختهفح انىظائف(-) \n(-) \n(-) \nٍانتسىيق هى يجًىػح ي \n انؼًهياخ\nأوألَشطح \n(+) \n(-) \n(-) \n،انتسىيق هى يجىػح يٍ انؼًهياخ أو األَشطح\nتشثؼىا سغثاخ انؼًالء \n \n(+) \n(-) \n(+) \nٌأَتى نى تزهثى \n(-) \n(-) \n(+) \nأَتى نى تزهثىا \n(-) \n(-) \n(-) \nيأخز إيًاٌ أقشاص \n(-) \n(-) \n(+) \nيأخز أيًٍ أقشاص \n(-) \n(-) \n(-) \nٌتزهثيٍ إيًا \n(-) \n(-) \n(+) \nٌتزهة إيًا \n(-) \n(-) \n(-) \nٌهًا نٍ يزهثا \n(-) \n(-) \n(+) \nنى يكتثىا انجًهح \n(-) \n(-) \n(+) \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 239 ~ \n \nهى نى يكتثىا انجًهح \n(-) \n(-) \n(-) \nأيًٍ يزهة \n(-) \n(-) \n(+) \nٍانُحى انؼشتي هى ػهى، تثحث في أطىل تكىي\n انجًهح و قىاػذ\nاإلػشاب \n(-) \n(-) \n(-) \nٌيزكش أٌ في يثم رنك انًكا \n(-) \n(+) \n(-) \nTo evaluate the error detection, we use the rate of accuracy (standard indicator \nclassification [4]). This indicator is between 0 and 1.One being the perfect result. \nTo calculate this index, we needed to appoint different sets. \nLet D be the total set of words, incorrect words D + and D-words correct. D + and \nD-form a partition of D. Let R be the set of words identified as erroneous. Some \nwords are part of R + D D-other. \nThe precision is out as an index of the proportion of words identified as \nerroneous. Its formula is: \nDetection Accuracy = | D + ∩ R | / | R | \n4.2. Results and interpretations: \nWe note that our system has a good detection for errors in spelling and \nstructure. (Indicator precision = 1 for the detection of spelling errors and 0.75 for \nstructures). Indeed, we get a quick response if the word entered is incorrect or the \nstructure is wrong. We therefore have a very high proportion of errors actually \ndetected. We can also note the good accuracy of the wrong word or structure which \nfacilitates the coloration of errors. \nWe can also note that our system has a medium detection for errors in \nconjugation (Indicator accuracy = 0.56). This is for several reasons: \nNote first the difficulty of the Arabic language in particular as regards to the \nconjugation. \nThen, our system took only where the verb is conjugated in the simple present and \npresent Negation and verifies the compatibility between pre-and post-foundation \nbases with different personal pronouns. By cons, although the average conjugation \nfault detection, our system provides a new paradigm as it has treated the most \ndifficult  \nin the Arabic language is the conjugation. \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 240 ~ \n \n0\n20\n40\n60\n80\n100\nErrors detection\nDetection of spelling\nerrors\nDetection of structural\ncorrection\nDetection of conjugation\nerrors\n \n  \n \n \n \n \nHistogram showing the \npercentages of \ndetection system \n5. Conclusion and Perspectives \nThe information retrieval and text mining in Arabic is a major challenge. We are \ninterested in this work to develop an application to detect errors in spelling, \nstructure and conjugation in the Arabic text. \nThe development of this project allowed us to familiarize ourselves with the Java \nlanguage, a language in the promising field of programming technologies. It \nallowed us to consolidate our knowledge on various techniques including \nmanipulation of XML. \nThe work we have done is a response to the objectives set at the outset of the \nproject. However, it can evolve by considering several extension elements. \nWe can consider adding propositions for the wrong words in order to improve the \nperformance of our system. We can also add more functionality to our tool such as \ntranslating the input text from one language to another following the user's choice. \nWe can also handle the case semantics and the texts vowels. \n6. Bibliographie \nAloulou C., Belguith H., Hadj Kacem A., and Hamami M. (2005). The Book \nSystem implementation \non a MASPAR approach MULTI-AGENT, Faculty of Economics and Management \nof Sfax.  \nWilson W., Wei L. and Mohammed B. (2006). Scoring for Integrated Spelling \nError Correction, \nAbbreviation expansion and Case Restoration in Dirty Text. School of Computer \nScience and \nLES RESSOURCES LANGAGIERES : CONSTRUCTION ET EXPLOITATION \n \n~ 241 ~ \n \nEngineering Software University of Western Australia \nDouzidia Fuad S. (2004). Automatic summarization Arabic. University of \nMontreal: Department of \nComputer Science and Operations Research Faculty of Arts and Sciences  \nGuillaume P. (2005) Fixed spelling in context. Compiegne University of \nTechnology. \n \n \n",
  "categories": [
    "cs.CL"
  ],
  "published": "2012-03-08",
  "updated": "2013-06-04"
}