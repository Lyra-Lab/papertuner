{
  "id": "http://arxiv.org/abs/1309.2471v1",
  "title": "Implementation of nlization framework for verbs, pronouns and determiners with eugene",
  "authors": [
    "Harinder Singh",
    "Parteek Kumar"
  ],
  "abstract": "UNL system is designed and implemented by a nonprofit organization, UNDL\nFoundation at Geneva in 1999. UNL applications are application softwares that\nallow end users to accomplish natural language tasks, such as translating,\nsummarizing, retrieving or extracting information, etc. Two major web based\napplication softwares are Interactive ANalyzer (IAN), which is a natural\nlanguage analysis system. It represents natural language sentences as semantic\nnetworks in the UNL format. Other application software is dEep-to-sUrface\nGENErator (EUGENE), which is an open-source interactive NLizer. It generates\nnatural language sentences out of semantic networks represented in the UNL\nformat. In this paper, NLization framework with EUGENE is focused, while using\nUNL system for accomplishing the task of machine translation. In whole\nNLization process, EUGENE takes a UNL input and delivers an output in natural\nlanguage without any human intervention. It is language-independent and has to\nbe parametrized to the natural language input through a dictionary and a\ngrammar, provided as separate interpretable files. In this paper, it is\nexplained that how UNL input is syntactically and semantically analyzed with\nthe UNL-NL T-Grammar for NLization of UNL sentences involving verbs, pronouns\nand determiners for Punjabi natural language.",
  "text": "IMPLEMENTATION OF NLIZATION FRAMEWORK \nFOR VERBS, PRONOUNS AND DETERMINERS WITH \nEUGENE \nHarinder Singh1 and Parteek Kumar2 \n1,2Computer Science & Engineering Department Thapar University, Patiala, India \nsingh.harinder@outlook.com \nparteek.bhatia@thapar.edu \nABSTRACT \nUNL system is designed and implemented by a nonprofit organization, UNDL Foundation at Geneva in \n1999. UNL applications are application softwares that allow end users to accomplish natural language \ntasks, such as translating, summarizing, retrieving or extracting information, etc. Two major web based \napplication softwares are Interactive ANalyzer (IAN), which is a natural language analysis system. It \nrepresents natural language sentences as semantic networks in the UNL format. Other application \nsoftware is dEep-to-sUrface GENErator (EUGENE), which is an open-source interactive NLizer. It \ngenerates natural language sentences out of semantic networks represented in the UNL format. In this \npaper, NLization framework with EUGENE is focused, while using UNL system for accomplishing the task \nof machine translation. In whole NLization process, EUGENE takes a UNL input and delivers an output in \nnatural language without any human intervention. It is language-independent and has to be parametrized \nto the natural language input through a dictionary and a grammar, provided as separate interpretable \nfiles. In this paper, it is explained that how UNL input is syntactically and semantically analyzed with the \nUNL-NL T-Grammar for NLization of UNL sentences involving verbs, pronouns and determiners for \nPunjabi natural language. \nKEYWORDS \n Rule based Approach, Interlingua, Multilingual, NLization, UNL.  \n1. INTRODUCTION \nToday all over the world work is in progress by various government/educational organizations \nand some individual researchers for technological development of most widely spoken natural \nlanguages. Machine Translation is most challenging task which is to be accomplished before \nexcelling further in other sub domains of NLP (Natural Language Processing). The process of \ntranslating a text written in some language to another language’s text is called Machine \nTranslation.  \nThere are many approaches used for machine translation. Interlingua based approach which is a \nrule based can be adopted for multilingual machine translation, as depicted in Figure 1. \nIn this approach, the target language is first transformed into some intermediate form, while \npreserving the semantic information associated with the words of source language. This \nintermediate form is independent of source language. From this intermediate form variety of \nnatural languages can be generated, by a separate process using respective language word \ndictionaries and sets of grammar rules. If traditional statistical approach is followed then total of \nn*(n-1) systems will be required for n number of languages in multilingual machine translation. \nBut, interlingua approach for machine translation system is a novel approach, here only 2n \nlanguage systems are required, i.e., two systems per language. \n \nFigure 1.  Model of Interlingual based Machine Translation \n   \nUniversal Networking Language (i.e., UNL) system is based on interlingua approach. \nUNL system is designed and implemented by UNDL foundation which is a non-profit \norganization based in Geneva, Switzerland in 1996. UNL system comprises of two components \none is UNLizer for converting the source language to UNL form (an intermediate form) and \nother is NLizer for generating target language from UNL form, using respective language word \ndictionaries and sets of grammar rules. UNLization and NLization are different for different \nlanguages, because sentence structures of different languages are different. \nIn this paper, NLization for Punjabi language   for verb, pronouns and determiners from UNL \nform (an intermediate form) is discussed. EUGENE (dEep-to-sUrface Natural language \nGENErator), is an open-source interactive NLizer, which is a new deconverter based on a high-\nlevel linguist-driven three-layered formalism, developed by UNDL Foundation. It generates \nnatural language sentences out of semantic networks represented in the UNL format. In its \ncurrent release, it is a web application developed in Java [1]. \n2. RELATED WORK \nInitially ‘DeCo’ was a tool for NLization, which was proposed by UNDL foundation in 2000. \nThis DeConverter actually transforms the input, a UNL expression, into a directed graph \nstructure with hyper-nodes. DeConversion of a UNL expression is carried out by applying \nDeConversion rules to these nodes. It processes the nodes from the entry node, to find an \nappropriate word for each node and generates a word sequence of target language. In this \nprocess, the system makes use of syntactic rules in order to produce syntactic structure of the \ntarget language and morphological rules to generate its morphemes, as depicted in Figure 2. \nDeConversion process ends when all words for all nodes are found and a word sequence of \ntarget sentence is completed.  \n \nFigure 2.  Structure of the DeConverter [2] \nHere, ‘G’ indicates generation windows and ‘C’ indicates condition windows of the \nDeConverter. The DeConverter operates on the node-list through generation windows. Condition \nwindows are used to check conditions for applying a rule. In the initial stage, the entry node of a \nUNL expression exists in the node-list and at the end of DeConversion, the node-list is converted \nto list of equivalent morphemes of the target language arranged syntactically to produce target \nlanguage sentence [2]. \n3. EUGENE SPECIFICATIONS \n \n \n EUGENE is a fully automatic engine. It takes a UNL input and delivers an output in \nnatural language without any human intervention [3]. It is language-independent and as a \nuniversal engine, EUGENE must be parameterized to the target languages with few files for \nUNL-NL generation. These files are processed by EUGENE, through following tabs. \n3.1. UNL Input \nUNL Documents containing universal semantic network to be used for the generation of natural \nlanguage texts are inputted into the system using first tab of EUGENE. \n3.2. Dictionary \nAn editor and for inputting a lexical database, where root words are mapped into natural \nlanguage entries, along with the corresponding features, to be provided according to the UNL \nDictionary Specifications.  \n3.3. T-Rules \nAn editor and inputting transformation grammar(s), i.e., a set of transformation rules used to \nconvert the UNL graphs into natural language sentences, to be provided according to the UNL \nGrammar Specifications. \n3.4. D-Rules \nAn editor and for inputting disambiguation grammar(s), i.e., a set of disambiguation rules used \nto improve the results of the tokenization and of the transformation. \n3.5. EUGENE \nA console, from where the output corresponding to the UNL input sentence can be generated. \nThe out can be displayed in five different trace levels. It takes a UNL input, processes it using T-\nrules and Dictionary loaded, finally, delivers an output in natural language without any human \nintervention. \nIn the next subsection features of Punjabi language and positioning of different part of speech in \na sentence of Punjabi language discussed in brief.  \n4. FUTURE OF PUNJABI LANGUAGE \nPunjabi is an Indo-Aryan language and is constitutionally recognized language of India. Indo-\nAryan languages form a subgroup of the Indo-Iranian group of languages, which in turn belong \nto Indo-European family of languages. Punjabi is widely spoken in north-west India, Pakistan, \nUnited States, Australia, United Kingdom and Canada. There are more than 91 million native \nspeakers of Punjabi language, which makes it approximately the 12th most widely spoken \nlanguage in the world [4]. \nPunjabi has word classes in the form of noun, pronoun, adjective, cardinal, ordinal, main verb, \nauxiliary verb, adverb, postposition, conjunction, interjection and particle. Punjabi nouns change \nforms for number (singular or plural) and case in sentences. Punjabi nouns have assigned gender \n(masculine or feminine), e.g., ਕੰਧ kandh ‘fence’ is used in feminine gender and ਮੇਜ਼ mēz ‘table’ \nis used in masculine gender. Punjabi has six types of pronouns. These are: personal pronouns, \ne.g., ਮੈਂ maiṃ ‘i’; reflexive pronouns, e.g., ਆਪ āp (some what equivalent to honorific form of \nEnglish second person ‘you’); demonstrative pronouns, e.g., ਉਹ uh ‘that’; indefinite pronouns, \ne.g., ਕੋਈ kōī etc.; relative pronouns (to join two clauses in a complex sentence), e.g., ਜੋ jō and \ninterrogative pronouns, e.g., ਕੌਣ kauṇ who’etc. In Punjabi language, adjectives usually precede \nthe nouns but follow the pronouns. The example of adjective preceding noun is, ‘ਸੋਹਣਾ ਮ ੰਡਾ’ \n‘sōhṇā muṇḍā’ ‘handsome boy’ and the example of adjective following pronoun is, ‘ਮੈਂ ਸੋਹਣਾ ਹਾਂ \n।’ ‘maiṃ sōhṇā hāṃ.’ ‘I am handsome’. In a Punjabi sentence, verbs must agree with the subject \nor object of the sentence in terms of gender, number, and person. Punjabi verbs change forms for \ngender, number, person and tense. The verbs have assigned transitivity and causality. In Punjabi, \nthere are two auxiliary verbs – ਹੈ ‘hai’ for present tense (e.g., ਰਾਮ ਅੰਬ ਖਾਂਦਾ ਹੈ । ‘rām amb \nkhāndā hai.’ ‘Ram eats mango’) and ਸੀ ‘sī’ for past tense (e.g., ਰਾਮ ਨੇ ਅੰਬ ਖਾਧਾ ਸੀ । ‘rām nē \namb khādhā sī.’ ‘Ram had eaten mango’). All the forms of these two auxiliary verbs can equally \nbe used for both the genders [2]. For future tense in sentences, ‘EGA’ form of main verb is used \nand in those sentences auxiliary. \n5. IMPLEMENTATION FOR NLIZATION OF PUNJABI \nThe proposed NLization system for Punjabi has been tested on five types of part of speech \nsentences, which are, Determiners, Nouns, Verbs, Pronouns, Sentence Structure and Cardinals. \nHere, in this paper, NLization for Determiners, Verbs and Pronouns types of parts of speech, are \ndiscussed. Table 1 depicts the number T-rules and Dictionary words written corresponding to \neach type of part of speech. \nTable1.  Number of T-rules and Dictionary words for each type of part of speech sentences \nType \nNo. of Sentences \nRules \nDictionary \nWords \nVerbs \n50 \n25 \n3 \nPronouns \n40 \n8 \n20 \nDeterminers \n60 \n50 \n15 \nDetailed description for processing of these sentences is given in next subsection. \n5.1. NLization of Verbs \nThe process of NLization of input UNL sentence containing verb to natural language sentence is \nillustrated with an example sentence given in (1). \nExample English sentence is: He has arrived                    \n \n \n \n   …(1) \nUNL expression for this example sentence is given in (2). \n{unl} \nagt(arrive:0B.@present.@perfect., 00:01.@3.@male) \n{/unl}  \n \n \n \n                      \n \n \n \n \n   …(2) \nEquivalent Punjabi sentence: ਉਹ ਪਹ ੁੰਚ ਚ ੁੱਕਾ ਹੈ             \n \n \n \n  …(3) \nTransliterated Punjabi sentence: uh phunch chukka hai. \nUNL expression in this example contains two root words, first is a verb, i.e., ‘arrive’ and second \nis pronoun, i.e., ‘00:01.@3’ /third person pronoun. The NLization process of UNL sentence is \ndescribed in Table 2. \n5.2. NLization of Pronouns \nThe process of NLization of input UNL sentence containing pronouns to natural language \nsentence is illustrated with an example sentence given in (4). \nExample English sentence is: They love each other          \n \n \n  \n   …(4) \nUNL expression for this example sentence is given in (5). \n{unl} \nagt(love:03.@present.@reciprocal, 00:01.@3.@pl) \n{/unl}  \n \n \n \n       \n        \n \n \n \n \n   …(5) \nEquivalent Punjabi sentence is:  \nਉਹ ਇਕ ਦੂਜੇ ਨੂੁੰ ਪਪਆਰ ਕਰਦੇ ਹਨ \n \n   \n       \n \n \n \n   …(6) \nTransliterated Punjabi sentence is: uh ik duje nun pyar karde han. \nUNL expression in this example contains two root words, first is a verb, i.e., ‘arrive’ and second \nis pronoun, i.e., ‘00:01.@3’ / third person pronoun.The NLization process UNL sentence  is \ndescribed in Table 3. \n5.2. NLization of Determiners  \nThe process of NLization of input UNL sentence containing determiners to natural language \nsentence is illustrated with an example sentence given in (7). \nExample English sentence is: A lot of their books            \n \n \n \n    …(7) \nUNL expression for this example sentence is given in (8). \n{unl} \npos(book:05.@multal, 00:03.@3.@pl) \n{/unl}  \n \n \n \n     \n        \n \n \n \n \n   …(8) \nEquivalent Punjabi sentence is:  ਉਹਨਾਂ ਦੀਆਂ ਬਹ ਤ ਪਕਤਾਬਾਂ   \n            \n \n   …(9) \nTransliterated Punjabi sentence is uhna dian bhot kitaban          \nUNL expression in this example contains two root words, first is a noun, i.e., ‘book’ and second \nis pronoun, i.e., ‘00:01.@3’ or third person pronoun.The NLization process of example (10) \nUNL sentence is described in Table 4. \nTable 2.  NLization process of example (2) UNL sentence \nRule Fired \nDescription \nAction Taken \n(%x,M7):=(%x,-M7,+FLX( \nPST&SNG&MCL&^PGS&^ANT:=\n0>\" ਗਿਆ ਸੀ\"; \nPST&SNG&FEM&^PGS&^ANT:=\n0>\" ਿਈ ਸੀ\"; \nPST&PLR&FEM&^ANT:=0>\" \nਿਈਆਂ ਸਨ\"; \nThis paradigm M7 has \nbeen defined to attach \ncorresponding postfix to \nverbs in Punjabi. Here \nattribute ‘FLX’ indicate \nthat \nword \nhas \nbeen \nprocessed for inflection. \nTo: \n[arrive:07.@not.@present.@ \nperfect] \nResult: \n[\"ਪਹ ੰਚ\":07.@not.@present.@\nperfect] \nNothing is appended to UW \nPST&PLR&MCL:=0>\" ਿਏ ਸਨ\"; \nPRS&SNG&MCL&^PGS&^PER:=\n0>\"ਦਾ ਹੈ\"; \nPRS&SNG&FEM&^PGS&^PER:=\n0>\"ਦੀ ਹੈ\"; \nPRS&PLR&FEM:=0>\" ਗਦਆ \nਹਨ\"; PRS&PLR&MCL:=0>\" ਦੇ \nਹਨ\"; \nPRS&SNG&FEM&^PGS&^PER:=\n0>\"ਦੀ ਹੈ\"; \nPRS&PLR&FEM:=0>\" ਗਦਆ ਹਨ\"; \nPRS&PLR&MCL:=0>\" ਦੇ ਹਨ\"; \nPRS&SNG&MCL&PGS:=0>\" ਗਰਹਾ \nਹੈ\"; \nPRS&SNG&FEM&PGS:=0>\" ਰਹੀ \nਹੈ\"; \nPRS&PLR&FEM&PGS:=0>\" \nਰਹੀਆਂ ਹਨ\"; \nPRS&PLR&MCL&PGS:=0>\" ਰਹੇ \nਹਨ\"; \nPST&SNG&MCL&PGS:=0>\" ਗਰਹਾ \nਸੀ\"; \nPST&SNG&FEM&PGS:=0>\" ਰਹੀ \nਸੀ\"; \nPST&PLR&FEM&PGS:=0>\" \nਰਹੀਆਂ ਸਨ\"; \nPST&PLR&MCL&PGS:=0>\" ਰਹੇ \nਸਨ\"; \n{PST&MCL&SNG&ANT}:=0>\" \nਚ ੁੱਕਾ ਸੀ\"; \n{PST&FEM&SNG&ANT}:=0> \n\"ਚ ੁੱਕੀ ਸੀ\"; \n{PST&MCL&PLR&ANT}:=0>\" \nਚ ੁੱਕੇ ਸਨ\"; \n{PST&FEM&PLR&ANT}:=0>\" \nਚ ੁੱਕੀਆਂ ਸਨ\"; \n{PER&PRS&MCL&SNG}:=0> \" \n \n‘ਪਹ ੰਚ’ phunch, because this \nroot word does not have any \ncombination of attributes as \nare involved in this rule.   \nਚ ੁੱਕਾ ਹੈ\"; \n{PER&PRS&FEM&SNG}:=0>\" \nਚ ੁੱਕੀ ਹੈ\"; \n{PER&FUT&MCL&SNG}:=0>\" \nਚ ੁੱਕਾ  ਹੋਵੇਿਾ\"; \n{PER&FUT&FEM&SNG}:=0>\" \nਚ ੁੱਕੀ ਹੋਵੇਿੀ\";  \n{FUT&MCL&PGS&SNG}:=0>\" \nਗਰਹਾ ਹੋਵੇਿਾ\"; \n{FUT&FEM&PGS&SNG}:=0>\" \nਗਰਹਾ ਹੋਵੇਿੀ\";{FUT&MCL&SNG} \n:=0>\"ੇੇਿਾ\"; \nFUT&FEM&SNG&^PGS&^PER&\n^RES:=0>\"ੇੇਿੀ\";) \n); \n(%x,M2):=(%x,- \nM2,+FLX(AGT:=0>\"ਨ ੰ\")); \nThis paradigm M2 has \nbeen defined to attach \nword \"ਨ ੰ\" nun for UNL \nrelation \n‘AGT’. \nHere \nattribute \n‘FLX’ \nis \nindicate that word has \nbeen \nprocessed \nfor \ninflections. \n \nTo: [00:01.@3.@male] \nResult:[\"ਉਹ\":01.@3.@male] \nNothing is appended to UW \n‘ਉਹ’ uh because this root \nword does not have ‘AGT’ \nattribute with it.  \nagt(%a,V,@present,@perfect, \n^PRS;%b,R):= \nagt(%a ,+PER,+PRS,-@present;%b) \n; \nIt adds ‘PER’ and ‘PRS’ \nattributes to the verb \ndepending \nupon \nattributes associated with \nthe \nnode, \nbecause \n‘PRS&PER’ \ncombination is necessary \nfor \nappending \nappropriate postfix to \nPunjabi root word verb.  \nTo:agt(arrive:07.@not.@ \npresent.@perfect, \n00:01.@3.@male) \nResult:  \nagt(arrive:07.@not.@perfect, \n00:01.@3) \nNothing is appended to any \nPunjabi root word as postfix, \n‘@present’ \nattribute \nis \nremoved from second node \n‘%b’ and ‘PRS’ and ‘PES’ \nare added to first node ‘%a’.   \nagt(%a,^MCL;%b,R,@male):= \nagt(%a ,+MCL,-\nNUM,+NUM=SNG; %b,-@male); \nIt \nadds \n‘MCL’ \nand \n‘SNG’ attributes to the \nverb because of ‘@male’ \nattribute associated with \nthe second node ‘%b’, as \n‘PRS&PER&MCL&SN\nG’ \ncombination \nis \nnecessary for appending \nappropriate postfix to  \nPunjabi root word. \nTo:agt(arrive:07.@not.@ \npresent.@perfect, \n00:01.@3.@male) \nResult:  \nagt(arrive:07.@not.@perfect, \n00:01.@3) \nNothing is appended to any \nPunjabi root word as postfix, \njust \n‘@male’ \nattribute \nis \nremoved from second node \n‘%b’ and ‘MCL’ and ‘SNG’ \nare added to first node ‘%a’. \nagt(%a,V;%b,R):=(%b)(\" \")(%a); \n \nIt resolves the ‘agt’ \nrelation, places pronoun \nbefore \nverb \nand \nintroduces new node of \nsingle \nspace \n(“ \n”) \nbetween two nodes. \nTo:  \nagt(arrive:07.@not.@perfect, \n00:01.@3.@male) \nResult: \n#L(00:01.@3, -:02); #L(-:02, \narrive:07.@not.@perfect) \nIntermediate Output: \nਉਹ ਪਹ ੰਚ   \nuh phunch \n \n({N|V|D|J|R},FLX,^inflected,%x):=\n(!FLX,-FLX,+inflected,%x); \nIt fires the corresponding \nparadigm rule to inflect \nthe root word “ਉਹ” uh. \nTo:[00:01.@3] \nResult:[\"ਉਹ\":01.@3] \nNothing is appended to root \nword ‘ਉਹ’ uh because ‘AGT’ \nwas not associated with it.  \n{N|V|D|J|R},FLX,^inflected,%x):=(\n!FLX,-FLX,+inflected,%x); \n  \nIt fires the corresponding \nparadigm rule to inflect \nthe root word “ਪਹ ੰਚ” \nphunch to make it “ਪਹ ੰਚ \nਚ ੁੱਕਾ ਹੈ\" phunch chukka \nhai \nTo:[arrive:07.@perfect] \nResult:[\"ਪਹ ੰਚ ਚ ੁੱਕਾ ਹੈ\" \n:07.@perfect] \nFinal Output: \nਉਹ ਪਹ ੰਚ ਚ ੁੱਕਾ ਹੈ  \nuh phunch chukka hai \n \nTable 3. NLization process of example (5) UNL sentence \nRule Fired \nDescription \nAction Taken \n(%x,M2):=(%x,- \nM2,+FLX(AGT:=0>\"ਨ ੰ\")); \nThis paradigm M2 has \nbeen defined to attach \nword \"ਨ ੰ\" nun for UNL \nrelation \n‘AGT’. \nHere \nattribute ‘FLX’ is indicate \nthat \nword \nhas \nbeen \nprocessed for inflections. \nTo: [00:01.@3.@pl] \nResult:[\"ਉਹ\":01.@3.@pl] \nNothing is appended to root \nword ‘ਉਹ’ uh, because this \nroot word does not have \n‘AGT’ attribute with it. \nagt(%a,V,@reciprocal;%b,@3,@\npl):=(%b) \n(\" \")(%a,PER=3PS,+PLR); \n   \nIt \nresolves \n‘agt’ \nrelationship, \nplaces \npronoun before verb and \nintroduces new node of \nsingle space (“ ”) between \ntwo nodes. It also adds \n‘3PS’ \nand \n‘PLR’ \nas \nattributes of verb, when \nattribute \n‘@reciprocal’ \nwas with first and ‘@3’, \n‘@pl’ \nwere associated \nwith second node ‘%b’ in \nUNL sentence. \nTo:  \nagt(love:03.@present. \n@reciprocal, 00:01.@3.@pl) \nResult:  \n#L(00:01.@3.@pl, -:02); \n #L(-:02, \nlove:03.@present.@reciprocal\n) \nIntermediate Output: \nਉਹ ਗਪਆਰ  \nuh piyar \n(V,@reciprocal,%x):= \n(\"ਇਕ ਦ ਜੇ ਨ ੰ \")(%x,-@reciprocal); \n   \nIt \nresolves \nattribute \n‘@reciprocal’ associated \nwith verb and removes it \nfrom \nthe \nverb \nafter \nresolution. It adds “ਇਕ \nਦ ਜੇ ਨ ੰ ” ik duje nun before \nverb.  \nTo:  \n[love:03.@present.@reciproc\nal] \nResult:  \n#L(ਇਕ ਦ ਜੇ ਨ ੰ:04, -:05);  \n#L(-:05, love:03.@present) \nIntermediate Output: \nਉਹ ਇਕ ਦ ਜੇ ਨ ੰ ਗਪਆਰ  \nuh ik duje nu piyar \n \n(V,@present,ATE=INF,PER=3P\nS,NUM =PLR,%x):=(%x,-\n@present)(\" ਕਰਦੇ ਹਨ\");  \nIt appends “ ਕਰਦੇ ਹਨ” \nkarde han on right of verb \nby \nresolving \nits \n‘@present’ \nattribute \n, \nonly if ‘INF’ (indefinite \ntense) and 3PS, PLR \n(added \nmanually \nby  \nsecond fired rule) are \nassociated with the verb.  \nTo: [love:03.@present] \nResult:  \n#L(love:03, -:06); \n#L(-:06, ਕਰਦੇ ਹਨ:07) \nIntermediate Output: \nਉਹ ਇਕ ਦ ਜੇ ਨ ੰ ਗਪਆਰ ਕਰਦੇ ਹਨ  \n uh ik duje nu piyar \n({N|V|D|J|R},FLX,^inflected,%x\n):=(!FLX,-FLX,+inflected,%x); \n \nIt fires the corresponding \nparadigm rule to inflect \nthe root word “ਉਹ” uh. \nTo:[00:01.@3] \nResult:[\"ਉਹ\":01.@3] \nFinal Output: \nਉਹ ਇਕ ਦ ਜੇ ਨ ੰ ਗਪਆਰ ਕਰਦੇ ਹਨ  \n uh ik duje nu piyar \nNothing is appended to root \nword ‘ਉਹ’ uh because ‘AGT’ \nwas not associated with it. \n \nTable 4.  NLization process of example (8) UNL sentence \nRule Fired \nDescription \nAction Taken \n(%x,M2):=(%x,-M2,+FLX( \nSNG:=0>\"\"; PLR:=0>\"ਨਾਂ\")); \nThis paradigm M2 has \nbeen defined to attach \nword \"ਨਾਂ\" nan when \nattribute \n‘PLR’ \nis \nassociated with root word. \nHere attribute ‘FLX’ is \nindicate that word has \nbeen \nprocessed \nfor \ninflections.  \nTo: [00:01.@3.@pl] \nResult:[\"ਉਹ\":01.@3.@pl] \nNothing is appended to root \nword ‘ਉਹ’ uh because this \nroot word does not have ‘PLR’ \nattribute   with it.   \n(%x,M3):=(%x,M3,+FLX( \nSNG:=0>\"\"; PLR:=0>\"ੇਾੇਂ\";)); \n   \nThis paradigm M2 has \nbeen defined to attach \nword “ੇਾੇਂ” (to the right, \nfor \ndenoting \nmultiple \nbooks in Punjabi) to the \nroot word in Punjabi only \nTo: [book:05] \nResult: [\"ਗਕਤਾਬ\":05] \nNothing is added because \nnumber information of the root \nword is ‘SNG’ initially.  \nwhen root word has ‘PLR’ \nattribute associated with \nit. \npos(%a,FEM,N,@multal;%b,@3\n,@pl,POD):= \n(%b,+PLR)(\" ਦੀਆਂ \") (%a); \nIt \nresolves \nthe \n‘pos’ \nrelationship, \nplaces \npronoun before object, \nalso introduces “ ਦੀਆਂ ”  \nin b/w them because first \nnode ‘%a’ has attributes \n‘@multal’ (multiple) and \n‘FEM’ (female).  \nTo: pos(book:05.@multal, \n00:03.@3.@pl) \nResult:  \n#L(00:03.@3.@pl, ਦੀਆਂ :01); \n#L( ਦੀਆਂ :01, \nbook:05.@multal) \nIntermediate Output: \nਉਹ ਦੀਆਂ ਗਕਤਾਬ \nuh dian kitab \n(N,@multal,%a):= \n(\"ਬਹ ਤ \") \n(%a,-@multal,-NUM, +NUM= \nPLR); \n \nIt \nresolves \n‘@multal’ \n(multiple) \nattribute \nby \nadding \n\"ਬਹ ਤ \n\" \nboht \nbefore \nthe \nnoun \nand \nupdates \nits \nnumber \ninformation to ‘PLR’ , \ni.e., plural.    \nTo: [book:05.@multal] \nResult:  \n#L(ਬਹ ਤ:02, -:04); #L(-:04, \nbook:05) \nIntermediate Output: \nਉਹ ਦੀਆਂ ਬਹ ਤ ਗਕਤਾਬ \nuh dian boht kitab \n({N|V|D},FLX,^inflected,%x):=(\n!FLX,-FLX,+inflected,%x); \n   \nIt fires the corresponding \nparadigm rule to inflect \nthe root word “ਗਕਤਾਬ” \nkitab, it \nattaches word “ੇਾੇਂ” (to \nthe right, for denoting \nmultiple \nbooks \nin \nPunjabi). \nTo: [book:05] \nResult: [\"ਗਕਤਾਬਾਂ\":05] \nIntermediate Output: \nਉਹ ਦੀਆਂ ਬਹ ਤ ਗਕਤਾਬਾਂ \nuh dian boht kitaban \n({N|V|D},FLX,^inflected,%x):=(\n!FLX,-FLX,+inflected,%x); \n   \nIt fires the corresponding \nparadigm rule to inflect \nthe root word “ਉਹ” uh. It \nattaches word “ਨਾਂ” nan to \nthe right, in Punjabi. \nTo: :[\"ਉਹ\":01.@3.@pl] \nResult: [\"ਉਹਨਾਂ \":05] \nFinal Output: \nਉਹਨਾਂ ਦੀਆਂ ਬਹ ਤ ਗਕਤਾਬਾਂ \nuhna dian boht kitaban \n6. RESULT AND DISCUSSION  \nIn this paper, it is described in detail that, how UNL input sentence can be converted into \nPunjabi natural language, for Determiners, Verbs and Pronouns phrases using dictionary words \nand T-rules in the EUGENE console [5]. As a whole near about 140 sentences are processed \nsuccessfully with exact desired output. All other sentences which fall in these three categories \ncan also be processed easily by same set of written rules and by appending new dictionary words \nto the respective dictionaries.  \nThere is a feature available on the UNDL foundation’s website, which is F-measure [6], which \nrates the output of NLization (output generated using EUGENE tool) with the actual expected \nPunjabi natural langauge sentences on the scale of (0-1). We can upload both the files saved in \nUTF-8 .txt format and this gives us F-measure for it. F-measure for all the processed sentences is \ncome out to be more than 90% as depicted in Figure 3.  \n \nFigure 3.  Combined F-measure for determiners, pronouns and verbs [7] \n7. CONCLUSIONS \nMany issues come while processing these UNL sentences, some changes made in the rules for \nthe later sentences may cause the earlier sentences to get effected. Every time care should be \ntaken while making changes to the rules for creating generalized rule sets. So writing the rules \nand editing them according to the grammar and sentence structure in Punjabi natural language is \nbit tedious task, but once the rules and dictionary gets written, we can process all other sentences \nwhich fall in these categories. EUGENE tool is very effective tool for accomplishing this task. It \nhas very high quality because of its quality features like high availability, usability, high \nperformance, due to these features, changes and crosschecking of sentences can be made readily. \nACKNOWLEDGEMENTS \nWe would like to thank our colleague research scholars    for their comments and suggestions for \nthe paper. We would also like to thank our head of department Dr. Maninder Singh for \nmotivating and for being ideal for us. \nREFERENCES \n[1] \nR. \nMartins \n‘Universal \nNetworking \nLanguage \n(UNL): \nTools’ \n[online] \nhttp://www.unlweb.net/wiki/Tools. (Accessed 27 October 2012). \n[2] \nKumar P, Sharma R K (2012) UNL Based Machine Translation System for Punjabi Language \nPhD Dissertation, Thapar University, Patiala, India.  \n[3] \nR. Martins ‘Universal Networking Language (UNL): EUGENE Specifications’ [online] \nhttp://www.unlweb.net/wiki/EUGENE. (Accessed 24 November 2012).  \n[4] \nLewis, Paul M (Eds.) (2009) Ethnologue: Languages of the World. 6th edn. SIL International, \nDallas. \n[5] \n‘Universal \nNetworking \nLanguage \n(UNL): \nEUGENE \nTool \nversion \n1.0.1’ \n[Online] \nhttp://dev.undlfoundation.org/generation/index.jsp.  (Accessed 24 November 2012).  \n[6] \nR. \nMartins \n‘Universal \nNetworking \nLanguage \n(UNL): \nF-measure’ \n[Online]: \nhttp://www.unlweb.net/wiki/F-measure. (Accessed 30 November 2012).  \n[7] \n‘F-meaure \nfor \nPunjabi \nGrammar \nby \nUNDL \nfoundation’ \n[Online] \nhttp://www.unlweb.net/unlarium/index.php?grammar=fmeasure. (Accessed 30 November 2012).  \n[8] \nR. \nMartins \n‘Universal \nNetworking \nLanguage \n(UNL): \nX-bar \nTheory’ \n[Online] \nhttp://www.unlweb.net/wiki/X-bar_theory. (Accessed 30 October 2012).  \n[9] \nR. Martins ‘Universal Networking Language (UNL): \nSyntactic structure’ [Online] \nhttp://www.unlweb.net/wiki/Syntactic_structures, (Accessed 30 October 2012).  \n[10] \n‘Corpus UC-A1’ [Online] http://www.unlweb.net/wiki/UC-A1, (Accessed 29 December 2013). \n[11] \n‘Corpus UC-A2’ [Online] http://www.unlweb.net/wiki/UC-A2, (Accessed 10 February 2003). \n[12] \n‘Corpus UC-B1’ [Online] http://www.unlweb.net/wiki/UC-B1, (Accessed 10 February 2013). \nAuthors \nHarinder Singh is pursuing his Master of Engineering in Software Engineering \nfrom Thapar University, Patiala. He is undergoing the thesis of his M.E. \nentitled \"Implementation of NLization Framework for Punjabi Language with \nEUGENE\" in the supervision of Parteek Kumar. His current research interest \nincludes UNL Based DeConversion, UNL Dictionary Specs and UNL \nGrammar Specs. \n \n \n \n \nParteek Kumar is Assistant Professor in the Department of Computer Science \nand Engineering at Thapar University, Patiala. He has more than fifteen years \nof academic experience. He has earned his B.Tech from SLIET and MS from \nBITS Pilani. He has completed his Ph.D on \"UNL Based Machine Translation \nSystem for Punjabi Language\" from Thapar University. He has published more \nthan 50 research papers and articles in Journals, Conferences and Magazines of \nrepute. His research work with UNDL foundation, Geneva, Switzerland \nprovides international exposure to him and he was a member for Advanced \nUNL School at Alexandria, EGYPT in 2012. He has also undergone various \nfaculty development programme from industries like Sun Microsystems, TCS \nand Infosys. He has authored six books including Simplified Approach to \nDBMS. He is acting as Co-PI for the research Project on Development of \nPunjabi WordNet sponsored By Department of Information Technology, \nMinistry of Communication and Information Technology, Govt. of India. \n",
  "categories": [
    "cs.CL"
  ],
  "published": "2013-09-10",
  "updated": "2013-09-10"
}