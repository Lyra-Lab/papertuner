{
  "id": "http://arxiv.org/abs/1310.0581v1",
  "title": "Rule Based Stemmer in Urdu",
  "authors": [
    "Vaishali Gupta",
    "Nisheeth Joshi",
    "Iti Mathur"
  ],
  "abstract": "Urdu is a combination of several languages like Arabic, Hindi, English,\nTurkish, Sanskrit etc. It has a complex and rich morphology. This is the reason\nwhy not much work has been done in Urdu language processing. Stemming is used\nto convert a word into its respective root form. In stemming, we separate the\nsuffix and prefix from the word. It is useful in search engines, natural\nlanguage processing and word processing, spell checkers, word parsing, word\nfrequency and count studies. This paper presents a rule based stemmer for Urdu.\nThe stemmer that we have discussed here is used in information retrieval. We\nhave also evaluated our results by verifying it with a human expert.",
  "text": "Rule Based Stemmer in Urdu \nVaishali Gupta#1, Nisheeth Joshi#2, Iti Mathur#3 \n#Apaji Institute, Banasthali University, Rajasthan, India \n1vaishali.gupta77@gmail.com \n2nisheeth.joshi@rediffmail.com \n3mathur_iti@rediffmail.com \n \n \nAbstract— Urdu is a combination of several languages like \nArabic, Hindi, English, Turkish, Sanskrit etc. It has a \ncomplex and rich morphology. This is the reason why not \nmuch work has been done in Urdu language processing. \nStemming is used to convert a word into its respective root \nform. In stemming, we separate the suffix and prefix from \nthe word. It is useful in search engines, natural language \nprocessing and word processing, spell checkers, word \nparsing, word frequency and count studies. This paper \npresents a rule based stemmer for Urdu. The stemmer that \nwe have discussed here is used in information retrieval. \nWe have also evaluated our results by verifying it with a \nhuman expert.  \n \nKeywords— Stemming, Rule Based Stemmer, Urdu, Complex \nand Rich morphology. \nI. INTRODUCTION \nStemming is a process in which affixes are separated from \nits root word. To understand this phenomenon, let us consider \na few words: Healthy, Healthier and unhealthy, it contains \nsome affixes like ‘un’, ‘y’ and ‘ier’. The common root or stem \nword is ‘Health’. This common root is morphologically \nrelated to various variant words. Similarly in Urdu, we have \n ﺑﮯﯾﻤﺎن (bey-imaan), اﯾﻤﺎﻧﺪار(imaan-daar), اﯾﻤﺎﻧﺪاری(imaan-\ndaari).  Here affixes are  ﺑﮯ (be), دار (daar) and داری (daari) \nand its common root word is \n اﯾﻤﺎن (imaan).  \nStemmer is an algorithm through which we can reduce a \nword to its stem. It is an important phenomenon for \ndevelopment of natural language processing applications. It \ncan be used in spell checking, machine translation and \ninformation retrieval systems. In this paper, we present a Rule \nBased Stemmer for Urdu. There are many challenges in Urdu \nlanguage to deal with. One of the foremost reason is that Urdu \nis a weakly inflectional language and due to its complex and \nrich morphology and its diverse nature, stemming in Urdu is \nquite challenging. For Example, a word  ﻣﺸﮩﻮر(mashhoor) \n(Singular) and ﻣﺸﺎﮨﯿﺮ (mashaheer)(Plural). These words don’t \npresent any inflection due to its complex morphology. Here \nroot word cannot be separated from the word. These type of \nwords are considered as exceptions and are termed as part of \nirregular morphology. Examples of regular morphology are  \nﺑﺪﻣﺰاج (bad-mizaj), ﺑﺪﻣﺰاﺟﯽ (bad-mizaj-i) and ﻣﺰاج آﺷﻨﺎ(mizaj -\naashna). Here we can extract the common root ‘ﻣﺰاج’ (mizaj) \nfrom these words. \nStemming process has some errors associated with it. These \nerrors are Under Stemming and Over Stemming errors. In \nUnder Stemming, a word is misinterpreted and its affixes are \nnot removed. For example, from word ﭘﯿﺸﮕﯽ  (peshgi) suffix \nextracted ی (i) and root word is (peshag). Here  ﭘﯿﺸﮓ (peshag) \nis not a valid stem or root word. In place of ﭘﯿﺸﮓ (peshag), \nroot word should be given as \n ﭘﯿﺶ(pesh) and suffix ﮔﯽ (gi) is \nextracted from word. In Over Stemming, affixes which were \nnot supposed to be removed  are removed. For example, from \nword ﺑﺪﻣﻌﺎش (badmaash) prefix extracted ﺑﻌﺪ (bad) and root \nword is ﻣﺎش (maash). Here, ﻣﺎش (maash) is not a valid root \nword. For this word we do not need to extract prefix and can \ndisplay the word as it is ﺑﺪﻣﻌﺎش (badmaash). In case of over \nstemming, extra affixes are removed.  \nII. RELATED WORK \nIn the field of natural language processing, first stemmer \nwas developed by Lovins [1] in 1968. She proposed 260 rules \nfor stemimng out words of English language. Porter [2] \ndeveloped a stemmer on the basis of separating affixes. This \nstemmer performed stemming process in five steps. In the first \nstep, inflectional suffixes were handled, through the next three \nsteps derivational suffixes were handled and in the last step \nrecoding was done.  \nKhoja and Garside [3] developed an Arabic Stemmer which \nthey called “superior root based stemmer”. This stemming \nalgorithm separated prefix, suffix and infixes and then \nmatched the word with the affixes and pulled out the word. \nThis algorithm faced several problems especially with nouns. \nAl-shammari and Lin [4] presented an Educated Text \nStemmer (ETS). It was a very simple, dictionary free and \nefficient Stemmer which decreased the stemming errors and \nrequired lesser storage and lesser processing time. Akram et al \n[5] proposed a Stemmer for Urdu language. Their work was \nrestricted to Urdu language which meant that root word was \nnot extracted from other languages like English, Persian and \nArabic. This stemmer separated the prefix and suffix from \nword. This system was unable to handle words having infixes. \nKhan et al [6] presented several challenges for developing a \nrule based Urdu Stemmer. They discussed some rule based \nstemming algorithms for English, Arabic, Persian and Urdu \nlanguage. By their proposed rule based stemming algorithm, \nthey separated suffixes and prefixes and even proposed some \npattern for handling them.  \nAmeta et al [7] proposed a Guajarati stemmer which was an \ninflectional stemmer which used 167 rules to stem out the \nwords. Through their experimwnts, they reported an accuracy \nof 91.7% and used this system in factored translation model \nfor Gujarati-Hindi MT System [8]. Pal et al [9] proposed a \nHindi Lemmatizer which used 112 rules to extract the root \nword from an inflected word. They reported an accuracy of \n91% for this system.  Mishra and Prakash [10] proposed an \neffective stemmer for Hindi language. This Stemmer resolved \nthe problem of over stemming and under stemming. This \nproposed stemmer was totally based on Devnagri script and it \ngave the accuracy of 91.59%. Husain [11] proposed an \nunsupervised approach to develop a stemmer for Urdu and \nMarathi language. In this approach, he proposed two ways for \nsuffix generation: frequency based suffix stripping algorithm \nand length based suffix stripping algorithm. Pal et al [12] \nproposed a rules based lemmatizer which has 124 rules for \ngeneration of root word. This system could handle both \nsuffixes as well as prefixes and showed an accuracy of 89%.  \nIII. MORPHOLOGY OF URDU \nUrdu is quite similar to other Indo-Aryan languages. It has \na strong Perso Arabic script, which is written from right to left. \nUrdu is a free word order and weakly inflectional language. It \nhas a complex and rich morphology. In Morphology, words \ncan be divided into lexical categories with the help of \ninflection. Nouns, verbs, adjectives and adverbs are example \nof some common lexical categories. In Urdu morphology \nnouns, verbs, adjectives and adverbs can also have multiple \ninflectional forms. It also has a gender, number, person, tense \netc based infected forms. As like Hindi, Urdu can have \nmultiple postpositions added with noun or verb or adjective. \nFor Example: ﺧﻮﺷﯽ(khushi), ﺧﻮﺷﺤﺎﻟﯽ(khushhaali), ﺧﺸﻤﺰاج \n(khushmizaj),ﺧﻮﺷﻨﻤﺎ  (khushnuma), ﻧﺎﺧﻮش (nakhush) can be \nadded with ﺧﻮش (khush) creating different variant forms of the \nword. In the following subsection, a brief explanation is \nprovided on the usage of noun, verb, adjective, adverbs in \nUrdu language. \nA. Noun \n    In Urdu, nouns are inflected in number and case and have \nan inherent gender. There are some types defined for case, \nnumber and gender. \n Case:  Nominative/Oblique/Vocative. \n Number:  Singular/Plural. \n Gender:  Masculine/Feminine.  \nNouns can be divided into 15 groups on the basis of \ninflection. From those 15 groups, 1 group is based on the \nMasculine and other are based on the Feminine.  \n \nFor Example: \n    Singular masculine nouns ending with (ا {alif}, a), (ه {he}, \nh) and (ع {ain}, e): \nThis group also includes the Arabic loan nouns ending with (ه \n{he}, h). According to this rule, first, if a word ends with \nletter (ا {alif}, a) or (ه {he}, h) then: \n To make plural nominative and singular oblique, the last \nletter is replaced by letter (ے {ye}, E). \n To make plural oblique, the last letter is replaced by string ( \nوں {on}, wN). \n To make plural vocative, the last letter is replaced by letter \n(و (wow), w). \nSecond, if a word ends with (ع {ain}, e) then the rules will \nremain same as above except that the above mentioned letters \nwill be added at the end of words without replacing any \nexisting letter. Table 1 displays examples from this group.  \n \nTABLE I \nAN EXAMPLE OF NOUN GROUP \n \nNominative \nOblique\nVocative\nSingularﮨﺘﮭﻮڑا\n(hathoda) \nﮨﺘﮭﻮڑے\n(hathode) \nﮨﺘﮭﻮڑے\n(hathode) \nPluralﮨﺘﮭﻮڑے\n(hathode) \nﮨﺘﮭﻮڑوں\n(hathodon) \nﮨﺘﮭﻮڑو\n(hathodo) \n \nThere are some more inflections present with masculine \nand feminine cases: \n Singular masculine nouns ending with (ں ا {aan}, an). E.g. \nدھﻮاں (dhuan). \n Singular feminine nouns ending with (ى {i}, y). E.g. ﻟﮍﮐﯽ \n(ladki). \n Singular feminine nouns ending with ( ا {alif}, a), ( ں ا \n{aan}, an), (ں و {on}, on).  E.g. ﮐﺮﺳﯿﺎں (kursiyan). \nB. Verb \n     The Urdu verb are very much complex as compared to \nother word classes. In terms of Morphology, Urdu verb \ninflects in different form: \n Gender: Masculine, Feminine. \n Number: Singular, Plural. \n Person: First, Second (casual, familiar, respectful), Third. \n Mood & Tense: Subjunctive, Perfective, Imperfective. \n      Urdu verb presents direct and indirect causative behavior. \nGenerally, for every verb, one stem or root word is formed. It \ncould be Intransitive, transitive etc. when this basic stem \nforms then two other forms (direct & indirect causatives) \nmakes for that verb. These three forms are actually regular \nverbs. For example, consider a verb: ﮐﺮ  (kar-To Do) \n Infinitive form:   ﮐﺮﻧﺎ (karna) \n Direct causative infinitive form: ﮐﺮاﻧﺎ (karana) \n Indirect causative infinitive form: ﮐﺮواﻧﺎ (karvana) \nﮐﺮﻧﺎ (karna), ﮐﺮاﻧﺎ (karana) and ﮐ\nﺮواﻧﺎ (karvana) are three \nregular verbs and inflect in tense, mood, aspect, gender and \nnumber. \nC. Adjective \n     Urdu adjectives are also inflected on the basis Gender, \nnumber and case marking. E.g. the singular direct ‘ﻓﺮﺗﯿﻼ’ \n(furteela-Active) becomes ‘ﻓﺮﺗﯿ\nﻠﮯ’ (furteele) in all other \nmasculine cases and ‘ﻓﺮﺗﯿﻠﯽ’ (furteeli) in all feminine case. \nTherefore no need to add new affixes for adjectives. \n \nD. Adverb \n     Adverbs may be in variable forms or invariable forms like \nan adjectives. It depends upon whether they change the form \nwith the noun or with the verb. We can divide them into \nfollowing categories as mentioned below: \n Adverbs of Time: روﺟﺎﻧہ (rojanah-Daily), اﮐﺜﺮ (aksar-\nUsually) \n Adverbs of Place: ﯾﮩﺎں (yaha-Here), وﮨﺎں (vaha-There) \n Adverbs of Manner: ﯾﮑﺎﯾﮏ (yakayak-Suddenly)  \n Adverbs of Degree: ﭼﮭﻮﭨﺎ (chhota-Small), ﻟﻤﺒﺎ \n(lamba-\nLong). \nIV. PROPOSED SYSTEM \n      In our proposed system, we have created a Rule Based \nStemmer for Urdu. Here we have created an affix list of 119 \nrules. It contains 107 postfix or suffix and 12 prefix. These \naffixes are used for extracting the root word or stem. \n     The below list does not contain the complete affix list. \nSome more affixes can also be added, but if we are adding \nsome more affixes then we might face the problem of Over \nStemming, for this reason we have not add any other affix. In \nthis rule based approach, we have ordered the affix list in \ndescending order in respect to length. This system is based on \nStripping Method where the affixes are just removed. The \naffixes with long length are removed first and further if \nrequired then the affix with shorter length is removed. In some \nof the cases we don’t find the correct stem. For Example word \n ﺣﯿﺎت (hayaat) should not have been reduced but it reduces in \nﮨﮯ (hay) root form and also separates the suffix ات (aat). This \nroot ﮨﮯ (hay) does not have a meaning. Table 2 shows some \nof the resultant stem or root word generated from our \nproposed Stemming algorithm.  \n \nے                 و                  ی                    ﯾﮟ                اﺋﯿﮟ \nا                 \n ات                ﯾﻦ                   ﻧﮯ                ﺗﮯ \nﯾﻮں              ﺗﺎ                  \n  ﯾﺎں                وں                 اﺋﯽ \n           ں                  ﺑﺪ  \n       ﻧﻮ                 ﻧﺎک              ﮔﮯ \nFig. 1 Suggestive Affix List \n \n \nTABLE II \nRESULT OF THE STEMMING ALGORITHM \nWord\nPrefix\nStem\nSuffix\nﻋﻼﻗﻮں\n (ilaaq-aun) \nﻋﻼﻗہ \n(ilaaqah) \nوں \n(aun) \nﻓﺎﺻﻠﮯ  \n(faasl-ee) \nﻓﺎﺻﻠہ \n(faasalah) \nے \n(ae) \nﺳﻮاﻻت   \n(saval-aat) \nﺳﻮال \n (savaal) \nات  \n(aat) \nﻟﮍﮐﯿﺎں   \n (ladki-yaan) \nﻟﮍﮐﯽ    \n(ladki)  \nﯾﺎں \n(yaan) \nراﺟﻮﯾﺮ  \n (raaj-veer) \nراج\n(raaj) \nوﯾﺮ     \n(veer) \nﻧﻮﺟﻮان   \n(nau-javaan) \nﻧﻮ   \n(nau) \nﺟﻮان   \n(javaan) \nﻻﺟﻮاب    \n(laa-javaab) \nﻻ    \n(la)    \nﺟﻮاب   \n(javaab) \nﺑﺪﻧﺼﯿﺐ   \n(bad-naseeb)  \nﺑﺪ    \n(bad) \nﻧﺼﯿﺐ   \n(naseeb) \n \n \nFig. 2 Rule Based Stemmer for Urdu \nFigure 2 shows the working of our Stemming algorithm. In \nthis algorithm, we collected the affixes and found the correct \nmatching of affixes with their corresponding word. If we get a \nmatch then the respective affix is detached from the respective \nword. If the match is not found then the same word is \ndisplayed as it is. \nOur approach provides us correct output, so we can say \nthat our system can show results which higher accuracy. The \nResults and Evaluation of our System is presented in next \nSection. \nV. EVALUATION \nWith this system we wanted to know that how much \naccurate output does it give us. It means that we were \nconcerned about the accuracy of our system. For calculating \nthe accuracy we have used the following formula: \n \n (1) \n \n    In this paper, we have tested the system by executing the \nproposed algorithm on the test data of 2000 words. Table 3 \nshows Summary for test data. \n \nTABLE III \nSUMMARY FOR TEST DATA \nTest Data Features\nTotal Count\nTotal Words \n2000\nCorrect stemmed output\n1730\nWrong output\n270\nUnique Words \n167\nMin Length \n4\nMax Length\n15\n \n       Here we have checked our system on the test data of 2000 \nwords. Among these 2000 words, 1730 gives correct stem and \n270 gives incorrect stem. From these 1730 words, 167 are \nunique words. This shows that words are not matched with the \naffix list and in return displays the same word. Due to the \nproblem of over stemming and under stemming, we received  \n270  wrong stems.  \nBy using accuracy formula (1) and on the basis of given test \ndata we achieved an accuracy of 86.5%. Figure 3 shows the \nresult of test data. \nVI. CONCLUSION \nIn \nthis paper, \nwe have \nshown \nthe design \nand \nimplementation of Rule Based Stemmer for Urdu. It is useful \nfor complex and morphologically variant words. This rule \nbased stemmer is capable of capturing the root word and \nseparates the affixes. We have evaluated our system and \nobtained 86.5% accuracy. \nFurther the work will be done to increase the accuracy of \nUrdu Stemmer, in which, the affix list will be improved. Later, \nwe will use ripple down approach to generate some rules for \nexceptional words which occur due to the problem of under \nstemming and over stemming. \n \n \nFig. 3  Result of Test Data \nREFERENCES \n[1] \nJ.B. Lovins, “Development of Stemming Algorithm”, Mechanical \nTransaltion and Computational Linguistics, Vol. 11(1), pp 22-31, 1968. \n[2] \nM.F. Porter, “An algorithm for suffix stripping”, Program, 14(3) pp. \n130-137. 1980. \n[3] \nS. Khoja and R. Garside, “Stemming Arabic Text”, Lancaster, UK, \nComputing Department,Lancaster University. 1999. \n[4] \nE.T. Al-Shammari, J. Lin, “Towards an Error-Free Arabic Stemming”, \nIn Proceedings of iNEWS’08, Napa Valley, California, USA. 2008. \n[5] \nQ. Akram, A. Naseer and S. Hussain, “Assas-Band, An Affix- \nException-List Based Urdu Stemmer”, In Proceedings of the 7th \nWorkshop on Asian Language Resources, pp. 40–47, Suntec, \nSingapore. 2009. \n[6] \nS.A. Khan, W. Anwar, U.I. Bajwa, “Challenges in Developing a Rule \nbased Urdu Stemmer”. In Proceedings of the 2nd Workshop on South \nand Southeast Asian Natural Language Processing (WSSANLP), \nIJCNLP 2011, pp 46–51, Chiang Mai, Thailand. 2011. \n[7] \nJ. Ameta, N. Joshi, I. Mathur, “A Lightweight Stemmer for Gujarati”, \nIn Proceedings of 46th Annual National Convention of Computer \nSociety of India. Ahmedabad, India, 2011. \n[8] \nJ. Ameta, N. Joshi, I. Mathur, “Improving the Quality of Gujarati-\nHindi Machine Translation Through Part-of-Speech Tagging and \nStemmer-Assisted Transliteration”. International Journal on Natural \nLanguage Computing, Vol 3(2), pp 49-54, 2013. \n[9] \nS. Paul, N. Joshi, I. Mahtur, “Development of a Hindi Lemmatizer”, \nInternational Journal of Computational Linguistics and Natural \nLanguage Processing, Vol 2(5), pp 380-384, 2013. \n[10] U. Mishra, C. Prakash, “MAULIK: An Effective Stemmer for Hindi \nLanguage”. \nInternational \nJournal \non \nComputer \nScience \nand \nEngineering, pp. 711-717. 2012. \n[11] M.S. Husain, “An Unsupervised Approach to Develop a Stemmer” \nInternational Journal on Natural Language Computing (IJNLC) Vol. \n1(2), pp 15-23, 2012.  \n[12] S. Paul, M. Tandon, N. Joshi, I. Mahtur, “Design of a Rule Based \nHindi Lemmatizer”. In Proceedings of Third International Workshop \non Artificial Intelligence, Soft Computing and Applications, Chennai, \nIndia, pp 67-74, 2013. \n",
  "categories": [
    "cs.CL"
  ],
  "published": "2013-10-02",
  "updated": "2013-10-02"
}