{
  "id": "http://arxiv.org/abs/1310.0754v1",
  "title": "Stemmers for Tamil Language: Performance Analysis",
  "authors": [
    "M. Thangarasu",
    "R. Manavalan"
  ],
  "abstract": "Stemming is the process of extracting root word from the given inflection\nword and also plays significant role in numerous application of Natural\nLanguage Processing (NLP). Tamil Language raises several challenges to NLP,\nsince it has rich morphological patterns than other languages. The rule based\napproach light-stemmer is proposed in this paper, to find stem word for given\ninflection Tamil word. The performance of proposed approach is compared to a\nrule based suffix removal stemmer based on correctly and incorrectly predicted.\nThe experimental result clearly show that the proposed approach light stemmer\nfor Tamil language perform better than suffix removal stemmer and also more\neffective in Information Retrieval System (IRS).",
  "text": "Stemmers for Tamil Language: \nPerformance Analysis \nM.Thangarasu \nM.Phil Scholar, Full Time, \nDepartment of Computer Science and Application \nK.S.Rangasamy College of Arts and Science \nTiruchengode, India \nE-mail:thangarasumathan@gmail.com \nDr.R.Manavalan \nDepartment of Computer Science and Application \nK.S.Rangasamy College of Arts and Science \nTiruchengode, India \nE-mail: manavalan_r@rediffmail.com \nAbstract— Stemming is the process of extracting root word from the given inflection word and also \nplays significant role in numerous application of Natural Language Processing (NLP). Tamil Language \nraises several challenges to NLP, since it has rich morphological patterns than other languages. The rule \nbased approach light-stemmer is proposed in this paper, to find stem word for given inflection Tamil \nword. The performance of proposed approach is compared to a rule based suffix removal stemmer \nbased on correctly and incorrectly predicted. The experimental result clearly show that the proposed \napproach light stemmer for Tamil language perform better than suffix removal stemmer and also more \neffective in Information Retrieval System (IRS). \nKeywords- Tamil morphology, Tamil stemmer, Light stemmer, Rule-based stemmer, NLP, Natural Language \nProcessing. \nI. \nINTRODUCTION \nTamil is a Dravidian language. It is the regional language of Tamil Nadu of India. It has number of \nmorphological variant for a word. For example ÀÊò¾¡ý (a male who has read), ÀÊì¸¢È¡ý(a male who is reading \nnow), ÀÊôÀ¡ý (a male who will read), ÀÊì¸Á¡ð¼¡ý(a male who will not read). This creates more complexity in \ninformation retrieval. Stemmer is especially used in Information Retrieval System (IRS) for improving their \nperformance at the mean time reduce the complexity, for example when a user enter query word search (§¾Î), \nuser most likely wants to retrieve documents containing the terms searching (§¾Îõ) and searched (§¾ÊÂ) etc. as \nwell. Thus using stemmer improves recall (i.e.) the number of documents retrieved in response to a query, since \nmany terms are mapped to one. The benefit of Stemmer is decreases the size of the index files in the IR system. \nConsequently many stemmers algorithm have been proposed and evaluated for various Indian languages such as \nHindi [1], Gujarati [2], and Punjabi [3] etc. An overview of the proposed model projected in Figure 1. \n \nFigure1. Overview of Proposed Model for Tamil Stemmer Algorithms \nThe proposed light stemmer algorithm compared with rule based suffix removal algorithm. This paper \norganized as follows: Section II describes the related work. Section III discusses about the Tamil language \nSection IV presents the proposed system light stemmer and also describes a rule based suffix removal stemmer. \nSection V and VI contains an experimental analysis and conclusion of the work respectively. \nII. \nRELATED WORK \nEarlier, Stemmer was primarily developed for English, but later due to the corpus growth of languages \nother than English, there was an increased demand from the research community to develop stemmers for other \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n902\nlanguages too. In case in Indian languages, the earliest work reported by Ramanathan and Rao [1] (2003) to \nperform longest match stripping for building a Hindi stemmer. Juhi Ameta et al. developed a light stemmer for \nGujarati language [2] in 2011 for removing inflectional and derivational endings in order to reduce word forms \nto common stem. Slowly investigation starts for other language such as Bengali [4], Urdu [5], Malayalam [6] \nand Punjabi [3] are also carried out. However, in this section express research experience in developing Tamil \nstemmers. \n  \nThe most common approaches used for developing stemmers are Brute force and Affix strip. Among \nall the existing approaches, this research tries to implement a light stemmer for Tamil for inherent to develop a \nstemmer algorithm in an easier and faster way. \nIII. \nTAMIL LANGUAGE \nTamil is a Dravidian language spoken predominantly by Tamil people of Indian subcontinent. Tamil \nwords typically have more morphological patterns than English words. Tamil word contains constituent parts: a \nstem, which can be thought of as responsible for the nuclear meaning of verb, attached to which may be zero or \nmore derivational prefix and zero or one suffix, which together to form a word. Tamil is a morphologically rich \nlanguage resulting in its relatively high inflectional forms. Normally most of the Tamil words have more than \none morphologically suffixes. The number of suffix is ranging from 3 to 13. The description with example \nnouns, compound nouns and verbs are given in the following sequel. \nA. Noun \nTamil has an extensive case system. Root nouns can assume eight different morphological shapes \ndepending on their roles in a sentence. Singular and plural forms are also distinguished through inflections. \nSuffixes are attached to stem word of the noun. Table I shows example for different stem noun. \nTABLE I NOUN \nSingular \nPeN(¦Àñ)/ girl \nmaram(ÁÃõ) /tree \nOblique stem \nPeN(¦Àñ)- \nmaram(ÁÃõ) - \nNominative stem \nPeN(¦Àñ) \nmaram(ÁÃõ) \nAccusative stem \nPeN(¦Àñ)-ai(³) \n \nmaram(ÁÃõ) -ai \nDative stem \nPeN(¦Àñ)-ukku(¯ìÌ) \nmaram(ÁÃõ) -ukku(¯ìÌ) \nSociative stem  \nPeN(¦Àñ)-odu(µÎ) \nmaram(ÁÃõ) -odu(µÎ) \nGenitive stem \nPeN(¦Àñ)-udaiya(¯¨¼Â) \nmaram(ÁÃõ) -udaiya(¯¨¼Â) \nInstrumental stem \nPeN(¦Àñ)–aal(¬ø) \nmaram(ÁÃõ) -aal(¬ø) \nLocative stem \nPeN(¦Àñ)-idam(þ¼õ) \nmaram(ÁÃõ) -marath(þø) \nAblative stem \nPeN(¦Àñ)–idamirunthu(þ¼Á¢ÕóÐ) \nmaram(ÁÃõ) -ilirunthu(þÄ¢ÕóÐ) \nVocative stem \nPeN(¦Àñ)-e(±) \nmaram(ÁÃõ) -e(±) \nPlural \nPeNgaL(¦Àñ¸û)/ girls \nmarangal(ÁÃí¸û)/ trees \nOblique stem \nPeNgaL(¦Àñ¸û)- \nmarangal(ÁÃí¸û)- \nNominative stem \nPeNgaL(¦Àñ¸û) \nmarangal(ÁÃí¸û) \nAccusative stem \nPeNgaL(¦Àñ¸û)-ai(³) \nmarangal(ÁÃí¸û)-ai(³) \nDative stem \nPeNgaL(¦Àñ¸û)-ukku(¯ìÌ) \nmarangal(ÁÃí¸û)-ukku(¯ìÌ) \nSociative stem \nPeNgaL(¦Àñ¸û)-odu(µÎ) \nmarangal(ÁÃí¸û)-odu(µÎ) \nGenitive stem \nPeNgaL(¦Àñ¸û)-udaiya(¯¨¼Â) \nmarangal(ÁÃí¸û)-udaiya(¯¨¼Â) \nInstrumental stem \nPeNgaL(¦Àñ¸û)-aal(¬ø) \nmarangal(ÁÃí¸û)-aal(¬ø) \nLocative stem \nPeNgaL(¦Àñ¸û)-idam(þ¼õ) \nmarangal(ÁÃí¸û)-il(þø) \nAblative stem \nPeNgaL(¦Àñ¸û)- \nidamirunthu(þ¼Á¢ÕóÐ) \nmarangal(ÁÃí¸û)-ilirunthu(þÄ¢ÕóÐ) \nVocative stem \nPeNgaL(¦Àñ¸û)-e(±) \nmarangal(ÁÃí¸û)-e(±) \n* ‘gaL’(¸û) is added to the singular form of nouns to make them plural  \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n903\nB. Compound Nouns \n         Nouns are also occurring in various compound forms as well. It can be made up of several units where \neach unit expresses a particular grammatical meaning. The Tamil noun, “pAdikkoNdurunhthavanai \n(À¡Êì¦¸¡ñÎÕó¾Å¨É)”, which translates as, “the male who was singing”, gives information on tense, number, \ngender, person and case. This noun is actually derived from the full non-infinite verb, “pAdikkoNdu \n(À¡Êì¦¸¡ñÎ)”, which means, “singing”. In English, deriving nouns from verbs is seen too. The full finite verb, \n“sing”, for instance could be changed into a noun by adding the suffix “er” to its stem, so that it becomes \n“singer”. But, while Tamil is an agglutinating language, English is not. \nC. Verbs  \nTamil verbs may be main or auxiliary. They also exist in finite and non-finite forms just as in English. \nTamil finite verbs however give much more grammatical information than English finite verbs do, in that they \nmark mood, tense, number, person, gender, case etc… In the Table II below, can observe the different finite \nmorphological construction for the verb “padi(ÀÊ)” [study]. \nTABLE II VERBS \n \nPast  \nPresent  \nFuture  \nFuture-Neg \nI singular \npadi(ÀÊ)-  ththEn(ò§¾ý)  \n \nPadi(ÀÊ)- kkiREn(ì¸¢§Èý) \nPadi(ÀÊ)- ppEn(ô§Àý) \nPadi(ÀÊ)- \nkkamaattEn(ì¸Á¡ð§¼ý)  \nII singular \nPadi(ÀÊ)- \nththAi \n(ò¾¡ö)  \nPadi(ÀÊ)- kkiRaai(ì¸¢È¡ö) \nPadi(ÀÊ)- ppaai(ôÀ¡ö) \nPadi(ÀÊ)- kkamataai(ì¸Á¼¡ö) \nIII \nsingular \nmale \nPadi(ÀÊ)- ththaan(ò¾¡ý)  Padi(ÀÊ)- \nkkiRaan(ì¸¢È¡ý) \nPadi(ÀÊ)- ppaan(ôÀ¡ý) \nPadi(ÀÊ)- \nkkamaattaan(ì¸Á¡ð¼¡ý) \nIII singular \nfemale \nPadi(ÀÊ)-ththaaL (ò¾¡û) \nPadi(ÀÊ)- kkiRaaL(ì¸¢È¡û) \nPadi(ÀÊ)- papal(ôÀ¡û) \nPadi(ÀÊ)- \nkkamaattaaL(ì¸Á¡ð¼¡û) \n \nIII \nsingular \nhon \nPadi(ÀÊ)- ththaar (ò¾¡÷)  \nPadi(ÀÊ)- kkiRaar(ì¸¢È¡÷) \nPadi(ÀÊ)- ppaar(ôÀ¡÷) \nPadi(ÀÊ)- \nkkamaatdaar(ì¸Á¡ð¼¡÷) \nIII \nsingular \ninan \nPadi(ÀÊ)- ththathu(ò¾Ð)  \nPadi(ÀÊ)- kkiRathu(ì¸¢ÈÐ) \nPadi(ÀÊ)- kkum(ìÌõ) \nPadi(ÀÊ)- kkaathu(ì¸¡Ð) \n \nI plural \nPadi(ÀÊ)- tthOm(ð§¾¡õ)  \nPadi(ÀÊ)- \nkkiROm(ì¸¢§È¡õ) \nPadi(ÀÊ)- \npPOm(ô§À¡õ) \nPadi(ÀÊ)- kkamaatTOm  \n ì¸Á¡ð§¼¡õ) \nII plural \nPadi(ÀÊ)-ththIrkaL \n(ò¾£÷¸û) \n  \nPadi(ÀÊ)- \nkkiRIrkaL(ì¸¢È£÷¸û) \nPadi(ÀÊ)- \nppIRkaL(ôÀ£ü¸û) \nPadi-(ÀÊ)- \nkkamaattaarkaL(ì¸Á¡ðË÷¸û) \n \nIII plural an \nPadi(ÀÊ)- ththaarkaL \n(ò¾¡÷¸û)  \nPadi(ÀÊ)- \nkkiRaarkaL(ì¸¢È¡÷¸û) \nPadi(ÀÊ)- \nppaarKaL(ôÀ¡÷¸û) \nPadi(ÀÊ)- \nkkamaattaarkaL(ì¸Á¡ð¼¡÷¸û) \n \nIII plural inan \nPadi(ÀÊ)- ththana(ò¾É) \nPadi(ÀÊ)- \nkkinRana(ì¸¢ýÈÉ) \nPadi(ÀÊ)- kkum(ìÌõ) \nPadi(ÀÊ)- kkaathu(ì¸¡Ð) \n \nnon-future negative: padi(ÀÊ)-kkavillai(ì¸Å¢ø¨Ä) (all persons, numbers and genders)*  \n \n \n \n \n \n \n \n \n \n \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n904\nTABLE III NON-FINITE VERB \nIV. STEMMERS FOR TAMIL LANGUAGE \nStemming is the process of extracting root word from the given text. Without performing complete \nmorphological analysis, it is also reduces the total number of distinct index entries. Richness of morphology in \nTamil language is major issue for creating right stemmer. To address of this issue, light stemmer is proposed \nand performance compared to rule based suffix stripping stemmer. The detailed description of two stemmer \napproaches for Tamil language such as rule based suffix removal stemmer and light stemmer are discussed \nfollowing sequel.  \nA. Rule based suffix stripping stemmer algorithm \n  \nRule based suffix stripping stemmer algorithm truncate suffix of Tamil inflectional word based on the \nrules. That convert inflectional Tamil word into stemmed Tamil word [3][6].Rule based suffix stripping \nstemmer Algorithm for Tamil Language is presented in Figure 2. \nRule based suffix stripping stemmer Algorithm for Tamil Language \nInput    :  List of Tamil words \nOutput : Stemmed(Root) words \nStep1 : Eliminate the entire complex plural.  Eg («Å÷¸û, ¦ºø¸¢È¡÷¸û, Åó¾¡÷¸û...)   \n                        «Å÷¸û= «Å÷, ¦ºø¸¢È¡÷¸û= ¦ºø¸¢È¡÷, Åó¾¡÷¸û= Åó¾¡÷ \nStep2 : Eliminate the join word suffixes. Eg («Å÷, ¦ºø¸¢È¡÷, Åó¾¡÷)  \n                       «Å÷= «Å÷, ¦ºø¸¢È¡÷= ¦ºø¸¢, Åó¾¡÷= Åó¾ \n             A : Eliminate   È¡÷ \n                 ¦ºø¸¢È¡÷= ¦ºø¸¢ \n             B : Eliminate ¡÷ \n                 Åó¾¡÷= Åó¾           \nStep 3 : According to the identified suffix, the next possible suffix list is generated using rules. \nFigure 2. A Rule Based Suffix Stripping Algorithm for Tamil Language \nB. Light Stemmer \nThe rule based suffix stripping stemmer algorithm give infinite verb for some Tamil words. Light \nstemmer is proposed to address above issue. Light stemmer is also kind of rule based stemmer. It works by \ntruncating all possible suffixes form and produce finite verb. Light stemming is used to find the representative \nindexing form of given word by the application of truncation of suffixes [10]. The core objective of light \nstemmer is to preserve the word meaning intact and so increases the retrieval performance of an IR system. A \nLight Stemmer Algorithm for Tamil Language is projected in Figure 3 \n \n \n \n \nConjunctive \nPadi(ÀÊ)-thu (Ð)    \n \nInfinitive  \nPadi(ÀÊ)-kka( ì¸) \nNeg. verbal participle \nPadi(ÀÊ)-kkaamal( ì¸¡Áø) \nConditional \nPadi(ÀÊ)-thaal(¾¡ø) \nNeg. conditional \nPadi(ÀÊ)-kkaanittaal( ì¸É¢ð¼ø) \nNeg.relative participle \nPadi(ÀÊ)-kkaatha( ì¸¡¾) \nNeg. verbal noun \nPadi(ÀÊ)-kkaathathu \n( ì¸¡¾Ð) \nDeverbal nouns \nPadi-(ÀÊ)thal( ¾¡ø);padi(ÀÊ)-ppu( ôÒ); padi(ÀÊ)-kkai( ì¨¸) \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n905\nLight stemmer Algorithm for Tamil Language \nInput    :  List of Tamil words \nOutput : Stemmed(Root) words \nStep 1 : Eliminate the entire complex plural.   \nStep 2 : After the plural word is converted into singular word, during the iteration, the word is also checked for  \n             adjective; if it is found, then its equivalent verb is substituted. Example, the term ‘diya(ÊÂ)’ in  \n             Odiya(µÊÂ) will be changed to ‘du(Î)’ and the word is changed to ‘Oodu(µÎ)’. \nStep 3 : After the adjectives are converted to main word, the tenses are eliminated such that Paadiya(À¡ÊÂ),  \n             Paadukinra(À¡Î¸¢ýÈ) and Paadum(À¡Îõ) will be changed to Paadu(À¡Î). \nStep 4 : According to the identified suffix, the next possible suffix list is generated. \nStep 5 : The Light algorithms are used for plural to singular conversion, and for adjective and tense words to \nmain verbs conversion. \nFigure 3.  A Light Stemmer Algorithm for Tamil Language \nV. \n EXPERIMENTAL ANALYSIS \n \nThe goal of experimental analysis is to calculate the accuracy of the proposed stemmer system can \nachieve. Parameters that can be used for evaluating Tamil stemmer algorithm in this proposed model is \nstemmer’s comparison performance and correctness of the stems produced by it.  The detailed description of \ndataset used for experiment and analysis of experiment results and their discussions are under here. \nA. Dataset \nTwo test dataset are considered for evaluating the proposed algorithm. The test dataset I has 700 words \nwhich are collected from Tamil corpus (Central Institute of Indian Language). Test dataset 2 contains 1600 \nwords constructed from the internet. The stem for these words have been defined manually. The training dataset \nconsists of 3000 words taken from Tamil corpus. Table IV summarizes the details of training and test datasets. \nTABLE IV DATA SET GENERATION \nData set \nTotal Number of Words \nTotal Number of Unique \nWords \nMinimum Length of the \nWord \nMaximum Length of the \nWord \nTraining Dataset \n3000 \n847 \n3 \n14 \nTest Dataset I \n700 \n234 \n3 \n9 \nTest Dataset II \n1600 \n580 \n3 \n11 \nB. The Experiment Results and Discussion \n \nThe experiment analyzed over two datasets in order to evaluate the performance of proposed algorithm. \nThe accuracy is a parameter; it is used to evaluate the efficiency of the proposed Tamil stemmer algorithm over \na rule based suffix stripping stemmer. The accuracy is defined in this proposed stemmer based on number of \nwords stemmed correctly. The Table V shows the computational results of a rule based suffix stripping and light \nstemmer based on suffix rule generation. Table VI average result is generated from the Table V.  From the Table \nVI, the maximum accuracy of rule based suffix stripping stemmer is 84.32% where as 86.73% maximum \naccuracy produced by light stemmer for the test dataset I. light stemmer achieves accuracy 2.41% more than the \nrule based suffix stripping stemmer. The accuracy of rule based suffix stripping stemmer in test dataset II is \n78.4% and light stemmer accuracy is 79.83%. In the dataset II 1.43% more accuracy achieved by the light \nstemmer it is more than the rule based suffix stripping stemmer accuracy. \nAccuracy is calculated from the equation (1). It is based on the Number of Words Stemmed correctly \ngiven by the Tamil Stemmer algorithms and number of unique words in the given datasets. \nAccuracy = Number of Correctly Stemmed words / Number of Unique words*100          (1) \n \n \n \n \n \n \n \n \n \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n906\nTABLE V TEST DATA \nDataset \n \nNumber of Words \n \nNumber of Unique \nWords \n \nNumber of Correctly \nStemmed Word \n \nAccuracy \nRule Based \nsuffix Stripping \nalgorithm \nLight \nStemmer \nalgorithm \n \nDataset I \n200 \n37 \n30 \n \n81.0% \n \n85.9% \n400 \n118 \n101 \n85.5% \n84.2% \n600 \n182 \n152 \n83.5% \n87.6% \n700 \n237 \n200 \n84.3% \n89.7% \n \n \nDataset II \n \n200 \n55 \n43 \n79.4% \n80.2% \n400 \n148 \n116 \n78.8% \n78.4% \n600 \n193 \n142 \n75.2% \n77.1% \n800 \n391 \n290 \n74.1% \n81.2% \n1000 \n424 \n338 \n79.7% \n79.3% \n1200 \n486 \n400 \n82.2% \n82.1% \n1400 \n539 \n402 \n74.6% \n76.2% \n1600 \n580 \n480 \n82.8% \n84.0% \nTABLE VI AVERAGE RESULTS \nData Set \nAccuracy \nA Rule Based Suffix Stripping Stemmer \nA light Stemmer \nData Set I \n84.32% \n86.73% \nData Set II \n78.4% \n \n79.83% \n \nAverage \n81.36% \n83.28% \n               The experiment is conducted over the dataset result of different accuracy (i.e. A1,A2,…) achieved by \nboth rule based suffix stripping and light stemmer algorithm with required statistical parameters and their \naverage result is shown in Table V. The performance analysis chart is presented among various parameters in \nFigure 4. The computational results clearly explain that the light stemmer algorithm is performing better than \nthe rule based suffix stripping algorithm. \n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\nA1 A2 A3 A4 A5 A6 A7 A8 A9 A10A11\nSuffix Stripping Algorithm\nLight Stemmer Algorithm\n \nFigure 4. Performance Analyses for Tamil Stemmer Algorithms \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n907\nVI. \nCONCLUSION \nMorphologically Tamil is a complex language since it has a number of variants in for a single word. \nTamil language is rich in both inflectional and derivational morphologies. In this paper, a light stemmer for \nTamil text is proposed to handle inflectional morphology word. This stemmer removes suffixes from a word to \nget stem word. From the computational result it is prove   light stemmer approach is more suitable stemmer for \nTamil language compare to a rule based suffix stripping stemmer.  \nREFERENCES \n[1] \nA.Ramanathan and D.Rao, “A Lightweight Stemmer for Hindi ,”  in proceedings of the 10th  Conference of the European Chapter of \nthe Association for Computational Linguistics(EACL) on Computational linguistics for South Asian Language (Budapest, April) \nworkshop, 2003.    \n[2] \nJuhi Ameta, Nisheeth Joshi and Iti Mathur, 2011, “A Lightweight Stemmer for Gujarati,” 46th Annual National Convention of \nComputer Society of India. Organized by Computer Society of India Gujarat Chapter. Sponsored by Computer Society of India and \nDepartment of Science and Technology, Govt. of Gujarat and IEEE Gujarat Section.   \n[3] \n“Punjabi Language Stemmer for nouns and proper names,” by Vishal Gupta Gurpreet Singh Lehal, Proceedings of the 2nd Workshop \non South and Southeast Asian Natural Language Processing WSSANLP), IJCNLP 2011,  pages 35–39,Chiang Mai, Thailand, \nNovember 8, 2011. \n[4] \nKhan. 2007. “A light weight stemmer for Bengali and its Use in spelling Checker,” Proc. 1st Intl. Conf. on Digital Comm. and \nComputer Applications (DCCA07), Irbid, Jordan, March 19-23. \n[5] \n“A Light Weight Stemmer for Urdu Language: A Scarce Resourced Language,” Sajjad Ahmad Khan1, Waqas Anwar1, Usama Ijaz \nBajwa1, Xuan Wang, Proceedings of the 3rd Workshop on South and Southeast Asian Natural Language Processing (SANLP), pages \n69–78,COLING 2012, Mumbai, December 2012. \n[6] \nMudassar M. Majgaonker et al. “Discovering suffixes: A Case Study for Marathi Language,” (IJCSE) International Journal on \nComputer Science and Engineering Vol. 02, No. 08, 2010, 2716-2720.  \n[7] \nMalayalam Stemmer - Computational Linguistic Research Group nlp.au-kbc.org/Malayalam_Stemmer_Final.pdf  \n[8] \nMadhavi Ganapathiraju and Levin Lori, TelMore: “Morphological Generator for Telugu Nouns and verbs,” In the proceedings of \nSecond International Conference on Universal Digital Library Alexandria, Egypt, November 17-19, 2006. \n[9] \nD. Freitag, “Morphology induction from term clusters,” In Proceedings of the ninth conference on computational natural language \nlearning (CoNLL), pp. 128–135, 2005. \n[10] Imed Al-Sughaiyer, Ibrahim Al-Kharashi. (2004). “Arabic morphological analysis techniques: a comprehensive survey,” Journal of the \nAmerican Society for Information Science and Technology, 55(3):189 – 213. \n[11] M.F. Porter. 1980. An algorithm for suffix stripping Program, 14(3):130–137. \n[12] Rajendran, S., Arulmozi, S., Ramesh Kumar, Viswanathan, S. 2001. “Computational morphology of verbal complex,” Paper read in \nConference at Dravidan University, Kuppam December 26-29, 2001. \nAUTHOR’S PROFILE \n \nM.Thangarasu received Master of Computer Application degree from Bharathiar University. He purses M.Phil \nunder supervision of Dr.R.Manavalan. His area of interest is data mining and Natural Processing Language \n(NLP). \n \nDr. R. Manavalan is working as Assistant professor and Head in Department of computer science and \nApplications. He obtained Ph.D in Computer Science from Periyar University and published numerous research \npapers in international journals and also presented papers in various national and international conferences. His \narea of interest is soft computing, image processing and analysis, Theory of computation. \nM.Thangarasu et al./ International Journal of Computer Science & Engineering Technology (IJCSET)\nISSN : 2229-3345\nVol. 4 No. 07 Jul 2013\n908\n",
  "categories": [
    "cs.CL"
  ],
  "published": "2013-10-02",
  "updated": "2013-10-02"
}