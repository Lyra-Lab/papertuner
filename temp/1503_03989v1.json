{
  "id": "http://arxiv.org/abs/1503.03989v1",
  "title": "An implementation of Apertium based Assamese morphological analyzer",
  "authors": [
    "Mirzanur Rahman",
    "Shikhar Kumar Sarma"
  ],
  "abstract": "Morphological Analysis is an important branch of linguistics for any Natural\nLanguage Processing Technology. Morphology studies the word structure and\nformation of word of a language. In current scenario of NLP research,\nmorphological analysis techniques have become more popular day by day. For\nprocessing any language, morphology of the word should be first analyzed.\nAssamese language contains very complex morphological structure. In our work we\nhave used Apertium based Finite-State-Transducers for developing morphological\nanalyzer for Assamese Language with some limited domain and we get 72.7%\naccuracy",
  "text": "International Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n \nDOI : 10.5121/ijnlc.2015.4102                                                                                                                       23 \n \nAN IMPLEMENTATION OF APERTIUM BASED ASSAMESE \nMORPHOLOGICAL ANALYZER \n \n                                         Mirzanur Rahman1 and Shikhar Kumar Sarma2 \n \nDepartment of Information Technology, Gauhati University, Guwahati, Assam, India \n \nABSTRACT \n \nMorphological Analysis is an important branch of linguistics for any Natural Language Processing \nTechnology. Morphology studies the word structure and formation of word of a language. In current \nscenario of NLP research, morphological analysis techniques have become more popular day by day. For \nprocessing any language, morphology of the word should be first analyzed. Assamese language contains \nvery complex morphological structure. In our work we have used Apertium based Finite-State-Transducers \nfor developing morphological analyzer for Assamese Language with some limited domain and we get \n72.7% accuracy \n \nKEYWORDS \n \nAssamese Language, Morphology, Natural Language Processing, FST \n \n1.INTRODUCTION \n \nAssamese is the major language spoken in Assam. The state Assam is the north –eastern part of \nthe country. Assamese Language served as a bridge language among different speech \ncommunities in the whole area of the state. The language Assamese is an Indo-Aryan language \noriginated from Vedic dialects [1]. The language as it stands today, passes through tremendous \nmodifications in all the component viz. phonology, morphology, conjunction etc. There are two \nvariations of Assamese language according to dialectical regions [2] i.e. Eastern Assamese and \nWestern Assamese Language. Both are different in terms of phonology and morphology. But still \nthe written text is same for all the regions.  \n \nMorphology is an important component of any language. So, before any processing, we must first \nanalyze the morphology of the words of that language. In language processing technology such as \nMachine Translation [15], Parsing, POS Tagger, Text summarization etc requires morphological \nanalyzers to find out the lexical component of a word. And lexical components are the very \nimportant parts of a grammar of a language. \n \nIn our work we have considered only the standard written Assamese Text corpus and use \nApertium engine with Lttoolbox to build morphological analyzer for Assamese language. In this \npaper we have discuss how we proceed towards developing morphological analyzer. \n \n2. MORPHOLOGY OF A LANGUAGE \n \nIn Language Technology research, morphological analysis studies the structure of words and \nword formation of a language. \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n24 \n \nWords in a language can be divided into many small units which are known as morpheme [10]. \nRecognizing different morpheme in a word with their lexical properties is known as \nmorphological analysis. For example in English language \n \n \nGirls=Girl +s  \n \no Root : Girl  (category- noun)  \no Affix:  „s‟    (indefinite plural marker)  \n \nIn the above example the word “Girls” is a combination of “Girl” morpheme and “s” morpheme. \nWhen we analyze a word with morphological analyzer, it should provide all the combination of \nmorpheme with their lexical properties. \n \nAccording to Golockchandra Goswami [1], all the morphemes of Assamese Language can be \ndivided in to three categories. \n \no Root Morpheme \no Sub- Root Morpheme \no Affixes Morpheme \n \nRoot morphemes are the main morpheme depending on which all the morphological construction \nis done and affixes are attached. Root morpheme may be categorize into other Parts-of-speech \ncategory like noun, pronoun, verb, indeclinable etc. \n \nFor example in Assamese Language: \n \n \nল’ৰাজন = ল’ৰা + জন \no Root: ল’ৰা (Category -Noun) \no Affix: জন (Definite Article, singular case marker) \n \nSub-root morphemes are the morpheme which can occur as an independent root as well as a \nsuffix in an Assamese sentence. \n \nFor example:   \n \n \nখন, জন ডাল  etc. can be used as a root word or as a suffix for singular definitive \no মানুহজন বৰ ভাল (“জন” is used as a singular suffix marker) \no মমাৰ জন আহহলললন? (“জন” is used as a independent root) \n \nমবাৰ/মবাৰৰ, হবলাক etc can be used as a root word or as a suffix for plural definitive \no বস্তুমবাৰৰ দাম নাই৷ (“মবাৰৰ” is used as a plural suffix marker) \no ম ামাললাকৰ মবাৰৰ হক খবৰ? (“মবাৰৰ” is used as a independent root) \n \nAffixes are always added to the root and it contains some own meaning. But they have no \nseparate existence and can never form a free form alone or in conjunction with themselves.  \n \n For Example: এ (মানুলহ), ক (মানুহক), লল (ম ামালল),লক (ভাললক) etc   \n \n \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n25 \n \n3. PRIOR ARTS \n \nFor Assamese language also we have found some of the reported work for morphological \nanalysis. In this section we will try to summarize all the reported work related to Assamese \nmorphological analysis. \n \n \nIn [3], the authors have presented building Morphological Analyzers using the Suffix \nStripping method for the four languages – Assamese, Bengali, Bodo and Oriya. In the \nproposed mechanism they have deals with only inflectional suffixes. The method \ninvolves identifying individual suffixes from a series of suffixes attached to a stem/root, \nusing morpheme sequencing rules. \n \nIn the approach the analyzer analyses the inflected form of a word into suffixes and stems  \nby using a root/stem dictionary (for identifying legitimate roots/stems), a list of suffixes, \ncomprising of all possible suffixes that various categories can take (in order to identify a \nvalid suffix), and the morpheme sequencing rules. . The authors get 50 % coverage for \n7000 to 8000 root entries.  \n \n \nIn [4], the authors have presented A Suffix-based Noun and Verb Classifier for an \nInflectional Language. In the proposed mechanism they have consider only the morpho-\nsyntactic properties of Assamese words. Assamese words can be categorized into \ninflected classes (noun, pronoun, adjective and verb) and un-inflected classes (adverb and \nparticle.  \n \n \nIn [5], the authors describe an approach to unsupervised learning of morphology from an \nunannotated corpus for Assamese Language in their paper “Acquisition of Morphology of \nan Indic Language from Text Corpus”. In their paper they have present & elaborately \ndiscussed an unsupervised method for acquisition of Assamese morphology from a text \ncorpus. This is the initial work towards unsupervised morphological analysis and it is \nvery suitable for Assamese language. This approach, acquire the suffixation morphology \nof the language from a text corpus of about 300,000 words and build a morphological \nlexicon. The F-measure of the suffix acquisition is about 69%.  \n \n \nIn [6], the authors have presented suffix stripping approach, where they add a rule engine \nwhich generates all the possible suffix sequences for analyzing morphology of a word. \nThey got 82% accuracy with a root-word list of size 20,000 approximately with this \nmethod. \n \n \n In [7], the authors combine a rule based algorithm and HMM based algorithm. Where \nrule based algorithm is used for predicting multiple letter suffixes and an HMM based \nalgorithm for predicting the single letter suffixes .This added method can predict \nmorphologically inflected words with 92% accuracy. \n \n \nIn [8] Utpal Sarma proposed an unsupervised method for learning morphology of a \nlanguage in his Ph.D thesis “Unsupervised Learning of Morphology of a Highly \nInflectional Language” \n \n \n \n \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n26 \n \n4. IMPLEMENTATION USING APERTIUM AND LTTOOLBOX \n \nApertium is a rule-based open-source shallow-transfer machine translation platform [11]. It is free \nsoftware and released under the terms of the GNU General Public License. It includes the engine, \nmaintenance tools, and open linguistic data for several language pairs. Lttoolbox is a toolbox for \nlexical processing, morphological analysis and generation of words. Lttoolbox used finite-state \ntransducers (FST). FST are a type of finite-state automata, which may be used as one-pass \nmorphological analyzers. \n \nIn Apertium, the analyzer data is stored in Apertium‟s dictionary (dix) format with XML syntax. \nThe analyzer can be easily converted to a morphological generator from the single morphological \ndatabase (monodix), depending on in which direction the system read the dictionary. If the system \nread the dictionary from left to right, we obtain the analyzer, and read from right to left, we obtain \nthe generator. It is proven that an XML based dictionary (monodix) is generally faster than a \nnormal text or database based dictionary. \n \nFor creating Morphological Analyzer, different modules of Apertium engine are required. \n \n4.1. Dictionary  \n \nAn Apertium based system can use two types of dictionaries, Monolingual and Bilingual \nDictionary. Monolingual dictionary is used for Morphological analyzer & generator and Bilingual \ndictionary is used for machine translation purpose. In our work, we use monolingual dictionary. \n \n4.2. Paradigm definitions <pardef> \n \nA Paradigm is the complete set of related inflectional and productive derivational word forms of a \ngiven category. A paradigm can be understood as a small dictionary of alternative transformations \nthat can be concatenated to the parts of words (or to entries of another paradigm) to specify \nregularities in the lexical processing of the dictionary entries, such as inflection regularities. In the \ndefinition along with the root word it contains other information like category, gender, number, \nperson, case marker, tense etc.  \n \n \n \nFigure 1: Dictionary entry of Assamese Word চকু (Eye) in Paradigm \n \n4.3. Element for Reference to a Paradigm \n \nApertium provides a lexico-semantic layer, for working with inflection of a word. The layer \nintroduces the lexemes into derivation and concurrently follows the inflection of the derived \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n27 \n \nlexeme. It is used inside <pardefs> entry. Main advantage of using   reference paradigm is that, \nthere is no need to write all the inflected forms of a lemma in a morphological dictionary entry \nbecause it can be referred from other paradigms. \n \n \n \nFigure 2: XML format for Reference Paradigm \n \n4.4. Morpheme \n \nAll the root word (morpheme) is included in the dictionary, generated for Morphological \nAnalyzer. The dictionary is different from a conventional dictionary, because it contains other \ninformation with morpheme like lexical categories and their corresponding paradigm. \n \n \n \nFigure 3: Dictionary Entry of Morpheme with their lexical category \n \n4.5. Lttoolbox Modules  \n \nLttoolbox contains three modules, lexical processing (lt-comp), morphological analysis & \ngeneration (lt-proc) and Expansion (lt-expand).  \n \nFor Morphological analysis lt-comp and lt-proc module is required, lt-comp for processing and lt-\nproc for generation [12]. Lt-comp module is responsible for compiling our morphological \ndictionaries into its own finite-sate representation and lt-comp module is responsible for \nprocessing the compiled input data into required output. \n \n4.5.1. \nCompilation:  \n \nlt-comp module compile the given .dix format file into binary format from left to right \n(LR) or from right to lest (RL). When we compile with LR, it creates an analyzer and \nRL usually creates a generator. \n \nSyntax of lt-comp: \n$ lt-comp  lr  apertium-asm.morph.dix  analyser.bin \nCompile the apertium-asm.morph.dix  dictionary in a left-to-right manner into the \nbinary analyser.bin  \n$ lt-comp rl  apertium-asm.morph.dix  generator.bin \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n28 \n \nCompile the apertium-asm.morph.dix  dictionary in a right-to-left  manner into the \nbinary generator.bin  \n \n4.5.2. \nProcessing: \n \n lt-proc module contains two functions, one is analysis (which is the default mode) \nand generation. Analysis converts surface forms into the set of possible lexical forms, \nwhile generation converts a lexical form into the corresponding surface form. \n \nSyntax of lt-proc: \n \n$ echo “চকুযুহৰ\" |  lt-proc  analyser.bin \nOutput:         ^চকুযুহৰ/চকু<n><pl>$ \nHere we analyze the Assamese word চকুযুহৰ (Eyes) with the binary format dictionary \n(left-to-right) analyser.in \n    $  echo \"^চকু<n><pl>$\"  | lt-proc -g generator.bin \n    Output:    চকুযুহৰ \nHere we generate the plural form of Assamese word চকু (Eye) with the binary format \ndictionary (right-to-left) generator.bin \n \n4.6. Meaning of Analyzers Output format  \n \n \n \nFigure 4: Meaning of output format (Morphological Analyzer) \n \n4.7. Current Dictionary \n \nIn our current work, we have considered only limited number of word with selected Parts-of-\nSpeech (POS) categories. The following table shows summery of our used database entries \n \nTable 1: Number of Entries in XML Dictionary (apertium-asm.morph.dix) \n \nMain Category \nEntry in dictionary \nNoun \n22368 \nPronoun \n121 \nVerb \n1844 \nAdverb \n232 \n \nAs a source of our dictionary, we have use following sources \n \n \nAssamese text corpus obtained from Language Technology Development Project, \nGauhati University \n \nAsamiya Abhidhan [9] \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n29 \n \nAll the dictionary entries are done manually by using notepad++ software. The root words lexical \ncategories are verified by linguistics, so that the output of the analyzer is proper.  \n \n5. EVALUATION AND TEST RESULT  \n \nIn the above table (Table no 1) we have seen that the number of dictionary entry is only 24565, \nwhich is not a very high in number. Since the work is going on, we can expect in future we will \nhave an XML dictionary with large number of entries. Here we have considered only the most \nfrequently used words in Assamese Language.   \n \nTill now we have not added any rule for lexical selection in the Apertium engine. That‟s why \nsome times it cannot analyze a word properly. For example, the Assamese word জন can be used \nas a suffix or it can be used as a person name. Most of the time the word জন (man in general) \n(Definite Article) is used as a suffix in Assamese sentences, but if someone use this word as a \nperson name (Though জন(jhon) (Proper noun) is not commonly used as a name in Assam) then \nour analyzer cannot give proper analysis. We have faced another problem with this analyzer is \nthat if a word has more than one meaning depending on the situation and position within the \nsentence, it cannot analyze properly. For Example the Assamese Words: মালা (Garland) and অনল \n(Fire). Both can be used as a material noun or proper noun depending on the use of the word in \nthe sentence. \n \nIn testing phase we have use a set of data collected from different Assamese blogs and pages \ncontaining 1120 words (after Cleaning). Words are first tokenize and passes through cleaning \nprocess (for removing stop word, delimiter and extra white space ) with the help of java \nprogramming language. Then one by one we pass the word to the Apertium engine for analysis \nand store the result in a text file. The text file is checked manually for correctness of the results. \nThe result we have found is shown below \n \nTable 2: Test Result \n \nTotal words \n1120 \nCorrectly recognize \n815 \nWrongly recognize \n305 \n \nFrom  the above table we have seen that the analyzer  provides only 72.7% correct results .Other \n27% are wrongly recognize due to limited database entry , unavailability of lexical rules for \nselecting proper category and limited POS category. \n \n6. CONCLUSION \n \nIn this paper we have discus about the implementation of a Morphological analyzer using \nApertium & Lttoolbox. At present this analyzer can handles only inflectional morphology, since \nwe are excluding derivational morphology and we are working on noun, pronoun, verb and \nadverb. Our current dictionary can only provide information about suffixes. \n \nForm the previous works (in section III) we can see that maximum works done with supervised \nsuffix stripping method. Only limited no of [5, 8] reported work has implement unsupervised \ntechnique for analyzing the morphology. Here we have used supervised Finite-state-transducer \n(FST) method with the help of Apertium engine, since Finite-state-transducers have many \nInternational Journal on Natural Language Computing (IJNLC) Vol. 4, No.1, February 2015 \n30 \n \nadvantages [13]. With the help of single source, FST can work as bidirectional engine for both \nanalysis and generation and they are fast (thousands of words per second), and compact. \nCurrently our morphological analyzer is in initial stage. In the future we will extend our work to \nthe remaining grammatical categories, include derivational morphology and populate dictionary \nwith prefix information to get better performance. \n \nACKNOWLEDGEMENTS \n \nThe authors are thankful to the Department of Information Technology, Gauhati University for \nproviding us the corpus, which helped us in building the MA system and people from Language \nTechnology Development Project, Gauhati University for their immense support \n \nREFERENCES \n \n[1] \nKalyanee Kanchan Baruah, Pranjal Das, Abdul Hannan, Shikhar Kr Sarma, “Assamese- Goswami \nGolockchandra (1982), Structure of Assamese, Gauhati University publication \n[2] \nBani Kanta Kakati (1962), Assamese, Its Formation and Development \n[3] \nMona Parakh and Rajesha N, “Developing Morphological Analyzer for Four Indian Languages Using \nA Rule Based Affix Stripping Approach”, Linguistic Data Consortium for Indian Languages, CIIL, \nMysore, 2011. \n[4] \nNavanath Saharia, Utpal Sharma and Jugal Kalita, “A Suffix based Noun and Verb Classifier for an \nInflectional Language” International Conference on Asian Language Proceesing(IALP-10), China, \n2010 \n[5] \nSharma, Utpal and Kalita, Jugal K and Das, Rajib K. “Acquisition of Morphology of an Indic \nLanguage from Text Corpus”. ACM Transactions of Asian Language Information Processing \n(TALIP), vol 7, no. 3, article 9, p 1-33, August 2008. \n[6] \nNavanath Saharia, Utpal Sharma and Jugal Kalita, “Analysis and Evaluation of Stemming \nAlgorithms: A case study with Assamese” Proceedings of the International Conference on Advances \nin Computing, Communications and Informatics, Pages 842-846, Chennai, 2012 \n[7] \nNavanath Saharia, Kishori M. Konwar, Utpal Sharma and Jugal Kalita, “An Improved Stemming \nApproach Using HMM for a Highly Inflectional Language”, Proceedings of 14th International \nConference on Intelligent Text Processing and Computational Linguistics (CICLing), Pages 164-173, \nSamos, Greece, 2013 \n[8] \nUtpal Sharma, Unsupervised Learning of Morphology of a Highly Inflectional Language, Phd. Thesis, \n2006 \n[9] \nGiridhar Sarma (1952), Asamiya Abhidhan,  \n[10] James Allen ,Natural Language Understanding, Second Edition, Pearson Education India, ISBN: \n8131708950 \n[11] (2014) Apertium Wikipedia Page, Available: http://en.wikipedia.org/wiki/Apertium \n[12] (2014) Apertium Monodix Wikipedia Page, Available: http://wiki.apertium.org/wiki/ Monodix_basics \n[13] (2014) \nFinite \nstate \ntransducer \nWikipedia \nPage, \nAvailable: \nhttp://en.wikipedia.org/wiki/ \nFinite_state_transducer \n[14] Mikel L. Forcada,Boyan Ivanov Bonev,Sergio Ortiz Rojas,Juan Antonio P´erez Ortiz,Gema Ram´ırez \nS´anchez,Felipe S´anchez Mart´ınez,Carme Armentano-Oller,Marco A. Montava,Francis M. Tyers \n(March 10, 2010), “IDocumentation of the Open-Source Shallow-Transfer Machine Translation \nPlatform Apertium” ,[Online] Departament de Llenguatges i Sistemes Inform`atics Universitat \nd‟Alacant, Available : http://xixona.dlsi.ua.es/~fran/ apertium2 -documentation.pdf, [Accessed  27th \nApril 2014] \n[15] English Bilingual Machine Translation” International Journal on Natural Language Computing \n(IJNLC) Vol. 3, No.3, June 2014  \n \nAuthors  \n \nMirzanur Rahman:  PhD Scholar, Department of Information Technology, Gauhati \nUniversity. \n \n Shikhar Kr. Sarma: Head of the Department, Department of Information \nTechnology, Gauhati University. \n",
  "categories": [
    "cs.CL"
  ],
  "published": "2015-03-13",
  "updated": "2015-03-13"
}