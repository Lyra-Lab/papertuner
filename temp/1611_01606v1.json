{
  "id": "http://arxiv.org/abs/1611.01606v1",
  "title": "Learning to Play in a Day: Faster Deep Reinforcement Learning by Optimality Tightening",
  "authors": [
    "Frank S. He",
    "Yang Liu",
    "Alexander G. Schwing",
    "Jian Peng"
  ],
  "abstract": "We propose a novel training algorithm for reinforcement learning which\ncombines the strength of deep Q-learning with a constrained optimization\napproach to tighten optimality and encourage faster reward propagation. Our\nnovel technique makes deep reinforcement learning more practical by drastically\nreducing the training time. We evaluate the performance of our approach on the\n49 games of the challenging Arcade Learning Environment, and report significant\nimprovements in both training time and accuracy.",
  "text": "Under review as a conference paper at ICLR 2017\nLEARNING TO PLAY IN A DAY: FASTER DEEP REIN-\nFORCEMENT LEARNING BY OPTIMALITY TIGHTENING\nFrank S. He\nDepartment of Computer Science\nUniversity of Illinois at Urbana-Champaign\nZhejiang University\nfrankheshibi@gmail.com\nYang Liu\nDepartment of Computer Science\nUniversity of Illinois at Urbana-Champaign\nliu301@illinois.edu\nAlexander G. Schwing\nDepartment of Electrical and Computer Engineering\nUniversity of Illinois at Urbana-Champaign\naschwing@illinois.edu\nJian Peng\nDepartment of Computer Science\nUniversity of Illinois at Urbana-Champaign\njianpeng@illinois.edu\nABSTRACT\nWe propose a novel training algorithm for reinforcement learning which com-\nbines the strength of deep Q-learning with a constrained optimization approach\nto tighten optimality and encourage faster reward propagation. Our novel tech-\nnique makes deep reinforcement learning more practical by drastically reducing\nthe training time. We evaluate the performance of our approach on the 49 games\nof the challenging Arcade Learning Environment, and report signiﬁcant improve-\nments in both training time and accuracy.\n1\nINTRODUCTION\nThe recent advances of supervised deep learning techniques (LeCun et al., 2015) in computer vision,\nspeech recognition and natural language processing have tremendously improved the performance\non challenging tasks, including image processing (Krizhevsky et al., 2012), speech-based transla-\ntion (Sutskever et al., 2014) and language modeling (Hinton et al., 2012). The core idea of deep\nlearning is to use artiﬁcial neural networks to model complex hierarchical or compositional data\nabstractions and representations from raw input data (Bengio et al., 2013). However, we are still\nfar from building intelligent solutions for many real-world challenges, such as autonomous driv-\ning, human-computer interaction and automated decision making, in which software agents need to\nconsider interactions with a dynamic environment and take actions towards goals. Reinforcement\nlearning (Bertsekas & Tsitsiklis, 1996; Powell, 2011; Sutton & Barto, 1998; Kaelbling et al., 1996)\nstudies these problems and algorithms which learn policies to make decisions so as to maximize a\nreward signal from the environment. One of the promising algorithms is Q-learning (Watkins, 1989;\nWatkins & Dayan, 1992). Deep reinforcement learning with neural function approximation (Tsit-\nsiklis & Roy, 1997; Riedmiller, 2005; Mnih et al., 2013; 2015), possibly a ﬁrst attempt to combine\ndeep learning and reinforcement learning, has been proved to be effective on a few problems which\nclassical AI approaches were unable to solve. Notable examples of deep reinforcement learning\ninclude human-level game playing (Mnih et al., 2015) and AlphaGo (Silver et al., 2016).\nDespite these successes, its high demand of computational resources makes deep reinforcement\nlearning not yet applicable to many real-world problems. For example, even for an Atari game, the\ndeep Q-learning algorithm (also called deep Q-networks, abbreviated as DQN) needs to play up to\nhundreds of millions of game frames to achieve a reasonable performance (van Hasselt et al., 2015).\nAlphaGo trained its model using a database of game records of advanced players and, in addition,\nabout 30 million self-played game moves (Silver et al., 2016). The sheer amount of required com-\nputational resources of current deep reinforcement learning algorithms is a major bottleneck for its\napplicability to real-world tasks. Moreover, in many tasks, the reward signal is sparse and delayed,\nthus making the convergence of learning even slower.\n1\narXiv:1611.01606v1  [cs.LG]  5 Nov 2016\nUnder review as a conference paper at ICLR 2017\nHere we propose optimality tightening, a new technique to accelerate deep Q-learning by fast reward\npropagation. While current deep Q-learning algorithms rely on a set of experience replays, they only\nconsider a single forward step for the Bellman optimality error minimization, which becomes highly\ninefﬁcient when the reward signal is sparse and delayed. To better exploit long-term high-reward\nstrategies from past experience, we design a new algorithm to capture rewards from both forward\nand backward steps of the replays via a constrained optimization approach. This encourages faster\nreward propagation which reduces the training time of deep Q-learning.\nWe evaluate our proposed approach using the Arcade learning environment (Bellemare et al., 2013)\nand show that our new strategy outperforms competing techniques in both accuracy and training\ntime on 30 out of 49 games despite being trained with signiﬁcantly fewer data frames.\n2\nRELATED WORK\nThere have been a number of approaches improving the stability, convergence and runtime of deep\nreinforcement learning since deep Q-learning, also known as deep Q-network (DQN), was ﬁrst\nproposed (Mnih et al., 2013; 2015). DQN combined techniques such as deep learning, reinforcement\nlearning and experience replays (Lin, 1992; Wawrzynski, 2009).\nNonetheless, the original DQN algorithm required millions of training steps to achieve human-\nlevel performance on Atari games. To improve the stability, recently, double Q-learning was com-\nbined with deep neural networks, with the goal to alleviate the overestimation issue observed in\nQ-learning (Thrun & Schwartz, 1993; van Hasselt, 2010; van Hasselt et al., 2015). The key idea is\nto use two Q-networks for the action selection and Q-function value calculation, respectively. The\ngreedy action of the target is ﬁrst chosen using the current Q-network parameters, then the target\nvalue is computed using a set of parameters from a previous iteration. Another notable advance is\n“prioritized experience replay” (Schaul et al., 2016) or “prioritized sweeping” for deep Q-learning.\nThe idea is to increase the replay probability of experience tuples that have a high expected learning\nprogress measured by temporal difference errors.\nIn addition to the aforementioned variants of Q-learning, other network architectures have been\nproposed. The dueling network architecture applies an extra network structure to learn the impor-\ntance of states and uses advantage functions (Wang et al., 2015). A distributed version of the deep\nactor-critic algorithm without experience replay was introduced very recently (Mnih et al., 2016).\nIt deploys multiple threads learning directly from current transitions. The approach is applicable to\nboth value-based and policy-based methods, off-policy as well as on-policy methods, and in discrete\nas well as in continuous domains. The model-free episodic control approach evaluates state-action\npairs based on episodic memory using k-nearest neighbors with hashing functions (Blundell et al.,\n2016). Bootstrapped deep Q-learning carries out temporally-extended (or deep) exploration, thus\nleading to much faster learning (Osband et al., 2016).\nOur fast reward propagation differs from all of the aforementioned approaches. The key idea of\nour method is to propagate delayed and sparse rewards during Q-network training, and thus greatly\nimprove the efﬁciency and performance. We formulate this propagation step via a constrained pro-\ngram. Note that our program is also different from earlier work on off-policy Q∗(λ) algorithms with\neligibility traces (Munos et al., 2016; Watkins, 1989), which have been recently shown to perform\npoorly when used for training deep Q-networks on Atari games.\n3\nBACKGROUND\nReinforcement learning considers agents which are able to take a sequence of actions in an environ-\nment. By taking actions and experiencing at most one scalar reward per action, their task is to learn\na policy which allows them to act such that a high cumulative reward is obtained over time.\nMore precisely, consider an agent operating over time t ∈{1, . . . , T}. At time t the agent is in an\nenvironment state st and reacts upon it by choosing action at ∈A. The agent will then observe a\nnew state st+1 and receive a numerical reward rt ∈R. Throughout, we assume the set of possible\nactions, i.e., the set A, to be discrete.\n2\nUnder review as a conference paper at ICLR 2017\nA well established technique to address the aforementioned reinforcement learning task is Q-\nlearning (Watkins, 1989; Watkins & Dayan, 1992). Generally, Q-learning algorithms maintain an\naction-value function, often also referred to as Q-function, Q(s, a). Given a state s, the action-value\nfunction provides a ‘value’ for each action a ∈A which estimates the expected future reward if\naction a ∈A is taken. The estimated future reward is computed based on the current state s or a\nseries of past states st if available.\nThe core idea of Q-learning is the use of the Bellman equation as a characterization of the optimal\nfuture reward function Q∗via a state-action-value function\nQ∗(st, a) = E[rt + γ max\na′ Q∗(st+1, a′)].\n(1)\nHereby the expectation is taken w.r.t. the distribution of state st+1 and reward rt obtained after\ntaking action a, and γ is a discount factor. Intuitively, reward for taking action a plus best future\nreward should equal the best total return from the current state.\nThe choice of Q-function is crucial for the success of Q-learning algorithms. While classical meth-\nods use linear Q-functions based on a set of hand-crafted features of the state, more recent ap-\nproaches use nonlinear deep neural networks to automatically mine intermediate features from the\nstate (Riedmiller, 2005; Lange & Riedmiller, 2010; Mnih et al., 2013; 2015). This change has\nbeen shown to be very effective for many applications of reinforcement learning. However, auto-\nmatic mining of intermediate representations comes at a price: larger quantities of data and more\ncomputational resources are required. Even though it is sometimes straightforward to extract large\namounts of data, e.g., when training on video games, for successful optimization, it is crucial that the\nalgorithms operate on un-correlated samples from a dataset D for stability. A technique called “ex-\nperience replay” (Lin, 1992; Wawrzynski, 2009) encourages this property and quickly emerged as a\nstandard step in the well-known deep Q-learning framework (Mnih et al., 2013; 2015). Experience\nreplays are stored as a dataset D = {(sj, aj, rj, sj+1)} which contains state-action-reward-future\nstate-tuples (sj, aj, rj, sj+1), including past observations from previous plays.\nThe characterization of optimality given in Eq. (1) combined with an “experience replay” dataset D\nresults in the following iterative algorithmic procedure (Mnih et al., 2013; 2015): start an episode\nin the initial state s0; sample a mini-batch of tuples B = {(sj, aj, rj, sj+1)} ⊆D; compute and\nﬁx the targets yj = rj + γ maxa Qθ−(sj+1, a) for each tuple using a recent estimate Qθ−(the\nmaximization is only considered if sj is not a terminal state); update the Q-function by optimizing\nthe following program w.r.t. the parameters θ typically via stochastic gradient descent:\nmin\nθ\nX\n(sj,aj,rj,sj+1)∈B\n(Qθ(sj, aj) −yj)2 .\n(2)\nAfter having updated the parameters of the Q-function we perform an action simulation either choos-\ning an action at random with a small probability ϵ, or by following the strategy arg maxa Qθ(st, a)\nwhich is currently estimated. This strategy is also called the ϵ-greedy policy. We then obtain the\nactual reward rt. Subsequently we augment the replay memory with the new tuple (st, at, rt, st+1)\nand continue the simulation until this episode terminates or reaches an upper limit of steps, and\nwe restart a new episode. When optimizing w.r.t. the parameter θ, a recent Q-network is used to\ncompute the target yj = rj + γ maxa Qθ−(sj+1, a). This technique is referred to as ‘semi-gradient\ndescent,’ i.e., the dependence of the target on the parameter θ is ignored.\n4\nFAST REWARD PROPAGATION VIA OPTIMALITY TIGHTENING\nInvestigating the cost function given in Eq. (2) more carefully, we observe that it operates on a\nset of short one-step sequences, each characterized by the tuple (sj, aj, rj, sj+1). Intuitively, each\nstep encourages an update of the parameters θ, such that the action-value function for the chosen\naction aj, i.e., Qθ(sj, aj), is closer to the obtained reward plus the best achievable future value, i.e.,\nyj = rj + γ maxa Q(sj+1, a). As we expect from the Bellman optimality equation, it is instructive\nto interpret this algorithm as propagating reward information from time j + 1 backwards to time j.\nTo understand the shortcomings of this procedure consider a situation where the agent only receives\na sparse and delayed reward once reaching a target in a maze. Further let |P| characterize the short-\nest path from the agents initial position to the target. For a long time, no real reward is available\n3\nUnder review as a conference paper at ICLR 2017\nand the aforementioned algorithm propagates randomly initialized future rewards. Once the target\nis reached, real reward information is available. Due to the cost function and its property of prop-\nagating reward time-step by time-step, it is immediately apparent that it takes at least an additional\nO(|P|) iterations until the observed reward impacts the initial state.\nIn the following we propose a technique which increases the speed of propagation and achieves\nimproved convergence for deep Q-learning. We achieve this improvement by taking advantage of\nlonger state-action-reward-sequences which are readily available in the “experience replay memory.”\nNot only do we propagate information from time instances in the future to our current state, but\nalso will we pass information from states several steps in the past. Even though we expect to see\nsubstantial improvements on sequences where rewards are sparse or only available at terminal states,\nwe also demonstrate signiﬁcant speedups for situations where rewards are obtained frequently. This\nis intuitive as the Q-function represents an estimate for any reward encountered in the future. Faster\npropagation of future and past rewards to a particular state is therefore desirable.\nSubsequently we discuss our technique for fast reward propagation, a new deep Q-learning algo-\nrithm that exploits longer state-transitions in experience replays by tightening the optimization via\nconstraints. From the Bellman optimality equation we know that the following series of equalities\nhold for the optimal Q-function Q∗:\nQ∗(sj, aj) = rj + γ max\na\nQ∗(sj+1, a) = . . . = rj + γ max\na\n\u0014\nrj+1 + γ max\na′\nh\nrj+2 + γ max\n˜a\nQ∗(sj+3, ˜a)\ni\u0015\n.\nEvaluating such a sequence exactly is not possible in a reinforcement learning setting since the\nenumeration of intermediate states sj+i requires exponential time complexity O(|A|i). It is however\npossible to take advantage of the episodes available in the replay memory D by noting that the\nfollowing sequence of inequalities holds for the optimal action-value function Q∗(with the greedy\npolicy), irrespective of whether the policy generating the sequence of actions aj, aj+1, etc., which\nresults in rewards rj, rj+1, etc. is optimal or not:\nQ∗(sj, aj) = rj + γ max\na\nQ∗(sj+1, a) ≥. . . ≥\nk\nX\ni=0\nγirj+i + γk+1 max\na\nQ∗(sj+k+1, a) = L∗\nj,k.\nNote the deﬁnition of the lower bounds L∗\nj,k for sample j and time horizon k in the aforementioned\nseries of inequalities.\nWe can also use this series of inequalities to deﬁne upper bounds. To see this note that\nQ∗(sj−k−1, aj−k−1) ≥\nk\nX\ni=0\nγirj−k−1+i + γk+1Q∗(sj, aj),\nwhich follows from the deﬁnition of the lower bound by dropping the maximization over the actions,\nand a change of indices from j →j −k −1. Reformulating the inequality yields an upper bound\nU ∗\nj,k for sample j and time horizon k as follows:\nU ∗\nj,k = γ−k−1Q∗(sj−k−1, aj−k−1) −\nk\nX\ni=0\nγi−k−1rj−k−1+i ≥Q∗(sj, aj).\nIn contrast to classical techniques which optimize the Bellman criterion given in Eq. (2), we propose\nto optimize the Bellman equation subject to constraints Qθ(sj, aj) ≥Lmax\nj\n= maxk∈{1,...,K} Lj,k,\nwhich deﬁnes the largest lower bound, and Qθ(sj, aj) ≤U min\nj\n= mink∈{1,...,K} Uj,k, which speci-\nﬁes the smallest upper bound. Hereby, Lj,k and Uj,k are computed using the Q-function Qθ−with\na recent estimated parameter θ−rather than the unknown optimal Q-function Q∗, and the integer K\nspeciﬁes the number of future and past time steps which are considered. Also note that the target\nused in the Bellman equation is obtained from yj = Lj,0 = rj + γ maxa Qθ−(sj+1, a). In this\nway, we ignore the dependence of the bounds and the target on the parameter θ to stabilize the train-\ning. Taking all the aforementioned deﬁnitions into account, we propose the following program for\nreinforcement learning tasks:\nmin\nθ\nX\n(sj,aj,sj+1,rj)∈B\n(Qθ(sj, aj) −yj)2\ns.t.\n\u001a Qθ(sj, aj) ≥Lmax\nj\n∀(sj, aj) ∈B\nQθ(sj, aj) ≤U min\nj\n∀(sj, aj) ∈B\n.\n(3)\n4\nUnder review as a conference paper at ICLR 2017\nOutput : Parameters θ of a Q-function\nInitialize: θ randomly, set θ−= θ\nfor episode ←1 to M do\ninitialize s1;\nfor t ←1 to T do\nChoose action at according to ϵ-greedy strategy;\nObserve reward rt and next state st+1;\nStore the tuple (st, at, rt, ·, st+1) in replay memory D;\nSample a minibatch of tuples B = {(sj, aj, rj, Rj, sj+1}) from replay memory D;\nUpdate θ with one gradient step of cost function given in Eq. (4);\nReset θ−= θ every C steps;\nend\nfor t ←T to 1 do\nCompute Rt = rt + γRt+1;\nInsert Rt into the corresponding tuple in replay memory D;\nend\nend\nAlgorithm 1: Our algorithm for fast reward propagation in reinforcement learning tasks.\nThis program differs from the classical approach given in Eq. (2) via the constraints, which is cru-\ncial. Intuitively, the constraints encourage faster reward propagation as we show next, and result in\ntremendously better results as we will demonstrate empirically in Sec. 5.\nBefore doing so we describe our optimization procedure for the constrained program in Eq. (3) more\ncarefully. The cost function is generally non-convex in the parameters θ, and so are the constraints.\nWe therefore make use of a quadratic penalty method to reformulate the program into\nmin\nθ\nX\n(sj,aj,rj,sj+1)∈B\nh\n(Qθ(sj, aj) −yj)2 + λ(Lmax\nj\n−Qθ(sj, aj))2\n+ + λ(Qθ(sj, aj) −U min\nj\n)2\n+\ni\n, (4)\nwhere λ is a penalty coefﬁcient and (x)+ = max(0, x) is the rectiﬁer function. Augmenting the cost\nfunction with λ(Lmax\nj\n−Qθ(sj, aj))2\n+ and/or λ(Qθ(sj, aj) −U min\nj\n)2\n+ results in a penalty whenever\nany optimality bounding constraint gets violated. The quadratic penalty function is chosen for sim-\nplicity. The penalty coefﬁcient λ can be set as a large positive value or adjusted in an annealing\nscheme during training. In this work, we ﬁx its value, due to time constraints. We optimize this cost\nfunction with stochastic (sub-)gradient descent using an experience replay memory from which we\nrandomly draw samples, as well as their successors and predecessors. We emphasize that the deriva-\ntives correcting the prediction of Q(sj, aj) not only depend on the Q-function from the immediately\nsuccessive time step Q(sj+1, a) stored in the experience replay memory, but also on more distant\ntime instances if constraints are violated. Our proposed formulation and the resulting optimization\ntechnique hence encourage faster reward propagation, and the number of time steps depends on\nthe constant K and the quality of the current Q-function. We summarize the proposed method in\nAlgorithm 1.\nThe computational complexity of the proposed approach increases with the number of considered\ntime steps K, since additional forward passes are required to compute the bounds Lmax\nj\nand U min\nj\n.\nHowever, we can increase the memory size on the GPU to compute both the bounds and targets in\na single forward pass if K is not too large. If at all a problem, we can further alleviate this increase\nby randomly sampling a subset of the constraints rather than exhaustively using all of them. More\ninformed strategies regarding the choice of constraints are possible as well since we may expect\nlower bounds in the more distant future to have a larger impact early in the training. In contrast once\nthe algorithm is almost converged we may expect lower bounds close to the considered time-step to\nhave bigger impact.\nTo efﬁciently compute the discounted reward over multiple time steps we add a new element to\nthe experience replay structure. Speciﬁcally, in addition to state, action, reward and next state for\ntime-step j, we also store the real discounted return Rj which is the discounted cumulative return\nachieved by the agent in its game episode. Rj is computed via Rj = PT\nτ=j γτ−jrτ, where T is the\nend of the episode and γ is the discount factor. Rj is then inserted in the replay memory after the\n5\nUnder review as a conference paper at ICLR 2017\nFigure 1: Improvements of our method trained on 10M frames compared to results of 200M frame\nDQN training presented by Mnih et al. (2015), using the metric given in Eq. (5).\ntermination of the current episode or after reaching the limit of steps. All in all, the structure of our\nexperience replay memory consists of tuples of the form (sj, aj, rj, Rj, sj+1).\nWe leave the questions regarding a good choice of penalty function and a good choice of the penalty\ncoefﬁcients to future work. At the moment we use a quadratic penalty function and a constant\npenalty coefﬁcient λ identical for both bounds. More complex penalty functions and sophisticated\noptimization approaches may yield even better results than the ones we report in the following.\n5\nEXPERIMENTS\nWe evaluate the proposed algorithm on a set of 49 games from the Arcade Learning Environ-\nment (Bellemare et al., 2013) as suggested by Mnih et al. (2015). This environment is considered to\nbe one of the most challenging reinforcement learning task because of its high dimensional output.\nMoreover, the intrinsic mechanism varies tremendously for each game, making it extremely de-\nmanding to ﬁnd a single, general and robust algorithm and a corresponding single hyperparameter\nsetting which works well across all 49 games.\nFollowing existing work (Mnih et al., 2015), our agent predicts an action based on only raw image\npixels and reward information received from the environment. A deep neural network is used as\nthe function approximator for the Q-function. The game image is resized to an 84 × 84 grayscale\nimage st. The ﬁrst layer is a convolutional layer with 32 ﬁlters of size 8 × 8 and a stride of 4; the\nsecond layer is a convolutional layer with 64 ﬁlters of size 4 × 4 and stride of 2; the third layer is\na convolutional layer with 64 ﬁlters of size 3 × 3 and a stride of 1; the next fully connected layer\ntransforms the input to 512 units which are then transformed by another fully connected layer to an\noutput size equal to the number of actions in each game. The rectiﬁed linear unit (ReLU) is used as\nthe activation function for each layer. We used the hyperparameters provided by Mnih et al. (2015)\nfor annealing ϵ-greedy exploration and also applied RMSProp for gradient descent. As in previous\nwork we combine four frames into a single step for processing. We chose the hyperparamenter K =\n4, for GPU memory efﬁciency when dealing with mini-batches. In addition, we also incorporate\nthe discounted return Rj in the lower bound calculation to further stabilize the training. We use\nthe penalty coefﬁcient λ = 4 which was obtained by coarsely tuning performance on the games\n‘Alien,’ ‘Amidar,’ ‘Assault,’ and ‘Asterix.’ Gradients are also rescaled so that their magnitudes are\ncomparable with or without penalty. All experiments are performed on an NVIDIA GTX Titan-X\n12GB graphics card.\n6\nUnder review as a conference paper at ICLR 2017\nFigure 2: Improvements of our method trained on 10M frames compared to results of 10M frame\nDQN training, using the metric given in Eq. (5).\n5.1\nEVALUATION\nIn previous work (Mnih et al., 2015; van Hasselt et al., 2015; Schaul et al., 2016; Wang et al., 2015),\nthe Q-function is trained on each game using 200 million (200M) frames or 50M training steps. We\ncompare to those baseline results obtained after 200M frames using our proposed algorithm which\nran for only 10M frames or 2.5M steps, i.e., 20 times fewer data, due to time constraints. Instead of\ntraining more than 10 days we manage to ﬁnish training in less than one day. Furthermore, for a fair\ncomparison, we replicate the DQN results and compare the performance of the proposed algorithm\nafter 10M frames to those obtained when training DQN on only 10M frames.\nWe strictly follow the evaluation procedure in (Mnih et al., 2015) which is often referred to as ‘30\nno-op evaluation.’ During both training and testing, at the start of the episode, the agent always\nperforms a random number of at most 30 no-op actions. During evaluation, our agent plays each\ngame 30 times for up to 5 minutes, and the obtained score is averaged over these 30 runs. An ϵ-\ngreedy policy with ϵ = 0.05 is used. Speciﬁcally, for each run, the game episode starts with at most\n30 no-op steps, and ends with ‘death’ or after a maximum of 5 minute game-play, which corresponds\nto 18000 frames.\nOur training consists of M = 40 epochs, each containing 250000 frames, thus 10M frames in\ntotal. For each game, we evaluate our agent at the end of every epoch, and, following common\npractice (van Hasselt et al., 2015; Mnih et al., 2015), we select the best agent’s evaluation as the\nresult of the game. So almost all hyperparameters are selected identical to Mnih et al. (2015) and\nNair et al. (2015).\nTo compare the performance of our algorithm to the DQN baseline, we follow the approach of Wang\net al. (2015) and measure the improvement in percent using\nScoreAgent −ScoreBaseline\nmax{ScoreHuman, ScoreBaseline} −ScoreRandom\n.\n(5)\nWe select this approach because the denominator choice of either human or baseline score prevents\ninsigniﬁcant changes or negative scores from being interpreted as large improvements.\nFig. 1 shows the improvement of our algorithm over the DQN baseline proposed by Mnih et al.\n(2015) and trained for 200M frames, i.e., 50M steps. Even though our agent is only trained for 10M\nframes, we observe that our technique outperforms the baseline signiﬁcantly. In 30 out of 49 games,\nour algorithm exceeds the baseline using only 5% of the baseline’s training frames, sometimes\ndrastically, e.g., in games such as ‘Atlantis,’ ‘Double Dunk,’ and ‘Krull.’ The remaining 19 games,\noften require a long training time. Nonetheless, our algorithm still reaches a satisfactory level of\nperformance.\n7\nUnder review as a conference paper at ICLR 2017\nTraining Time\nMean\nMedian\nOurs (10M)\nless than 1 day (1 GPU)\n345.70%\n105.74%\nDQN (200M)\nmore than 10 days (1 GPU)\n241.06%\n93.52%\nD-DQN (200M)\nmore than 10 days (1 GPU)\n330.3%\n114.7%\nTable 1: Mean and median human-normalized scores. DQN baseline and D-DQN results are from\nMnih et al. (2015); van Hasselt et al. (2015) and trained with 200M frames while our method is\ntrained with 10M frames. Note that our approach can be combined with the D-DQN method.\nFigure 3: Game scores for our algorithm (blue) and DQN (black) using 10M training frames. 30\nno-op evaluation is used and moving average over 4 points is applied.\nIn order to further illustrate the effectiveness of our method, we compare our results with our imple-\nmentation of DQN trained on 10M frames. The results are illustrated in Fig. 2. We observe a better\nperformance on 46 out of 49 games, demonstrating in a fair way the potential of our technique.\nAs suggested by van Hasselt et al. (2015), we use the following score\nScoreNormalized =\nScoreAgent −ScoreRandom\n|ScoreHuman −ScoreRandom|\n(6)\nto summarize the performance of our algorithm in a single number. We normalize the scores of\nour algorithm, the baseline reported by Mnih et al. (2015), and double DQN (D-DQN) (van Hasselt\net al., 2015), and report the training time, mean and median in Table 1. We observe our technique\nwith 10M frames to achieve comparable scores to the D-DQN method trained on 200M frames (van\nHasselt et al., 2015), while it outperforms the DQN method (Mnih et al., 2015) by a large margin. We\nbelieve that our method can be readily combined with other techniques developed for DQN, such\nas D-DQN (van Hasselt et al., 2015), prioritized experience replay (Schaul et al., 2016), dueling\nnetworks (Wang et al., 2015), and asynchronous methods (Mnih et al., 2016) to further improve the\naccuracy and training speed.\nIn Fig. 3 we illustrate the evolution of the score for our algorithm and the DQN approach for the 6\ngames ‘Frostbite,’ ‘Atlantis,’ ‘Zaxxon,’ ‘H.E.R.O,’ ‘Q*Bert,’ and ‘Chopper Command.’ We observe\nour method to achieve signiﬁcantly higher scores very early on. Importantly our technique increases\nthe gap between our approach and the DQN performance even during later stages of the training.\nWe refer the reader to the supplementary material for additional results and raw scores.\n6\nCONCLUSION\nIn this paper we proposed a novel program for deep Q-learning which propagates promising rewards\nto achieve signiﬁcantly faster convergence than the classical DQN. Our method signiﬁcantly outper-\nforms competing approaches even when trained on a small fraction of the data on the Atari 2600\ndomain. In the future, we plan to investigate the impact of penalty functions, advanced constrained\noptimization techniques and explore potential synergy with other techniques.\n8\nUnder review as a conference paper at ICLR 2017\nREFERENCES\nM. G. Bellemare, Y. Naddaf, J. Veness, and M. Bowling. The arcade learning environment: An evaluation\nplatform for general agents. J. of Artiﬁcial Intelligence Research, 2013.\nY. Bengio, A. Courville, and P. Vincent. Representation Learning: A Review and New Perspectives. PAMI,\n2013.\nD. P. Bertsekas and J. N. Tsitsiklis. Neuro-Dynamic Programming. Athena Scientiﬁc, 1996.\nC. Blundell, B. Uria, A. Pritzel, Y. Li, A. Ruderman, J. Z. Leibo, J. Rae, D. Wierstra, and D. Hassabis. Model-\nFree Episodic Control. In http://arxiv.org/pdf/1606.04460v1.pdf, 2016.\nG. E. Hinton, L. Deng, D. Yu, G. E. Dahl, A.-R. Mohamed, N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen, T. N.\nSainath, and B. Kingsbury. Deep neural networks for acoustic modeling in speech recognition: The shared\nviews of four research groups. IEEE Signal Processing Magazine, 2012.\nL. P. Kaelbling, M. L. Littman, and A. W. Moore. Reinforcement learning: A survey. JMLR, 1996.\nA. Krizhevsky, I. Sutskever, , and G. E. Hinton. Imagenet classiﬁcation with deep convolutional neural net-\nworks. In Proc. NIPS, 2012.\nS. Lange and M. Riedmiller. Deep auto-encoder neural networks in reinforcement learning. In Proc. Int. Jt.\nConf. Neural. Netw., 2010.\nY. LeCun, Y. Bengio, and G. E. Hinton. Deep learning. Nature, 2015.\nL.-J. Lin. Self-improving reactive agents based on reinforcement learning, planning and teaching. Machine\nLearning, 1992.\nV. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing Atari\nwith Deep Reinforcement Learning. In NIPS Deep Learning Workshop, 2013.\nV. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller, A. K.\nFidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran, D. Wierstra,\nS. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature, 2015.\nV. Mnih, A. P. Badia, M. Mirza, A. Graves, T. P. Lillicrap, T. Harley, D. Silver, and K. Kavukcuoglu. Asyn-\nchronous Methods for Deep Reinforcement Learning. In https://arxiv.org/abs/1602.01783, 2016.\nR. Munos, T. Stepleton, A. Harutyunyan, and M. G. Bellemare. Safe and efﬁcient off-policy reinforcement\nlearning. In Proc. NIPS, 2016.\nA. Nair, P. Srinivasan, S. Blackwell, C. Alcicek, R. Fearon, V. Panneershelvam A. De Maria, M. Suleyman,\nC. Beattie, S. Petersen, S. Legg, V. Mnih, K. Kavukcuoglu, and D. Silver. Massively Parallel Methods for\nDeep Reinforcement Learning. In https://arxiv.org/abs/1507.04296, 2015.\nI. Osband, C. Blundell, A. Pritzel, and B. Van Roy.\nDeep Exploration via Bootstrapped DQN.\nIn\nhttp://arxiv.org/abs/1602.04621, 2016.\nW. P. Powell. Approximate Dynamic Programming. Wiley, 2011.\nM. Riedmiller. Neural ﬁtted Q iteration - ﬁrst experiences with a data efﬁcient neural reinforcement learning\nmethod. In Proc. ECML, 2005.\nT. Schaul, J. Quan, I. Antonoglou, and D. Silver. Prioritized Experience Replay. In Proc. ICLR, 2016.\nD. Silver, A. Huang, C. J. Maddison, A. Guez, L. Sifre, G. van den Driessche, J. Schrittwieser, I. Antonoglou,\nV. Panneershelvam, M. Lanctot, S. Dieleman, D. Grewe, J. Nham, N. Kalchbrenner, I. Sutskever, T. Lillicrap,\nM. Leach, K. Kavukcuoglu, T. Graepel, and D. Hassabis. Mastering the game of Go with deep neural\nnetworks and tree search. Nature, 2016.\nI. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence learning with neural networks. In Proc. NIPS,\n2014.\nR. S. Sutton and A. G. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.\nS. Thrun and A. Schwartz. Issues in using function approxima- tion for reinforcement learning. In Proc.\nConnectionist Models Summer School, 1993.\nJ. N. Tsitsiklis and B. Van Roy. An analysis of temporal-difference learning with function approximation. 1997.\nH. van Hasselt. Double Q-learning. In Proc. NIPS, 2010.\nH. van Hasselt, A. Guez, and D. Silver.\nDeep Reinforcement Learning with Double Q-learning.\nIn\nhttps://arxiv.org/abs/1509.06461, 2015.\nZ. Wang, T. Schaul, M. Hessel, H. van Hasselt, M. Lanctot, and N. de Freitas. Dueling Network Architectures\nfor Deep Reinforcement Learning. In https://arxiv.org/abs/1511.06581, 2015.\nC. J. C. H. Watkins. Learning from delayed rewards. PhD thesis, University of Cambridge England, 1989.\nC. J. C. H. Watkins and P. Dayan. Q-learning. Machine Learning, 1992.\nP. Wawrzynski. Real-time reinforcement learning by sequential actor-critics and experience replay. Neural\nNetworks, 2009.\n9\nUnder review as a conference paper at ICLR 2017\nA\nSUPPLEMENTARY MATERIAL\nWe present our quantitative results in Table S1 and Table S2. We also illustrate the normalized score\nprovided in Eq. (6) over the number of episodes in Fig. S1.\n10\nUnder review as a conference paper at ICLR 2017\nGame\nRandom\nHuman\nDQN 200M\nOurs 10M\nAlien\n227.80\n6875\n3069\n1864\nAmidar\n5.8\n1676\n739.5\n565.67\nAssault\n222.4\n1496\n3359\n5142.37\nAsterix\n210\n8503\n6012\n5408.33\nAsteroids\n719.1\n13157\n1629\n1481.67\nAtlantis\n12850\n29028\n85641\n316766.67\nBank Heist\n14.2\n734.4\n429.7\n596\nBattle Zone\n2360\n37800\n26300\n30800\nBeam Rider\n363.9\n5775\n6846\n8069\nBowling\n23.1\n154.8\n42.4\n49.3\nBoxing\n0.1\n4.3\n71.8\n81.17\nBreakout\n1.7\n31.8\n401.2\n229.79\nCentipede\n2091\n11963\n8309\n4470.06\nChopper Command\n811\n9882\n6687\n6360\nCrazy Climber\n10781\n35411\n114103\n114146\nDemon Attack\n152.1\n3401\n9711\n5738.67\nDouble Dunk\n-18.6\n-15.5\n-18.1\n-10.07\nEnduro\n0\n309.6\n301.8\n672.83\nFishing Derby\n-91.7\n5.5\n-0.8\n5.27\nFreeway\n0\n29.6\n30.3\n31.3\nFrostbite\n65.2\n4335\n328.3\n3974.11\nGopher\n257.6\n2321\n8520\n4660\nGravitar\n173\n2672\n306.7\n346.67\nH.E.R.O\n1027\n25763\n19950\n19975\nIce Hockey\n-11.2\n0.9\n-1.6\n-3.43\nJamesbond\n29\n406.7\n576.7\n1088.33\nKangaroo\n52\n3035\n6740\n11716.67\nKrull\n1598\n2395\n3805\n9461.1\nKung-Fu Master\n258.5\n22736\n23270\n27820\nMontezuma’s Revenge\n0\n4376\n0\n23.33\nMs. Pacman\n307.3\n15693\n2311\n1805\nName This Game\n2292\n4076\n7257\n7314.67\nPong\n-20.7\n9.3\n18.9\n19.4\nPrivate Eye\n24.9\n69571\n1788\n342.37\nQ*Bert\n163.9\n13455\n10596\n12355\nRiver Raid\n1339\n13513\n8316\n8028.33\nRoad Runner\n11.5\n7845\n18257\n29346.67\nRobotank\n2.2\n11.9\n51.6\n34.5\nSeaquest\n68.4\n20182\n5286\n4070\nSpace Invaders\n148\n1652\n1976\n995\nStar Gunner\n664\n10250\n57997\n16653.95\nTennis\n-23.8\n-8.9\n-2.5\n-1\nTime Pilot\n3568\n5925\n5947\n5423.33\nTutankham\n11.4\n167.6\n186.7\n232\nUp and Down\n533.4\n9082\n8456\n14406\nVenture\n0\n1188\n380\n286.67\nVideo Pinball\n16257\n17298\n42684\n74873.2\nWizard of Wor\n563.5\n4757\n3393\n4716.67\nZaxxon\n32.5\n9173\n4977\n10598\nTable S1: Raw Scores across 49 games, using 30 no-op start evaluation (5 minutes emulator time,\n18000 frames, ϵ = 0.05). Results of DQN is taken from Mnih et al. (2015)\n11\nUnder review as a conference paper at ICLR 2017\nGame\nDQN 200M\nOurs 10M\nAlien\n42.74%\n24.62%\nAmidar\n43.93%\n33.52%\nAssault\n246.27%\n386.31%\nAsterix\n69.96%\n62.68%\nAsteroids\n7.32%\n6.13%\nAtlantis\n449.94%\n1878.60%\nBank Heist\n57.69%\n80.78%\nBattle Zone\n67.55%\n80.25%\nBeam Rider\n119.79%\n142.39%\nBowling\n14.65%\n19.89%\nBoxing\n1707.14%\n1930.24%\nBreakout\n1327.24%\n757.77%\nCentipede\n62.99%\n24.10%\nChopper Command\n64.78%\n61.17%\nCrazy Climber\n419.50%\n419.67%\nDemon Attack\n294.22%\n171.95%\nDouble Dunk\n16.13%\n275.16%\nEnduro\n97.48%\n217.32%\nFishing Derby\n93.52%\n99.76%\nFreeway\n102.36%\n105.74%\nFrostbite\n6.16%\n91.55%\nGopher\n400.43%\n213.36%\nGravitar\n5.35%\n6.95%\nH.E.R.O\n76.50%\n76.60%\nIce Hockey\n79.34%\n64.22%\nJamesbond\n145.00%\n280.47%\nKangaroo\n224.20%\n391.04%\nKrull\n276.91%\n986.59%\nKung-Fu Master\n102.38%\n122.62%\nMontezuma’s Revenge\n0%\n0.53%\nMs. Pacman\n13.02%\n9.73%\nName This Game\n278.31%\n281.54%\nPong\n132%\n133.67%\nPrivate Eye\n2.54%\n0.46%\nQ*Bert\n78.49%\n91.73%\nRiver Raid\n57.31%\n54.95%\nRoad Runner\n232.92%\n374.48%\nRobotank\n509.28%\n332.99%\nSeaquest\n25.94%\n19.90%\nSpace Invaders\n121.54%\n56.31%\nStar Gunner\n598.10%\n166.81%\nTennis\n142.95%\n153.02%\nTime Pilot\n100.93%\n78.72%\nTutankham\n112.23%\n141.23%\nUp and Down\n92.68%\n162.38%\nVenture\n31.99%\n24.13%\nVideo Pinball\n2538.62%\n5630.76%\nWizard of Wor\n67.47%\n99.04%\nZaxxon\n54.09%\n115.59%\nTable S2: Normalized results across 49 games, using the evaluation score given in Eq. (6)\n12\nUnder review as a conference paper at ICLR 2017\nFigure S1: Convergence of mean and median of normalized percentages on 49 games.\n13\n",
  "categories": [
    "cs.LG",
    "stat.ML"
  ],
  "published": "2016-11-05",
  "updated": "2016-11-05"
}