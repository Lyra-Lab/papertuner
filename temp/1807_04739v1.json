{
  "id": "http://arxiv.org/abs/1807.04739v1",
  "title": "When deep learning meets security",
  "authors": [
    "Majd Latah"
  ],
  "abstract": "Deep learning is an emerging research field that has proven its effectiveness\ntowards deploying more efficient intelligent systems. Security, on the other\nhand, is one of the most essential issues in modern communication systems.\nRecently many papers have shown that using deep learning models can achieve\npromising results when applied to the security domain. In this work, we provide\nan overview for the recent studies that apply deep learning techniques to the\nfield of security.",
  "text": "When deep learning meets security\nMajd Latah∗\nDepartment of Computer Science\nOzyegin University\nlatahmajd@gmail.com\nAbstract\nDeep learning is an emerging research ﬁeld that has proven its effectiveness towards deploying more\nefﬁcient intelligent systems. Security, on the other hand, is one of the most essential issues in modern\ncommunication systems. Recently many papers have shown that using deep learning models can achieve\npromising results when applied to the security domain. In this work, we provide an overview for the\nrecent studies that apply deep learning techniques to the ﬁeld of security.\nI.\nIntroduction\nMachine learning techniques have proven to be very\nuseful in networking [1] in general and security related\ntopics in particular [2,3,4]. Deep learning [5-7], on the\nother hand, has improved the state-of-the-art for many\nmachine learning tasks such as speech recognition, objec-\ntion detection and natural language understanding. The\nmain advantage is that this approach allows learning\nvery complex functions by a general-purpose learning\napproach [5]. It is worth noting that we exclude deep\nintrusion detection systems from this study due to the\nfact that many other researchers have already conducted\na similar survey to cover that particular subject [8,9].\nII.\nDeep learning in security\ni.\nMalware Detection\nTobiyama et al. [10] proposed malware process detec-\ntion based on process behavior. The authors used long\nshort term memory (LSTM) for feature extraction and\nconvolutional neural network (CNN) for classiﬁcation. A\nprocess behavior is a sequence of API calls. The features\nwere extracted from the process behavior log ﬁles which\nwere transferred to an image that contains local features.\nTheses local features mostly represents the process activ-\nities. Therefore, one can apply CNN in order to capture\nthese local features and correctly classify these images.\n∗Corresponding Author\nAn overview of the proposed method in [10] is shown\nin Figure 1. In the experimental study the authors used\n81 malware process log ﬁles and 69 benign process log\nﬁles for the training and validation stages. The authors\nexecuted the malware ﬁles in the Cuckoo Sandbox and\ntraced the process behavior in order to determine the\nproduced and injected processes. The authors also vali-\ndated the classiﬁer with 5-fold cross validation. The best\nresult (AUC= 0.96) achieved when the feature image size\nwas 30x30.\nFigure 1: Overview of the proposed deep learning approach in [10]\nRhode et al. [11] investigated the possibility of pre-\ndiction whether an executable is malicious or not based\non behavioural data. The study showed that the model\nachieved high level of accuracy (94%) based only on\nthe ﬁrst 5 seconds of the ﬁle execution using 3000 ran-\nsomware samples without prior exposure to these sam-\n1\narXiv:1807.04739v1  [cs.CR]  12 Jul 2018\nMajd Latah - When deep learning meets security\nples. In addition, the model achieved an accuracy of\n96% in less than 10 seconds. The selected features were\n10 continuous machine activity data metrics instead of\nusing categorical API calls. Due to the fact that API calls\ncan be manipulated which may lead to incorrect classi-\nﬁcation for the input samples. In addition, continous\ndata allows a large number of states to be represented\nin a small vector. As shown in Figure 2, Cuckoo Sand-\nbox was used in order to collect activity data of Portable\nExecutable (PE) samples. The collected features are: sys-\ntem CPU usage, user CPU use, packets sent, packets\nreceived, bytes sent, bytes received, memory use, swap\nuse, the total number of processes currently running and\nthe maximum process ID assigned. The authors used\ngated recurrent unit (GRU) in stead of LSTM cells due to\ntheir training speed. The authors stated that the model\nshould be re-trained regularly with newly discovered\nsamples, which may lead to adjustments in the proposed\narchitecture too.\nFigure 2: Overview of the proposed deep learning model in [11]\nChen et al. [12] proposed, HeNet, a hierarchical en-\nsemble neural network based on control ﬂow charac-\nterization of program execution. As shown in Figure\n3, HeNet consists of a low-level behavior model and a\ntop-level ensemble model. HeNet was tested against\nROP attacks against Adobe Reader 9.3 in Windows R7 32\nbit. The dataset used in the experimental study consists\nof 348 benign and 299 malicious PDF samples. HeNet\nachieved high level of accuracy (100%) and zero level of\nfalse positives (0%). In addition to a higher classiﬁcation\naccuracy when compared to traditional machine learning\nalgorithms.\nHardy et al. [13] proposed a malware detection model\nbased on stacked AutoEncoders (SAEs). The model uses\nWindows API calls produced from the collected PE ﬁles.\nAs shown on Figure 4, the PE parser is used to extract\nthe Windows API calls from each ﬁle. The API query\ndatabase, converts the API calls to a 32-bit representation\nFigure 3: Overview of the proposed deep learning model in [12]\nfor the corresponding API functions. Thereafter, the SAE\nis used in order to perform feature learning, ﬁne-tuning\nand malware detection. The experimental study con-\nducted on large dataset collected from Comodo Cloud\nSecurity Center. The dataset contained 50000 ﬁle sam-\nples, where 22500 are malware, 22500 are benign ﬁles,\nand 5000 are unknown. The proposed model outper-\nformed ANN, SVM, NB, and DT in malware detection\nwith 96.85% level of accuracy.\nHou et al. [14], proposed an Android malware detec-\ntion framework based on Linux kernel system calls and\nstacked AutoEncoders (SAEs). A new dynamic analy-\nsis method named Component Travelsal was introduced\nfor automatically execution of the code routines of each\ngiven Android app. In order to capture the relationships\namong the system calls, a weighted directed graph was\nconstructed where each graph node represents a sys-\ntem call and its size indicates its frequency, whereas a\ndirected edge indicates the sequential ﬂow of system\ncalls made and includes a weight that implies the fre-\nquency the successor node called after the predecessor\n2\nMajd Latah - When deep learning meets security\nFigure 4: Overview of the proposed deep learning model in [13]\nnode. Each node with its weight, each edge with its\nweight, as well as the in-degree and out-degree of each\nof the nodes is used as the input feature for the pro-\nposed deep learning model. The experimental study\nwas conducted on large dataset collected from Comodo\nCloud Security Center. The dataset contains 3000 an-\ndroid apps, half of which are benign, while the other\nhalf are malicious. Compared with traditional machine\nlearning methods, the detection performance is enhanced\nby using deep learning framework with a high level of\naccuracy (93.68%).\nYuan et al. [15], proposed, DroidDetector, an online\ndeep-learning based Android malware detection engine.\nThe authors conducted static and dynamic analyses to\nextract features from each app. The extracted features\nfall into three main categories: (1) required permissions,\n(2) sensitive APIs and (3) dynamic behaviors. DroidDe-\ntector achieved 96.76% detection accuracy, which out-\nperforms traditional machine learning techniques. In\nthe static phase includes parsing the two ﬁles Android-\nManifest.xml and classes.dex in order to obtain a total\nof 120 permissions required by the app. The dynamic\nFigure 5: Overview of the proposed deep learning model in [14]\nphase includes running each app in DroidBox in order\nto execute a dynamic taint analysis and monitor a total\nof 13 of the app actions. As shown in Figure 6, the deep\nlearning model used in this study consists of two phases,\nthe unsupervised pretraining phase and supervised back-\npropagation phases. the pre-training phase, the Deep\nBelief Networks (DBN) is hierarchically built by stacking\na number of Restricted Boltzmann Machines (RBM). In\nthe back-propagation phase, the pre-trained DBN was\ntuned with labeled samples in a supervised way. The\nexperimental study was conducted on three public app\nsets. The ﬁrst benign app set was randomly crawled\nfrom the Google Play Store and contains a total of 20000\napps. The other two malicious app sets were respectively\ncollected from the Contagio Community (there are only\nabout 400 apps) and Genome Project (including 1260\nmalicious apps).\nHuang and Stokes [16] proposed, MtNet, a multi-task\ndeep learning malware classiﬁcation architecture which\nis trained for two tasks including binary classiﬁcation\nwhich predicts whether an unknown ﬁle is malicious\nor benign and 100-class family classiﬁcation which pre-\ndicts if the ﬁle belongs to one of 98 important families, a\n3\nMajd Latah - When deep learning meets security\nFigure 6: Overview of the proposed deep learning model in [15]\ngeneric malware class, or the benign class. The authors\nused low-level features extracted from dynamic analysis\nof the ﬁle as input for the training stage. These features\nare a sequence of application programming interface\n(API) call events plus their parameters and a sequence of\nnull-terminated objects recovered from system memory\nduring emulation. The ﬁnal number of selected features\nwas reduced to 50000 based on mutual information fea-\nture selection. Training a neural network with this large\ninput dimension is computationally intensive. Therefore,\nthe authors used random projection technique in order\nto reduce the data size. MtNet trained and tested on\nan extremely large dataset consisting of 6.5 million, 2.85\nmillion examples were extracted from malicious ﬁles and\n3.65 million from benign ﬁles. The set of malicious ﬁles\nhas 1.3 million belonging to the 98 malware families and\n1.55 million from the generic malware class. A set of 4.5\nmillion samples were used for training and another set\nof 2.0 million for a hold out test set. The experimental\nresults showed that MtNet achieved a binary malware\nerror rate of 0.358% and family error rate of 2.94%. The\nmulti-task learning improved the classiﬁcation results\nand showed low false positive rates (under 0.07%).\nAzmoodeh et al. [17], proposed a deep Eigenspace\nlearning approach to classify malicious and bening IoT\napplications. They extracted OpCode sequence of 1078\nbenign and 128 malware from ARM compatible IoT appli-\ncations. The selected features (OpCodes) of each sample\nare converted into a graph which is for classiﬁcation\nbased on deep convolutional networks. They used Obj-\ndump in order to extract the OpCodes. Thereafter, one\ncan use n-gram Op-Code sequence to classify malware\nusing their disassembled codes. In addition, they pro-\nposed class-wise information gain to overcome the prob-\nlem of imbalanced datasets and select the top 82 features.\nAs shown in Figure 8, the proposed approach consists of\n2 phases: (1) OpCode-Sequence Graph Generation phase\nFigure 7: Overview of the proposed multi-task deep learning mal-\nware classiﬁcation architecture in [16]\nand (2) Deep Eigensapce Learning phase. Eigensapce\nlearning was proposed due to the fact that Eigenvectors\nand eigenvalue are two main components in the graph’s\nspectrum. The ﬁrst two eigenvectors and eigenvalues of\nthe samples are used as input values for the model. The\nproposed system achieved an accuracy of 98.37% and\na precision rate of 98.59%. In addition to, the ability to\nmitigate junk code insertion attacks.\nFigure 8: Overview of the proposed method in [17]\nKolosnjaji et al. [18], proposed a classiﬁcation of mal-\nware system call sequences based on convolutional and\nrecurrent network layers. As shown in Figure 9, the\nauthors combined convolutional and recurrent layers in\none neural network in which the convolutional layer is\nused for feature extraction. The input of the system is\n4\nMajd Latah - When deep learning meets security\n60 distinct system calls. The dataset used in study was\ncollected from three different sources: Virus Share, Mal-\ntrieve and private collections. Sample labels are obtained\nusing services of VirusTotal where the hash of the mal-\nware ﬁle compared to the service’s database. Then the\nauthors performed clustering on the signatures from dif-\nferent antivirus programs in order to obtain ground truth\nclasses from the resulting clusters where these clusters\ncontain 4753 malware samples. The experimental study\nshowed that the proposed approach outperformed the\ntraditional machine learning approaches and achieved\nan average of 85.6% on precision and 89.4% on recall.\nFigure 9: Overview of the proposed deep learning model in [18]\nRigaki and Garcia [19], showed that malware behav-\nioral patterns can be modiﬁed using GANs in order\nto mimic Facebook chat. The real-life testing scenario\nwas developed using the Stratosphere behavioral IPS in\na router, whereas the malware and the GAN were de-\nployed in the local network, and the command & control\nserver was deployed in the cloud. The authors used\nan open source Remote Access Trojan (RAT), called Flu,\nwhich was modiﬁed in order to receive the input from\nthe generator and adapt its behavior accordingly. Flu\ninquires the GAN using the HTTP API, which in turn\nreply with three parameters: total byte size, duration\nof the next network ﬂow, and time delta between the\ncurrent ﬂow and the next one.\nii.\nBotnet Detection\nBotshark [20] is a deep learning-based approach for bot-\nnet trafﬁc analyzing from both centralized and P2P bot-\nnets. Botshark consists of two deep structures where\nthe ﬁrst layer employs stacked Autoencoders for feature\nextraction and the second layer uses CNNs in order to\ntrain a classiﬁer for botnet detection. The authors used\nnetwork trafﬁc from ISCX dataset [21] which includes\n44.97% malicious ﬂows from 16 different centralized and\ndecentralized botnet topologies as well as normal traf-\nﬁc. The authors extracted NetFlows from network trafﬁc\nusing the Argus [22] tool. The extracted features con-\ntain: (1) byte-based features, (2) time-based features, (3)\npacket-based features. The experimental study showed\n0.91% true positive rate with 0.13% of false positive rate.\nThe authors of [23] used LSTM approach to model the\nbehavior of network trafﬁc as a sequence of states that\nchanges over time. The authors used LSTM approach to\nmodel the behavior of network trafﬁc as a sequence of\nstates that changes over time. The behavior of a connec-\ntion is computed based on three features of each ﬂow:\nsize, duration and periodicity. Then, assigning to each\nﬂow a state symbol based on the extracted features and\nan assignment strategy. Finally, each connection will\nhave its own string of symbol used for represents its be-\nhavior. The proposed LSTM architecture was evaluated\nagainst two different datasets where the ﬁrst one was\nused for training and the second one was used for test-\ning purpose. The authors used sampling approach for\ndealing with the imbalanced datasets. They also studied\nthe optimal length of connection states required for the\ninput layer in LSTM and consequently the best results\nwere achieved by 25 connection states. The LSTM model\nshowed 0.809% attack detection rate with 0.03% of false\nalarm rate when tested on the second dataset. The ex-\nperimental results showed that this approach was able\nto detect TCP based malicious connections. However,\nit failed in identifying most of the HTTP and HTTPS\ntrafﬁc. In addition to some of SMTP (SPAM) trafﬁc. A\nsolution for this problem, is observe the network trafﬁc\nacross multiple layers of the network and monitor the\nsequences of bot activities together which possibly can\nbe merged based on a context and aim [24].\nIn [25], Yin et al. used generative adversarial networks\n(GANs) for generating ’fake’ samples in order to expand\nthe number of labeled samples where a 3-layer LSTM\nnetwork was used as generator and the discriminator was\nreplaced with a botnet detector. The authors selected\n16 ﬂow-based features.\nThe experimental study was\nconducted on ISCX botnet dataset. The false positive rate\nof the GAN-based model was decreased from 19.19% to\n15.59%.\nTran et al. [26] proposed a novel LSTM approach in\norder to detect modern sophisticated botnets that em-\nploy domain generation algorithm (DGA) to generate\na large number of domains that can be used in order\nto communicated with Command and Control (C&C)\n5\nMajd Latah - When deep learning meets security\nserver. DGA classiﬁcation can be seen as a multiclass\ntask [25], which can be either retrospective or real-time\nmanner. The real time detection which is mainly based\non the domain name and linguistic features. This is\nmuch difﬁcult due to the fact that linguistic features it\ncan be bypassed by the malware author [27]. In general,\nLSTM is sensitive to the multiclass imbalance problem.\nIn other words, it is naturally biased towards the preva-\nlent classes, which results in an inability of detecting the\nuncommon other DGA families [26]. The new proposed\nalgorithm adopts the cost-sensitivity principle [28] in or-\nder to target the class imbalance problem, by making the\nlearning biased towards the small classes. The authors\nmodiﬁed the backward pass (i.e. the error computation)\nof the original LSTM. This new algorithm has showed\nan enhancement of 7% in terms of macro-averaging re-\ncall, precision and F1-score with respect to the origi-\nnal LSTM and other state-of-the-art solutions. The cost-\nsensitive LSTM, however, reduced the accuracy on the\nprevalent non-DGA class. It is also worth mentioning\nthat cost-sensitive LSTM is superior to RUSBoost, over-\nsampling and Threshold-moving methods and achieved\nmuch higher macro-averaging F1-score with respect to\nHMM, C5.0, LSTM, the cost-sensitive SVM, cost-sensitive\nC4.5 and Weighted Extreme Learning Machine on the\nmulticlass imbalanced dataset [26].\nOn the other hand, in the context of social bot detec-\ntion for social media platforms, traditional deep learning\ntechniques for text classiﬁcation depended mainly on\nonly textual features [28,29]. However, employing addi-\ntional features can be more efﬁcient and shows better\nresults. In [29] deep neural network based on contex-\ntual (LSTM) architecture that exploits both content and\nmetadata in order to detect social bots at the tweet level.\nContextual LSTM is a natural language processing (NLP)\nmodel based on deep learning paradigm. The dataset\n[30] includes over 8386 accounts and 11834866 tweets.\nThe authors used both 10 account-level features for the\nﬁrst level and 6 tweet level features for the second level.\nThis approach showed a high level of accuracy (> 99%\nAUC) for user-level detection.\niii.\nMalicious Code Detection\nHendler et al. [31] used deep learning model for detect-\ning malicious PowerShell commands based on character-\nlevel convolutional neural networks. The authors used a\nlarge dataset which consists of 66388 distinct PowerShell\ncommands; 6290 labeled as malicious and 60098 labelled\nFigure 10: Overview of the proposed method in [26]\nas benign. The authors treated the command as a raw sig-\nnal at character level and applied to it a one dimensional\nCNN for text classiﬁcation task. The input feature length\nis 1,024, therefore if a command is longer than that it will\nbe truncated. The best performance was achieved by an\nensemble detector that combines a traditional NLP-based\nclassiﬁer with a CNN-based classiﬁer.\nWang et al. [32], used stacked denoising auto-encoders\nin order to extract high-level features from JavaScript\ncode. Denoising auto-encoder is an extension of tradi-\ntional auto-encoders, which can reconstruct the inputs\nfrom a noisy corrupted data by minimizing the recon-\nstruction loss. The JavaScript code was converted to\nbinary feature vectors. As shown in Figure 12, a logistic\nregression classiﬁer is applied to the output of the last\nhidden layer of the auto-encoder in order to classify the\nJavaScript code to the appropriate class. The authors\nevaluated our model on a large dataset, which contains\nover 27000 samples. For dimensionality reduction the\nauthors used sparse random projection method to reduce\ntarget dimensionality which resulted in 480 dimensional-\nities. The experimental study showed that the proposed\nmodel can attain a high level of accuracy (95%) with a\nfalse positive rate less than 4.2%. The limitation of the\n6\nMajd Latah - When deep learning meets security\nFigure 11: Overview of the proposed CNN architecture in [31]\nmodel proposed in [32] is the long training time. How-\never, it has a high-speed testing time. In addition, the\nproposed method outperformed other traditional ma-\nchine learning algorithms in terms of precision, recall,\nf-measure, RMSE and testing time.\nFigure 12: Overview of the proposed approach in [32]\nSaxe and Berlin [33] proposed, eXpose, a convolutional\nneural network approach for detecting malicious URLs,\nﬁle paths and registry keys. The training dataset used\nin this research consists of a total of 14788254 instances:\n8332360 benign and 6455894 malicious samples whereas\nthe testing dataset consists of a total of 11531955 in-\nstances: 10121981 benign and 1409974 malicious samples.\nThe authors used n-gram feature extractor and manually\nextracted features. These features were randomly hashed\ninto 1024-dimensional vector. Thereafter, they were fed\ninto a deepMLP model. eXpose outperformed manual\nfeature extraction approaches, achieving a 5%-10% de-\ntection rate gain at 0.1% false positive rate compared to\nthese baselines.\nIII.\nConclusion\nThis paper gives an overview of the potential of deep\nlearning techniques in the security ﬁeld. We mainly ob-\nserved the high accuracy and efﬁciency of deep learning\nmodels in malware and botnet detection. In addition to\ntheir application in malicious code detection. These mod-\nels showed a signiﬁcant improvement when compared\nto tradition machine learning approaches. Therefore,\nwe conclude that these models will have an increased\nadoption in modern security solutions and applications.\nReferences\n[1] Latah, M., Toker, L.: ‘Artiﬁcial Intelligence Enabled\nSoftware Deﬁned Networking: A Comprehensive\nOverview’, 2018, arXiv preprint arXiv:1803.06818.\n[2] Xiao, L., Wan, X., Lu, X., Zhang, Y. Wu, D.: ‘IoT Se-\ncurity Techniques Based on Machine Learning’,2018,\narXiv preprint arXiv:1801.06275.\n[3] Li, J., Zhao, Z., Li, R.: ‘A Machine Learning Based\nIntrusion Detection System for Software Deﬁned 5G\nNetwork’, IET Networks, 2018, 7,(2), pp. 53-60. DOI:\n10.1049/iet-net.2017.0212\n[4] Mishra, P., Varadharajan, V., Tupakula, U. Pilli, E.S.:\n‘A Detailed Investigation and Analysis of using Ma-\nchine Learning Techniques for Intrusion Detection’,\nIEEE Communications Surveys & Tutorials, 2018,\nDOI: 10.1109/COMST.2018.2847722\n[5] LeCun, Y., Bengio, Y., Hinton, G.: ‘Deep learn-\ning. nature’, 2016, 521(7553), pp. 436-444, DOI:\n10.1038/nature14539\n[6] Deng, L.: ‘A tutorial survey of architectures, algo-\nrithms, and applications for deep learning’, APSIPA\nTransactions on Signal and Information Processing,\n2014, 3,(e2), pp. 1-19. DOI: 10.1017/atsip.2013.9\n[7] Deng, L., Yu, D.:\n‘Deep learning:\nmethods\nand applications. Foundations and Trends in Sig-\nnal Processing’, 2014, 7,(3â ˘A¸S4), pp.197-387. DOI:\n10.1561/2000000039\n7\nMajd Latah - When deep learning meets security\n[8] Kwon, D., Kim, H., Kim, J., Suh, S.C., Kim, I. Kim,\nK.J.: ‘A survey of deep learning-based network\nanomaly detection’, Cluster Computing, 2017, pp.1-\n13. DOI: 10.1007/s10586-017-1117-8\n[9] Hodo, E., Bellekens, X., Hamilton, A., Tachtatzis, C.,\nAtkinson, R.: Shallow and deep networks intrusion\ndetection system: A taxonomy and survey, 2017,\narXiv preprint arXiv:1701.02145.\n[10] Tobiyama, S., Yamaguchi, Y., Shimada, H., Ikuse, T.\nand Yagi, T., 2016, June. ‘Malware detection with\ndeep neural network using process behavior. In\nIEEE 40th Annual Conference on Computer Soft-\nware and Applications, Atlanta, USA, June 2016, pp.\n577-582.\n[11] Rhode, M., Burnap, P., Jones, K., ‘Early-stage mal-\nware prediction using recurrent neural networks’,\nComputers & Security, 2018, 77, pp.578-594.\n[12] Chen, L., Sultana, S. and Sahita, R., ‘HeNet: A\nDeep Learning Approach on Intel Processor Trace\nfor Effective Exploit Detection, 2018, arXiv preprint\narXiv:1801.02318.\n[13] Hardy, W., Chen, L., Hou, S., Ye, Y. and Li, X., 2016,\nJanuary. ‘DL4MD: A deep learning framework for\nintelligent malware detection’. In Proceedings of the\nInternational Conference on Data Mining (DMIN).\nThe Steering Committee of The World Congress\nin Computer Science, Computer Engineering and\nApplied Computing (WorldComp), Las Vegas, USA,\nJuly 2016, pp. 61-67.\n[14] Hou, S., Saas, A., Chen, L., Ye, Y., 2016, October.\n‘Deep4maldroid: A deep learning framework for\nandroid malware detection based on linux kernel\nsystem call graphs’. In 2016 IEEE/WIC/ACM Inter-\nnational Conference on Web Intelligence Workshops\n(WIW), Omaha, USA, Oct. 2016, pp. 104-111.\n[15] Yuan, Z., Lu, Y. and Xue, Y., ‘Droiddetector: android\nmalware characterization and detection using deep\nlearning’, Tsinghua Science and Technology, 2016,\n21,(1), pp.114-123, DOI: 10.1109/TST.2016.7399288\n[16] Huang, W. and Stokes, J.W., 2016, July. ‘MtNet: a\nmulti-task neural network for dynamic malware\nclassiﬁcation’. In International Conference on Detec-\ntion of Intrusions and Malware, and Vulnerability\nAssessment, San Sebastian, Spain, July 2016, pp.\n399-418.\n[17] Azmoodeh, A., Dehghantanha, A., Choo, K.K.R.:\n‘Robust Malware Detection for Internet Of (Battle-\nﬁeld) Things Devices Using Deep Eigenspace Learn-\ning’, IEEE Transactions on Sustainable Computing,\n2018. DOI: 10.1109/TSUSC.2018.2809665\n[18] Kolosnjaji, B., Zarras, A., Webster, G. Eckert, C.:\n‘Deep learning for classiﬁcation of malware system\ncall sequences’. In Australasian Joint Conference on\nArtiﬁcial Intelligence, Hobart, Australia, December\n2016, pp. 137-149.\n[19] Rigaki, M., Garcia, S.: ‘Bringing a GAN to a Knife-\nﬁght: Adapting Malware Communication to Avoid\nDetection’. 1st deep learning and security workshop,\nSan Francisco, USA, May 2016.\n[20] Homayoun, S., Ahmadzadeh, M., Hashemi, S.,\nDehghantanha, A., Khayami, R.: ‘BoTShark: A\ndeep learning approach for botnet trafﬁc detection’,\nCyber Threat Intelligence, 2018, pp.137-153, DOI:\n10.1007/978-3-319-73951-9_7\n[21] Unb\niscx\nbotnet\ndataset,\n2017.\nhttp://www.unb.ca/cic/datasets/index.html\n[22] Argus-\nauditing\nnetwork\nactivity,\njan\n2017,\nhttp://qosient.com/argus\n[23] Torres, P., Catania, C., Garcia, S., Garino, C.G.: ‘An\nanalysis of recurrent neural networks for botnet de-\ntection behavior’. In Biennial Congress of Argentina\n(ARGENCON), Buenos Aires, Argentina, June 2016,\npp. 1-6.\n[24] Acarali, D., Rajarajan, M., Komninos, N., Herwono,\nI.: ‘Survey of approaches and features for the identi-\nﬁcation of HTTP-based botnet trafﬁc’, Journal of\nNetwork and Computer Applications, 2016, 76,\npp.1-15. DOI: 10.1016/j.jnca.2016.10.007\n[25] Yin, C., Zhu, Y., Liu, S., Fei, J., Zhang, H.: ‘An\nenhancing framework for botnet detection using\ngenerative adversarial networks’. In IEEE 2018 In-\nternational Conference on Artiﬁcial Intelligence and\nBig Data (ICAIBD), Chengdu, China, May 2018, pp.\n228-234.\n8\nMajd Latah - When deep learning meets security\n[26] Tran, D., Mac, H., Tong, V., Tran, H.A., Nguyen,\nL.G.:\n‘A LSTM based framework for handling\nmulticlass imbalance in DGA botnet detection’,\nNeurocomputing, 2018, 275, pp.2401-2413. DOI:\n10.1016/j.neucom.2017.11.018\n[27] Schiavoni, S., Maggi, F., Cavallaro, L. and Zanero,\nS.: ‘Phoenix: DGA-based botnet tracking and intelli-\ngence’. in: Proceedings of the International Confer-\nence on Detection of Intrusions and Malware, and\nVulnerability Assessment (DIMVA), Egham, UK,\nJuly 2014, pp. 192â ˘A¸S211 .\n[28] Kukar, M., Kononenko, I.: ‘Cost-sensitive learning\nwith neural networks’. In: Proceedings of the Thir-\nteenth European Conference on Artiﬁcial Intelli-\ngence (ECAI), Brighton, UK, Aug. 1998, pp. 445–449.\n[29] Kudugunta, S., Ferrara, E., ‘Deep Neural Net-\nworks for Bot Detection’, 2018, arXiv preprint\narXiv:1802.04289.\n[30] Ferrara, E., Varol, O., Davis, C., Menczer, F.\nand Flammini,\nA.:\n‘The rise of social bots’,\nCommun. ACM, 2016, 59, (7), pp. 96-104. DOI:\n10.1145/2818717\n[31] Hendler, D., Kels, S. Rubin, A.: ‘Detecting Mali-\ncious PowerShell Commands using Deep Neural\nNetworks’. In Proceedings of the 2018 on Asia Con-\nference on Computer and Communications Security,\nIncheon, Republic of Korea, June 2018, pp. 187-197.\n[32] Wang, Y., Cai, W.D., Wei, P.C.: ‘A deep learning\napproach for detecting malicious JavaScript code’,\nSecurity and Communication Networks, 2016, 9,\n(11), pp. 1520-1534. DOI: 10.1002/sec.1441\n[33] Saxe, J. and Berlin, K.: ‘eXpose: A character-level\nconvolutional neural network with embeddings for\ndetecting malicious URLs, ﬁle paths and registry\nkeys’, 2017, arXiv preprint arXiv:1702.08568.\n9\n",
  "categories": [
    "cs.CR",
    "cs.LG"
  ],
  "published": "2018-07-12",
  "updated": "2018-07-12"
}