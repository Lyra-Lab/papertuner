{
  "id": "http://arxiv.org/abs/1912.13156v2",
  "title": "Hiding Information in Big Data based on Deep Learning",
  "authors": [
    "Dingju Zhu"
  ],
  "abstract": "The current approach of information hiding based on deep learning model can\nnot directly use the original data as carriers, which means the approach can\nnot make use of the existing data in big data to hiding information. We\nproposed a novel method of information hiding in big data based on deep\nlearning. Our method uses the existing data in big data as carriers and uses\ndeep learning models to hide and extract secret messages in big data. The data\namount of big data is unlimited and thus the data amount of secret messages\nhided in big data can also be unlimited. Before opponents want to extract\nsecret messages from carriers, they need to find the carriers, however finding\nout the carriers from big data is just like finding out a box from the sea.\nDeep learning models are well known as deep black boxes in which the process\nfrom the input to the output is very complex, and thus the deep learning model\nfor information hiding is almost impossible for opponents to reconstruct. The\nresults also show that our method can hide secret messages safely,\nconveniently, quickly and with no limitation on the data amount.",
  "text": " \nHiding Information in Big Data based on Deep Learning \n \n          Dingju Zhu1,2 *       \n \n1.       School of Computer Science, South China Normal University, Guangzhou, China \n2.       School of Artificial Intelligence and Robot Education Industry, South China Normal University, Guangzhou, China \nCorresponding Author’s Email:   zhudingju@m.scnu.edu.cn \n \nAbstract: The current approach of information hiding based on deep learning model can not directly use the \noriginal data as carriers, which means the approach can not make use of the existing data in big data to hiding \ninformation. We proposed a novel method of information hiding in big data based on deep learning. Our method \nuses the existing data in big data as carriers and uses deep learning models to hide and extract secret messages in \nbig data. The data amount of big data is unlimited and thus the data amount of secret messages hided in big data \ncan also be unlimited. Before opponents want to extract secret messages from carriers, they need to find the \ncarriers, however finding out the carriers from big data is just like finding out a box from the sea.  Deep learning \nmodels are well known as deep black boxes in which the process from the input to the output is very complex, \nand thus the deep learning model for information hiding is almost impossible for opponents to reconstruct. The \nresults also show that our method can hide secret messages safely, conveniently, quickly and with no limitation \non the data amount. \n \nKeywords: information hiding, big data, deep learning  \n \n1. Introduction \nDeep learning has been used in many applications including disease treatment[1], resource management[2] \nand so on. Big data and cloud data bring many new challenges to many fields[3], especially to information \nsecurity[4,5]. \nInformation hiding is a way to hide confidential information in a large amount of information and not to let \nthe opponent find it. The data amount of the carrier is limited in the existing technology of information hiding, \nwhich means the data amount of secret message is limited for it is impossible to hide more data amount of secret \nmessage than the data amount of the carrier. If we make use of the data in big data as carriers, we can not only \nsolve this problem, but also can make information hiding more security, for before opponents want to extract \nsecret messages from carriers, they need to find the carriers, however finding out the carriers from big data is \njust like finding out a box from the sea. \nThe algorithm for information hiding is as important as the carrier. Deep learning is equivalent to a \ncomplex algorithm that cannot be explained explicitly. Deep learning models are well known as deep black \nboxes in which the process from the input to the output is very complex. If the deep learning model is used for \ninformation hiding, it may achieve unexpected results. Deep learning has been used to detect image \nsteganography in some researches [6-10], in which the deep learning model is used to determine whether or not \nan image is a steganographic image and can not be used to hide information. Deep learning has also been used \nto hide information in few researches.  \nIn the first existing method of hiding information based on deep learning, the deep learning model is used \nto encode the cover carrier and secret message into a stego carrier in the process of hiding information and \ndecode the secret message from the stego carrier in the process of extracting information. If the cover carrier is \nthe data stored in big data, the data has to be modified to the stego carrier, which will destroy the data in big data, \nor the stego carrier has to be insert into big data as new data, which can not make use of the existing data in big \ndata and will waste storage resources. In the second existing method of hiding information based on deep \nlearning, the deep learning model generates a cover carrier into which the secret message will be inserted to \nform the stego carrier, and thus the generated carriers are not the data in big data and will waste storage \nresources. In the third existing method of hiding information based on deep learning, the deep learning model \nuses the secret message to generage the stego carrier from which the secret message can be extracted[11]. The \nstego carrier is not the existing data in big data and thus has to be inserted into big data, which will waste \nstorage resources. There the existing methods are not suitable for hiding information in big data for not using the \ndata in big data as the carrier. \nIn our method, the original carrier and secret message are used as the input and expected output to train the \ndeep learning model, the original carrier is inputted into the trained deep learning model to obtain the output \nresult which is usually close to and has a little difference with the secret message, and then the original carrier \nand little difference can be used to recover the secret message by inputting the original carrier into the deep \nlearning model to obtain the output result which can be used to recover the secret message. Our method can \nmake use of the existing data in big data as the carrier and recover the secret message from the carrier based on \ndeep learning, and thus does not need to modify the data in big data or insert new data into big data. \n \nThere are some researches on information security in big data[12], however there is no existing research on \nhiding information in big data except a related research about hiding the secret message in a webpage that \ncontains all the information to describe the secret message. However, the related research can only be used to \nhide text messages, cannot be used to hide other types of messages such as images, audios and videos, and when \nthe secret message is larger than a web page, it is impossible to find a webpage that contains all the information \nto describe the secret message. What is more, the hiding algorithm of the related research is just a mapping \nbetween the text of the secret message and the text of the web page, so the secret message is easily extracted \nfrom the web page. Our method is based on big data which can hide various types of secret messages with no \nlimit on the data amount, and based on deep learning which can make the secret message very difficult to extract. \nCompared with the existing methods, our method of information hiding in big data based on deep learning \nhas three advantages. Firstly, the data in big data will not be destroyed; secondly, no more storage space is \noccupied; thirdly, the carrier is difficult to find by the opponent for the carrier is the existing data in big data, \nand if the carrier can not be found, the secret information is certainly impossible to be found; fourthly, the secret \nmessage with an infinite data amount can be hided for the carrier are from big data; finally, the deep learning \nmodel is very complicated and difficult to explain, so the hiding algorithm based on deep learning is hard to \nbreak by the opponent. \nThe main contributions of this paper includes: \n (1) The data in big data is used as the carrier for information hiding, which makes the carrier almost \nimpossible to find by the opponent, and also saves space for storing the carrier. \n(2) The training and testing process of deep learning model are used as the algorithm of hiding and \nextracting process, which makes the secret message almost impossible to be recovered for the extreme \ncomplexity of  deep learning model. \n (3)Our method is unbreakable when the sender and receiver share the deep learning model not through \nnetwork. \nThe rest of the paper is organized as follows. Section 2 reviews related work. Section 3 describes \nmethodology. Section 4 shows experiments and comparisons. Then Section 5 presents the results and discussion. \nFinally, we conclude this paper in Section 6. \n \n2 Review of related work  \nThere are a lot of paper provide methods for detecting image steganography based on deep learning[6-\n10,13-26]. The deep learning models are used to determine whether the image to be detected is a steganographic \nimage. However the methods can only be used for detecting image steganography, and can not be used for \ninformation hiding. Our paper provides a method for information hiding based on deep learning model.  \nGenerating steganographic images via adversarial training [27], hiding images in plain sight [28] and \nHiDDeN[29] researched on hide data with deep networks；deep neural networks for speech steganography [30] \nproposed the use of neural networks for speech steganography. The main idea of them is to get as input the \ncarrier and the message to generate the new encoded carrier, and then decode the message from the new \nencoded carrier. If the carrier is in big data, then the approach need to revise or copy the carrier in the big data to \nstore the new encoded carrier.  However, the big data is generally not allowed to be modified, and copying will \nmake the big data increase dramatically. And thus the method is not suitable when the carrier is in big data. The \nnew idea of our paper is to get as input the carrier in big data and expected output the message to train the model, \nand then recover the message from the carrier directly by the model, which does not need to modify the carrier, \nand thus is very suitable for big data.  \nSecure steganography based on generative adversarial networks (SSGAN) proposed the generation of \nimages cover and then use them to make insertion by modification[31]. Chaumont said the method seems to \ncomplicate the matters for it is more logic to choose natural images rather than generating images and then using \nthem to hide a message[32]. Another image steganography method via deep convolutional generative \nadversarial networks produces the cover images according to the secret information by generator without \nmodification and use extractor to extract information from stego images produced by generator[11]. The \nmethods are also not suitable for big data for the generated images will occupy the space in big data, and \nwhatsmore, the methods can not make use of the existing data such as images in big data. Our method can make \nuse of the existing data such as images in big data and thus no more space is occupied, and our method only \nneed one model rather than two models including the generator and the extractor.  \nEmbedding watermarks into deep neural networks protect the rights to shared trained models[33]. The \nmethod regards shared trained models as covers and has no relations with make use of the deep learning model \nto detect or hide secret information. \nIt can be seen that the existing methods of hiding using neural networks either need to modify the carrier or \ncreate a new carrier. Modifying the carrier is not feasible for big data, because third-party big data often does \nnot allow us to modify it. Creating a new carrier will generate new data which take up new storage space and \n \ncost more than using existing carriers. Our method can make use of the existing data in big data as the carrier \nand hide the information through the neural network including the deep learning model. \nThere are a lot of researches about information security in big data[12], however only one research related \nwith big data for hiding information or steganography is found. The approach to text steganography based on \nsearch in internet[34] can hide the secret message in a webpage that contains all the information to describe a \nsecret message. However, the method can only be used to hide text information, and cannot be used for hiding \nvarious other types of information such as images, audio, and video. And the method assumes that the secret \nmessage is relatively small, so when the secret message is complicated or large, for example when the secret \nmessage is larger than a web page, it is difficult to find a webpage that contains all the information to describe \nthe secret message, then the method will fail. Our method is applicable to the hiding of various types of \ninformation, and there is no limit to the size of the secret message in our method. \n \n \n3. Methodology \n \n3.1 Basic method of information hiding in big data based on deep learning \nAs shown in Figure 1, the method of hiding information is used in conjunction with the method of \nextracting information.  \n \n \nFigure. 1 Hiding and extracting information . \n \n(1)Hiding information in big data based on deep learning  \nAs shown in Figure 2, the process of hiding information in big data based on deep learning includes \naccepting the secret message, selecting the cover carrier, training the deep learning model, generating the stego \ncarrier, generating the secret difference, hiding information multiple times, generating the authorization and \nverification information, and transmitting the authorization and verification information. \n \n \nTraining the deep learning hiding \nmodel\nGenerating the stego carrier\nSelecting the cover carrier\nGenerating the secret difference\nGenerating the authorization and \nverification information \nAcceptting the secret information \nTransmitting the authorization and \nverification information \nHiding \ninformation \nmultiple \ntimes\n \nFigure.2 Hiding information . \n \nThe secret message inputted by the sender is accepted. The secret message refers to the information that the \nsender needs to hide, which can be uploaded by the sender through a browser, a client or the like. For example, \nthe secret message contains 100 sentences. The format of the secret message can be in various formats such as \ntext, audio and video. \nThe data in big data is selected as a cover carrier, and the location of the data in big data is obtained as the \nsecret location. The carrier is selected according to the secret message or a preset rule such as selecting a \nconsecutive block whose size is K from an inactive file in big data. If the cover carrier is consecutive, the secret \nlocation includes the start and end positions of the cover carrier; if the cover carrier is inconsecutive, the secret \nlocation includes multiple sets of start and end positions of consecutive data segments.  \nThe data with the same type of the cover carrier and the message with the same type of the secret message \nare used as the input and expected output to train the deep learning model for information hiding, and the trained \ndeep learning model is called the deep learning hiding model. The deep learning model can be CNN ,RNN and \nso on. The deep learning model is a kind of artificial neural network with little difference between the expected \noutput and the actual output after training. If the computing ability is sufficient, the deep learning model is \npreferred, but if the computing ability is not enough, the traditional artificial neural network such as BP neural \nnetwork can also be used instead of the deep learning model in our method. If the trained deep learning hiding \nmodel has existed, the model can be used directly. \nThe cover carrier in big data is inputted into the deep learning hiding model, and the output of the deep \nlearning hiding model is used as the stego carrier. Since the deep learning hiding model has been trained by the \ndata with the same type of the secret message as the expected output, when the cover carrier is input, the output \nof the deep learning hiding model has certainly the same type of the secret message.  \nThe difference between the secret message and the stego carrier is computed and taken as the secret \ndifference. The stego carrier has the same type of the secret message, and thus the stego carrier can be compared \nwith the secret message. The formula for computing the secret difference is the secret difference = f (the secret \nmessage, the stego carrier), where f is a function for computing the difference, and if the secret message and \nstego carrier are both numbers, the formula can be simplified as the secret difference = secret message - the \nstego carrier. \nThe above processes can be executed multiple times. Multiple cover carriers and secret locations are \nobtained, and multiple deep learning hiding models are trained by using the input data with the same type of the \ncover carriers and the expected output data with the same type of the secret message. The differences between \nthe secret message and the stego carriers are computed to obtain multiple secret differences. \n \nThe authorization information includes at least one set of secret difference, secret location, and parameters \nof the deep learning hiding model. The parameters of the deep learning hiding model include the type of neural \nnetwork, number of layers, number of nodes per layer, weight of each connection between nodes in each layer, \nand so on. If the secret location is sent to the receiver, the receiver can obtain the cover carrier from the secret \nlocation in big data. If the deep learning hiding model is sent to the receiver, the receiver can input the cover \ncarrier into the deep learning hiding model to compute out the stego carrier. If the secret difference is sent to the \nreceiver, the user can synthesize the secret message according to the stego carrier and the secret difference. The \nsecret difference, secret location, and deep learning hiding model are indispensable, and the receiver is \nimpossible to extract the secret message without any one of them.  \nThe partial data or the attribute information of the secret message is taken as the verification information \nand sent to the receiver. For example, the data in the last m bytes of the secret message or the number of bytes of \nthe secret message is used as the verification information. The receiver can verify whether or not the extracted \nsecret message is consistent with the verification information, which is very necessary for the cover carrier in \nbig data may change which will lead to the extracted secret message is wrong. When there are multiple sets of \nauthorization information, the secret message consistent with the verification information can be selected from \nthe multiple extracted secret messages.  \nThe authorization and verification information are sent to the receiver. \n \n(2)Extracting information in big data based on deep learning \nAs shown in Figure 3, the process of extracting information in big data based on deep learning includes \naccepting the authorization information, extracting the cover carrier, generating the stego carrier, generating the \nsecret message, extracting information multiple times,  synthesizing the secret message, and transmitting the \nsecret message. \n \nGenerating the stego carrier\nSynthesizing the secret message\nExtracting the cover carrier\nSelecting the secret information\nTransmitting the secret information \nAccepting the authorization and \nverification information \nExtracting \ninformation \nMultiple \ntimes\n \nFigure. 3 Extracting information. \n \nThe verification information and at least one set of the authorization information including the secret \ndifference, secret location, and parameters of the deep learning hiding model inputted by the receiver are \naccepted. The deep learning hiding model is automatically generated and configured according to the parameters. \nThe cover carrier is obtained from big data according to the secret location.The cover carrier is inputted \ninto the deep learning hiding model, and the output is used as the stego carrier. The secret message is \nsynthesized according to the stego carrier and the secret difference. When recovering the secret message, the \nsecret difference and the stego carrier are substituted into the formula the secret difference = F (secret message, \nthe stego carrier) to calculate the secret message. If the secret difference and the stego carrier are both numbers, \nthe formula can be simplified as  the secret message = the stego carrier + the secret difference. \nThe multiple sets of authorization information may be used to obtain multiple secret messages by executing \nthe above process multiple times. The secret message that is consistent with the verification information is \n \nselected from the multiple secret messages and transmitted to the receiver. The receiver can also view or \ndownload online through a browser, a client or the like. \n \n3.2 Parallel method of information hiding in big data based on deep learning \nParallel hiding and extracting is very necessary for the secret message which contains a very large amount \nof data, which can greatly speed up the process of hiding and extracting information \n \n(1) Hiding information in big data based on deep learning in parallel \nAs shown in Figure 4, the process of hiding information in parallel is based on the process of hiding shown \nin Figure 2.  Accepting the secret message further includes dividing the secret message; selecting the cover \ncarrier further includes selecting multiple cover carriers; training the deep learing hiding model further includes \ntraining deep learing hiding models;  generating the stego carrier further includes generating multiple stego \ncarrieres; generating the secret difference further includes generating multiple secret differences; generating the \nauthorization and verification information further includes generating multiple sets of authorization and \nverification information, and transmitting the authorization and verification information further includes \ntransmitting  multiple sets of authorization and verification information  \n \nTraining multiple deep learning hiding \nmodels\nGenerating multiple stego carriers\nSelecting multiple cover carriers\nGenerating multiple secret differences\nGenerating multiple sets of \nauthorization and verification \ninformation\nDividing the secret message\nTransmitting  multiple sets of \nauthorization and verification \ninformation\nHiding for\nmultiple \ntimes\n \nFigure. 4 Hiding information in parallel. \n \nThe secret message is split into P secret sub-messages, where P>=1, and the position number of each secret \nsub-messages in the secret message is called as the secret number. For example, there are 100 sentences in the \nsecret message and each sentence is divided into 100 strings. The position number of a string is 004006, which \nmeans the string is the sixth string in the fourth sentence. Hiding secret message after segmentation can furtherly \nimprove the security of information hiding, for the opponent can not recover the whole secret message even if \nhe recovers parts of the secret message. \nP cover carriers are selected from big data, and one-to-one correspondences between the P cover carriers \nand the P secret sub-messages are erected. The P cover carriers are located at P locations which can be storage \nlocations or paths or index numbers. The locations are obtained as the secret locations.  \nThe data with the same type of each of the cover carriers and the data with the same type of its \ncorresponding secret submessage are used as the input and expected output to train its corresponding deep \nlearning hiding model, and multiple deep learning hiding model are obtained. If the trained deep learning hiding \n \nmodels has existed, then the model can be used directly. Each of the cover carriers is inputted into its \ncorresponding deep learning hiding model, and the output is obtained as its corresponding stego carrier. \nThere are one-to-one correspondences between the secret sub-messages and the stego carriers, for there are \none-to-one correspondences between the cover carrieres and the secret sub-messages, and there are one-to-one \ncorrespondences between the cover carriers and the stego carriers. The difference between each of the secret \nsub-messages and its corresponding stego carrier is taken as its corresponding secret difference.  \nThe multiple sets of secret location, secret numbers, secret difference, and deep learning hiding model are \ntransmitted to the receiver, which can be used to generate the multiple secret sub-messages during the process of \nextracting information. \n \n(2) Extracting information in big data based on deep learning in parallel \nAs shown in Figure 5, the process of extracting information in parallel is based on the process of  \nextracting shown in Figure 3.  Accepting the authorization and verification information further includes \naccepting multiple sets of authorization and verification information; extracting the cover carrier further \nincludes extracting multiple cover carriers; and generating the stego carrier further includes generating multiple \nstego carriers; synthesizing the secret message further includes synthesizing multiple secret sub-messages and \nsynthesizing the secret message. \n \nGenerating multiple stego carriers\nSynthesizing multiple secret \nsubmessages\nExtracting multiple cover carriers\nSelecting the secret message\nTransmitting the secret message\nAccepting multiple sets of \nauthorization and verification \ninformation\nExtracting \ninformation\nMultiple \ntimes\nSynthesizing the secret message\n \nFigure. 5 Extracting information in parallel. \n \nMultiple sets of secret location, secret numbers,secret difference, and deep learning hiding model inputted \nby the receiver are accepted. Each of the cover carrier from big data is located and obtained through the secret \nlocations. Each of the cover carriers is inputted into its corresponding deep learning hiding model, and the \noutput is taken as its corresponding stego carrier. Each of the secret sub-messages is synthesized according to its \ncorresponding stego carrier and secret difference. The secret message is synthesized according to the secret sub-\nmessages and the secret numbers. \n \n3.3 Unbreakable method of information hiding in big data based on deep learning \nThe only approach to break our method is that the opponent obtains the authorization information and \nknows how to use our method to recover the secret message based on the authorization information. If not all \nparts of the authorization information are obtained by the opponent, the opponent is impossible to recover the \nsecret message for any part of the authorization information is indispensable for recovering the secret message. \nDifferent parts of the authorization information can be sent to the receiver through different channels at different \ntimes, which can greatly increases the difficulty of all parts of the authorization information being obtained by \nthe opponent. \n \nIn the process of hiding information, the secret difference can not be generated without the secret message, \nthe secret location is not dependent on the secret message, and the deep learning hiding model is not dependent \non the content of the secret message but the type of the secret message.  If the type of the secret message is \nknown ahead of time, the deep learning hiding model can be generated ahead of time, and the deep learning \nhiding model can be used for hiding all kinds of secret messages with the type. Therefore, the sender and \nreceiver can share the secret location or the deep learning hiding model ahead of time not through network but \nother approaches such as copy or express delivery. Then the sender and receiver can use the secret location or \nthe deep learning hiding model to hide and extract the secret message. Since only the secret difference are \ntransmitted on the network between the sender and the receiver, even if the opponent intercepts the secret \ndifference, the secret message cannot be recovered at all without the secret location or the deep learning hiding \nmodel, and thus the method is unbreakable for information hiding. \nEven if the secret location or the deep learning hiding model have to be shared between the sender and the \nreceiver through network, there are two methods to reduce the risk of network transmission being intercepted. \nThe first method is that the secret location or the deep learning hiding model is transmitted long before the \nsecret difference is transmitted. If the interval is enough long, the opponent will think the secret location or the \ndeep learning hiding model has no relation with the secret difference. The second method is that the \ntransmission of different parts of the authorization information in different directions. For example, the receiver \nsends the deep learning hiding model and secret location to the sender, and then the sender send the secret \ndifference to the receiver. The two methods can extremely reduce the possibility of the opponent to intercept \nand use together the different parts of the authorization information. \n \n4. Experiments and comparisons \n4.1 Experiments \nThe computer we used for hiding and extracting information has a 3.80GHZ CPU and a 4G memory, and \nthe trained deep learning hiding model we used can accept an input image and output a text. The process of \nhiding information with the trained deep learning hiding model takes only about 3 seconds, and the process of \nextracting information also takes only about 3 seconds.  \n  \nFigure. 6 Image in big data from the Internet. \n \nExperiment 1: The sender Alice needs to send \"Knife\" as the secret message to the receiver Bob. \nThe process of hiding information: The secret message \"Knife\" is inputted by Alice, and an image in big \ndata from the Internet is randomly downloaded. The image is shown in Figure 6, and the location of the image \nin big data is the url https://origin-thumbs.bigstockphoto.com/zh/image-4671121/stock-vector-树. A trained \ndeep learning model which can recognize more than one thousand objects is obtained as the deep learning \nhiding model. The image is inputted into the deep learning hiding model, and the output is “pot, flowerpot  \n” with a score of 0.74342. From the output we can see that the recognition result is actually wrong, but it does \nnot affect the effect of the experiment. By converting Ascii text to decimal, the output “pot, flowerpot” is \nconverted to the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116] and the secret \nmessage is converted into the array [107, 110, 105, 102, 101]. The lengthes of the two arrays are different, and \nthus in order to comparing the difference, the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, \n111, 116] is converted to the array [112, 111, 116, 44, 32] with the same length of the array of the secret \nmessage. The difference between the two arrays is calculated to obtain the array of the secret difference [-5, -1, -\n11, 58, 69]. The location of the image in big data, the parameters of the deep learning hiding model, and the \narray of the secret difference are sent to Bob through different channels. \nThe process of extracting information: Bob receives the location of the image in big data, the parameters of \nthe deep learning hiding model and the array of the secret difference. The deep learning hiding model is \nreconstructed according to the parameters. The image is downloaded from the location and inputted into the \ndeep \nlearning \nhiding \nmodel \nto \ncompute \nthe \noutput. \nThe \noutput \nis \n“pot, \nflowerpot  \n” \nwith \na \nscore \nof \n0.74342. \nThe \noutput \n“pot, \nflowerpot  \n” is converted into the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116] which needs to \nbe converted to the array  [112, 111, 116, 44, 32] with the same length of the array of the secret difference. The \narray of the output is added to the array of secret difference to get the array [107, 110, 105, 102, 101] which is \nconverted into the secret message \"Knife\" by decoding decimal number to  ascii text . \n \nExperiment 2: The sender Alice needs to send the secret message \"We will meet at the place we met last \nweek at 12 o'clock tomorrow morning.\" to the receiver Bob. \nThe process of hiding information: the secret message \"We will meet at the place we met last week at 12 \no'clock tomorrow morning \" is inputted by Alice. The image and the deep learning hiding model is same as the \nfirst experiment. The output of the deep learning hiding model is converted to the array [112, 111, 116, 44, 32, \n102, 108, 111, 119, 101, 114, 112, 111, 116], and the secret message is converted into the array [87, 101, 32, \n119, 105, 108, 108, 32, 109, 101, 101, 116, 32, 97, 116, 32, 116, 104, 101, 32, 112, 108, 97, 99, 101, 32, 119, \n101, 32, 109, 101, 116, 32, 108, 97, 115, 116, 32, 119, 101, 101, 107, 32, 97, 116, 32, 49, 50, 32, 111, 39, 99, \n108, 111, 99, 107, 32, 116, 111, 109, 111, 114, 114, 111, 119, 32, 109, 111, 114, 110, 105, 110, 103, 46]. In \norder to comparing the difference, the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116] \nis converted to the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44, \n32, 102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, \n116, 112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44, 32, 102, 108, 111, \n119, 101, 114, 112, 111, 116, 112, 111, 116, 44] with the same length of the array of the secret message. The \ndifference between the elements of two arrays is calculated to get the difference array [-25, -10, -84, 75, 73, 6, 0, \n-79, -10, 0, -13, 4, -79, -19, 4, -79, 0, 60, 69, -70, 4, -3, -22, -2, -13, -80, 8, -15, -80, -2, -15, 72, 0, 6, -11, 4, -3, -\n69, 5, -11, -10, -9, -80, -14, 0, -12, 17, -52, -76, 0, -80, -2, -6, -1, -12, -9, -80, 5, -5, 65, 79, 12, 6, 0, 0, -69, -5, -1, \n3, -6, -7, -1, -13, 2]. The location of the image in big data, the parameters of the deep learning hiding model, and \nthe array of the secret difference are sent to Bob through different channels. \nThe process of extracting information: Bob receives the location of the image in big data, the parameters of \nthe deep learning hiding model, and the array of secret difference. The image is downloaded from the location in \nbig data, and inputted into the deep learning hiding model to compute the output. The output is “pot, flowerpot  \n” with a score of 0.74342. The output is converted into the array [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, \n114, 112, 111, 116] which needs to be converted to the array  [112, 111, 116, 44, 32, 102, 108, 111, 119, 101, \n114, 112, 111, 116, 112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44, 32, \n102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116, \n112, 111, 116, 44, 32, 102, 108, 111, 119, 101, 114, 112, 111, 116, 112, 111, 116, 44] with the same length of \nthe array of the secret difference. The array of the output is added to the array of secret difference to get the \narray [87, 101, 32, 119, 105, 108, 108, 32, 109, 101, 101, 116, 32, 97, 116, 32, 116, 104, 101, 32, 112, 108, 97, \n99, 101, 32, 119, 101, 32, 109, 101, 116, 32, 108, 97, 115, 116, 32, 119, 101, 101, 107, 32, 97, 116, 32, 49, 50, \n32, 111, 39, 99, 108, 111, 99, 107, 32, 116, 111, 109, 111, 114, 114, 111, 119, 32, 109, 111, 114, 110, 105, 110, \n103, 46] which is converted into the secret message \" We will meet at the place we met last week at 12 o'clock \ntomorrow morning.\" by decoding decimal number  to  ascii text .  \n4.2 Comparison with existing work \nThe existing methods for detecting image steganography based on deep learning[6-10,13-26] can not be \nused in hiding secret messages such as \"Knife\" or \"We will meet at the place we met last week at 12 o'clock \ntomorrow morning.\" shown in our experiments. And the deep learning models in the existing methods in [6-\n10,13-26] can be used to determine whether the image to be detected is a steganographic image in most cases, \nbut can not work for the image used in our method. For example, although the secret messages are generated \nfrom the tree image by our deep learning model, the tree image used in our experiments is actually without any \nsecret messages, and thus the deep learning models in the existing methods in [6-10,13-26] can not detect image \nsteganography. This illustrates from another aspect that the information hidden by our method is difficult to \ndetect by the existing methods. \nThe existing methods such as generating steganographic images via adversarial training [27], hiding \nimages in plain sight [28], HiDDeN[29] and deep neural networks for speech steganography [30] can hide data \nwith deep networks or neural networks by getting as input the carrier and the message to generate the new \nencoded carrier, and then decoding the message from the new encoded carrier. Comparing with our experiments, \nthe existing methods need to get the tree image and the secret messages such as \"Knife\" or \"We will meet at the \nplace we met last week at 12 o'clock tomorrow morning.\" together as the input of the deep learning model for \nencoding, and the output of the deep learning model will be a new tree image hiding the secret messages \n\"Knife\" or \"We will meet at the place we met last week at 12 o'clock tomorrow morning.\" And then, the secret \nmessages \"Knife\" or \"We will meet at the place we met last week at 12 o'clock tomorrow morning.\" can be \ndecoded by the deep learning model for decoding. Although the existing methods in [27-30] can hiding secret \ninformation, the new tree image hiding the secret messages can be detected as image steganography by the \nexisting methods in [6-10,13-26], however the tree image used for hiding the secret messages in our method can \nnot be detected by the existing methods in [6-10,13-26], and thus the secret messages hided by our method are \nmore difficult to be detected than the existing methods in [27-30]. What’ more, in our experiment, the tree \nimage is obtained from the internet big data, if we use the existing methods in [27-30], we have to revise the tree \nimage in the big data to the new tree image containing the secret messages or copy the new tree image into the \nbig data to store the new encoded carrier.  However, the internet big data is generally not allowed to be modified, \n \nfor the tree image is obtained through a URL, and we have no permission to modify the content of the image \ncorresponding to the URL. And copying the new tree image into the Internet big data and generate a new URL \nalso need the permission and it is impossible for ordinary users to have such permission. Even if we have the \npermission, the copied new tree image will make the big data increase dramatically when there are many new \ncarriers are copied into the big data, which is not good for saving big data storage resources. Our methods as \nshown in our experiments get the tree image obtained from big data as input of our deep learning model to hide \nthe secret messages and then can decode the secret messages by use the same tree image as the input of our deep \nlearning model, and thus no more new carriers are generated. So our method does not require any modification \nto the carrier in big data or write any carrier into big data. Therefore, our method can effectively use big data \nresources without causing any damage and pressure on big data resources. However the existing methods in [27-\n30] can not work when the big data is not permitted to change. \nSecure steganography based on generative adversarial networks proposed the generation of image coverers \nfor insertion of secret information[31]. Another image steganography method via deep convolutional generative \nadversarial networks produces the cover images according to the secret information [11]. Although the existing \nmethods in [31] and [11] have not used of the tree image in the big data as shown in our experiments, the \nexisting methods in [31] and [11] have also generated the new image as the new coverer which has to be copied \ninto big data, which will lead to the waste of big data storage space, and thus the existing methods in [31] and \n[11] is essentially the same as the existing methods in [27-30]. Moreover, the methods in [31] and [11] are not \nas good as those existing methods in [27-30] for they cannot make use of existing images in big data, but \ngenerate new images. The concealment of such generated new images are not as good as using existing images \nin big data, because existing images in big data are organic parts of big data and hard to be detected. \nIf the generated images in these existing methods in [11, 27-31] are not put into big data, although they will \nnot cause changes or growth of big data, they will certainly occupy the user's own storage space. When the \namount and size of the generated images are very large, this problem becomes very prominent, but these \nexisting methods in [11, 27-31] can not rely on and use the data in the existing big data, so they will be \npowerless on this problem. These shortcomings are exactly the advantages of our method. At the same time, if \nthe images are stored directly on the client side, then the images need to be transmitted between the clients, \nwhich will put pressure on the network between the clients, and it is easier to attract attackers’ attention to detect \nthe hidden information from the images. Our method only needs to transfer the addresses of the images in big \ndata, the addresses are only a very small amount of data, and it is not easy to be noticed by attackers. Even if the \naddresses are intercepted and the images are obtained from the big data, no secret information can be obtained \nfrom the images because the images themselves do not contain any secret information as shown in our \nexperiments. \nEmbedding watermarks into deep neural networks protect the rights to shared trained models[33]. The \nexisting method regards shared trained models as covers and actually has no relations with our method which \nmakes use of the deep learning model to detect or hide secret information.  \nThere are a lot of existing researches about information security in big data[12], however only one research \nslightly related with big data for hiding information or steganography is found. The approach to text \nsteganography based on search in Internet [34] hiding the secret message in a webpage that contains all the \ninformation to describe a secret message . The existing method in [34] can only be used to hide text information, \nand cannot be used for hiding various other types of information such as images, audio, and video, because it is \ndifficult to find images, videos, audios, etc. that are the same as the parts of secret information from the web \npages. Even considering only hidden text, the existing method in [34] can work only in limited situations. The \nexisting method in [34] assumes that the secret message is relatively small, so it's not difficult to find a web \npage that contains all the parts of the information. However, if the secret message is complicated or large, or \nonly a few web pages can be obtained, which means that the access rights of the web pages are limited, then the \nexisting method in [34] may not be able to find the components of the secret text from the web pages. What’s \nmore, this existing method does not process the information to be hidden through a deep learning model, so it is \neasier to detect then our method. None of these shortcomings of this existing method is a problem for our \nmethod. Although our experiments are just examples of text secret information, our method is also applicable to \ndata in other formats, such as images, video, audio, and so on, because our method uses the output of the deep \nlearning model as secret information, and the output format of a deep learning model can be either text, or other \nformats such as images or video or audio. For example, deep learning models such as unet and GAN can \ngenerate images or video or audio.  \n \n5. Results and discussions \nAlthough the secret message in our experiments is text, our method can also be used to hide the secret \nmessage with the types of  image, video, audio,and so on by changing the output type of the deep learning \nhiding model. \n \nIn the two experiments, even if the opponent obtains the image in big data, when he see a tree in the image, \nso it is almost impossible for him to think that the secret message may be \"Knife\" or \"We will meet at the place \nwe met last week at 12 O'clock tomorrow morning\";  even if the opponent obtains the parameters of the deep \nlearning hiding model, from which he knows the object types which the model can recognize, he does not know \nwhich type is related with the secret message and almost impossible to guess the type for there are more than \none thousand types in the parameters.                         \nThe secret location and the parameters of deep learning hiding model seems to have no relationship with \nthe secret message, so even if the opponent interceptes the authorization information, the secret message could \nnot be recovered without knowing the role of each part of the authorization information. The cover carrier is \nselected from big data, so it is very difficult for the opponent to find the cover carrier for big data is too large. \nEven if the cover carrier is found, the opponent can not get the stego carrier without the deep learning hiding \nmodel. Further, even if the stego carrier is obtained, the secret message cannot be recovered without the secret \ndifference. The three insurmountable thresholds make our method extremely hard to break, and when the secret \nlocation or the deep learning hiding model is shared not through network before information hiding, our method \nis impossible to break by the opponent. \nBig data is often stored in cloud with many users, which means that it is difficult to ensure the data in big \ndata does not change. If the cover carrier changes in big data, the stego carrier outputted by the deep learning \nhiding model in the process of extracting information will be not consistent with the stego carrier in process of \nhiding information, and finally the recovered secret message will be wrong. Our method makes use of multiple \ncover carriers to overcome this problem. As long as one of the cover carriers does not change, the secret \nmessage can always be recovered correctly with the help of the verification information, which can greatly \nimprove the robustness of our method.  \nIf the data amount of the secret message is very large, the secret message can be divided into multiple \nsecret sub-messages in our method. Since the data amount of big data is very large, the different carriers \ncorresponding to the different secret sub-messages can be selected. Therefore, the data amount of the secret \nmessage can be unlimited. \nMoreover, different channels may be used for transmitting the different parts of the authorization \ninformation, and the authorization information can be transmitted at different times. For example, the secret \ndifference is sent to the receiver through the first network path, the secret location through the second network \npath, and the deep learning hiding model through the third network path, which can make the opponent harder to \nbreak our method, for the opponent can not recover the secret message even if parts of the authorization \ninformation are intercepted. Our method becomes unbreakable when the sender and the receiver share the secret \nlocation or the deep learning hiding model not through network before information hiding.  \n \n \n6. Conclusion \nWe proposed a novel method of information hiding in big data based on deep learning. Our method uses \nthe existing data in big data as the carrier, and uses the deep learning model as the function of hiding and \nextracting information. In the process of hiding information, the cover carrier in big data is inputted into the \ndeep learning hiding model, the output of the model is used as the stego carrier, and the difference between the \nstego carrier and the secret message is taken as the secret difference. In the process of extracting information, \nthe cover carrier in big data is inputted into the deep learning hiding model, the output of the model is used as \nthe stego carrier, and the secret message is synthesized according to the stego carrier and the secret difference. \nThe results also show that our method can hide secret messages safely, conveniently, quickly and with no \nlimitation on the data amount. When the secret location or the deep learning hiding model is shared not through \nnetwork before information hiding, our method is unbreakable. The deep learning model in our method can also \nbe replaced by other functions such as BP artificial neural network and big data in our method can also be \nreplaced by other data sources such as Internet data and IOT data, which means that our method opens a new \ndoor for information hiding. \n \nAcknowledgements \nThe authors acknowledge the National New Engineering Research and Practice Project (Grant: Higher \nEducation Ministry Letter [2018]17); the Major Project of National Social Science Fund(14ZDB101); the \nGuangdong Province Higher Education Teaching Research and Reform Project (Grant: Guangdong Higher \nEducation Letter [2016]236) ; the Guangdong Province Graduate Education Innovation Project (Grant: \n2016JGXM_ZD_30 ) ; the Guangdong Province Joint Training of Graduate Demonstration Base (Grant: \nGuangdong Teaching and Research Letter [2016]39 ) ; the Guangdong Province New Engineering Research and \nPractice Project (Grant: Guangdong Higher Education Letter [2017]118 ) ; the Major Provincial Scientific \nResearch Projects in Guangdong Universities (Grant: Guangdong Teaching and Scientific Letter [2018] 64). \n \n \nReferences \n \n[1] Zhang, Qingchen, et al. \"Smart Chinese medicine for hypertension treatment with a deep learning \nmodel.\" Journal of Network and Computer Applications 129 (2019): 1-8. \n[2] Chowdhury, Abishi, Shital A. Raut, and Husnu S. Narman. \"DA-DRLS: Drift adaptive deep reinforcement \nlearning based scheduling for IoT resource management.\" Journal of Network and Computer \nApplications 138 (2019): 51-65. \n[3] Karimian-Aliabadi, Soroush, et al.. Analytical composite performance models for Big Data applications[J]. \nJournal of Network and Computer Applications, 142 (2019):63-75 .  \n[4] Dai, Hua, et al. \"Semantic-aware multi-keyword ranked search scheme over encrypted cloud data.\" Journal \nof Network and Computer Applications 147 (2019): 102442. \n[5] Rabaninejad, Reyhaneh, et al. \"Comments on a lightweight cloud auditing scheme: Security analysis and \nimprovement.\"Journal of Network and Computer Applications 139 (2019): 49-56. \n[6] Xu, Guanshuo, Han-Zhou Wu, and Yun-Qing Shi. \"Structural design of convolutional neural networks for \nsteganalysis.\"IEEE Signal Processing Letters 23.5 (2016): 708-712. \n[7] Ye, Jian, Jiangqun Ni, and Yang Yi. \"Deep learning hierarchical representations for image \nsteganalysis.\" IEEE Transactions on Information Forensics and Security 12.11 (2017): 2545-2557. \n[8] Wu, Songtao, Shenghua Zhong, and Yan Liu. \"Deep residual learning for image steganalysis.\" Multimedia \ntools and applications 77.9 (2018): 10437-10453. \n[9] Qian, Yinlong, et al. \"Feature learning for steganalysis using convolutional neural networks.\" Multimedia \nTools and Applications 77.15 (2018): 19633-19657. \n[10] Zhong, Shangping, et al. \"A novel steganalysis method with deep learning for different texture complexity \nimages.\"Multimedia Tools and Applications 78.7 (2019): 8017-8039. \n[11] Hu, Donghui, et al. \"A novel image steganography method via deep convolutional generative adversarial \nnetworks.\" IEEE Access 6 (2018): 38303-38314. \n[12] Xu, Lei, et al. \"Information security in big data: privacy and data mining.\" Ieee Access 2 (2014): 1149-\n1176. \n[13]Yinlong Qian，Jing Dong，Wei Wang，Tieniu Tan，Deep learning for steganalysis via convolutional \nneural networks,Media Watermarking, Security, And Forensics，2015 \n[14]Yinlong Qian, Jing Dong, Wei Wang, and Tieniu Tan. Deep learning for steganalysis via convolutional \nneural networks. In IS&T/SPIE Electronic Imaging, pages 94090J–94090J. International Society for Optics \nand Photonics, 2015.  \n[15]Xu, Guanshuo, Han-Zhou Wu, and Yun Q. Shi. \"Ensemble of CNNs for steganalysis: An empirical \nstudy.\" Proceedings of the 4th ACM Workshop on Information Hiding and Multimedia Security. ACM, \n2016. \n[16] Lionel Pibre, Pasquet J´erˆome, Dino Ienco, and Marc Chaumont. Deep learning is a good steganalysis tool \nwhen embedding key is reused for different images, even if there is a cover source-mismatch. In EI: \nElectronic Imaging, 2016.  \n[17]  J.-F. Couchot, R. Couturier, C. Guyeux, M. Salomon, \"Steganalysis via a Convolutional Neural Network \nusing Large Convolution Filters for Embedding Process with Same Stego Key\", 2016.  \n[18] K. Liu, J. Yang, X. Kang, \"Ensemble of CNN and rich model for steganalysis\",International Conference on \nSystems Signals and Image Processing, 2017.  \n[19]J. Yang, Y.-Q. Shi, E. K. Wong, X. Kang, \"JPEG Steganalysis Based on DenseNet\", 2017. \n[20] S. Wu, S. Zhong, Y. Liu, \"A Novel Convolutional Neural Network for Image Steganalysis with Shared \nNormalization\", 2017.  \n[21]S. Wu, S. H. Zhong, Y. Liu, \"Residual convolution network based steganalysis with adaptive content \nsuppression\", Proceedings - IEEE International Conference on Multimedia and Expo, 2017.  \n[22]S. Wu, S. H. Zhong, Y. Liu, \"Steganalysis via deep residual network\",Proceedings of the International \nConference on Parallel and Distributed Systems - ICPADS, pp. 1233-1236, 2017.  \n[23]Xu, Guanshuo. \"Deep convolutional neural network to detect J-UNIWARD.\" Proceedings of the 5th ACM \nWorkshop on Information Hiding and Multimedia Security. ACM, 2017.  \n[24] M. Sharifzadeh, C. Agarwal, M. Aloraini, D. Schonfeld, \"Convolutional neural network steganalysis’s \napplication to steganography\", 2017 IEEE Visual Communications and Image Processing, 2018.  \n[25]Ozcan, Selim, and Ahmet Fatih Mustacoglu. \"Transfer Learning Effects on Image Steganalysis with Pre-\nTrained Deep Residual Neural Network Model.\" 2018 IEEE International Conference on Big Data (Big \nData). IEEE, 2018.  \n[26]Tan, Tieniu, et al. \"Image steganalysis based on deep learning.\" U.S. Patent Application No. 15/557,080，\n2019. \n[27]Hayes, Jamie, and George Danezis. \"Generating steganographic images via adversarial training.\" Advances \nin Neural Information Processing Systems. 2017.  \n \n[28]Baluja, Shumeet. \"Hiding images in plain sight: Deep steganography.\" Advances in Neural Information \nProcessing Systems. 2017.  \n[29]Jiren \nZhu,Russell \nKaplan,Justin \nJohnson,Li \nFei-Fei,HiDDeN: \nHiding \nData \nWith \nDeep \nNetworks,ECCV2018 \n[30]Kreuk, Felix, et al. \"Hide and Speak: Deep Neural Networks for Speech Steganography.\" arXiv preprint \narXiv:1902.03083(2019). \n[31]Haichao Shi, Jing Dong, Wei Wang, Yinlong Qian et Xiaoyu Zhang : SSGAN: Secure steganography based \non generative adversarial networks. In Proceedings of the 18th Pacific-Rim Conference on Multimedia, \nPCM’2017, volume 10735 de Lecture Notes in Computer Science, pages 534–544. Springer, septembre \n2017.  \n[32]Chaumont, Marc. \"Deep Learning in steganography and steganalysis from 2015 to 2018.\" arXiv preprint \narXiv:1904.01444 (2019).  \n[33]Uchida, Yusuke, Yuki Nagai, Shigeyuki Sakazawa, and Shin'ichi Satoh. \"Embedding watermarks into deep \nneural networks.\" In Proceedings of the 2017 ACM on International Conference on Multimedia Retrieval, pp. \n269-277. ACM, 2017. \n[34]Shi, Shangwei, Yining Qi, and Yongfeng Huang. \"An approach to text steganography based on search in \ninternet.\" 2016 International Computer Symposium (ICS). IEEE, 2016. \n \n \n",
  "categories": [
    "cs.CR",
    "cs.LG",
    "cs.MM"
  ],
  "published": "2019-12-31",
  "updated": "2020-01-23"
}