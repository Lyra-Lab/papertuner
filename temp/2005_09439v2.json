{
  "id": "http://arxiv.org/abs/2005.09439v2",
  "title": "Functorial Language Games for Question Answering",
  "authors": [
    "Giovanni de Felice",
    "Elena Di Lavore",
    "Mario Román",
    "Alexis Toumi"
  ],
  "abstract": "We present some categorical investigations into Wittgenstein's\nlanguage-games, with applications to game-theoretic pragmatics and\nquestion-answering in natural language processing.",
  "text": "David I. Spivak and Jamie Vicary (Eds.):\nApplied Category Theory 2020 (ACT2020)\nEPTCS 333, 2021, pp. 311–321, doi:10.4204/EPTCS.333.21\n© de Felice, Di Lavore, Román, Toumi\nThis work is licensed under the\nCreative Commons Attribution License.\nFunctorial Language Games for Question Answering\nGiovanni de Felice†, Elena Di Lavore⋆, Mario Román⋆, Alexis Toumi†\n† Department of Computer Science, University of Oxford.\n⋆Department of Software Science, Tallinn University of Technology.\nWe present some categorical investigations into Wittgenstein’s language-games, with applications to\ngame-theoretic pragmatics and question-answering in natural language processing.\nIntroduction\nIn his 1953 Philosophical Investigations [31], Wittgenstein introduces the concept of language-game\n(Sprachspiel) as a basis for his theory of meaning. He never gives a general deﬁnition, and instead\nproceeds by enumeration of examples: “asking, thanking, cursing, greeting, praying”. Thus, depending\non the language-game in which it is played, the same utterance “Water!” can be the answer to a question,\na request to a waiter or the chorus of a song. This has often been summarised by the slogan “meaning is\nuse”, which became the object of a subﬁeld of linguistics: pragmatics. Since Lewis’ work on language\nconventions [21], formal game theory has been used to model speaker’s and hearer’s actions in the context\nof a discourse [1]. In parallel, game theory has been proven signiﬁcant in designing machine learning\ntasks [13] and is beginning to be applied to natural language processing [29, 30].\nCategory theory has been used to formalise both language and games. On the one hand, the distribu-\ntional compositional (DisCo) models of Coecke et al. [4, 5] deﬁne language meaning as a functor from\nLambek’s pregroup grammars [19] to compact-closed categories such as the category of vector spaces\nand linear maps. On the other hand, Ghani et al. [11] introduced a monoidal category of open games as\na compositional framework for game theory. In [17], Hedges and Lewis proposed to construct language\ngames as functors from grammar to open games. However, their construction required to depart from the\npregroup formalism and relied on an open conjecture.\nThis paper presents some categorical investigations into language games, with applications to game-\ntheoretic pragmatics. In the ﬁrst two sections, we give an abstract deﬁnition of question-answering as\nan open game, then deﬁne pregroup grammars and DisCo models. The proposal of Hedges and Lewis is\nreformulated within the pregroup formalism, using the free completion of open games as a rigid monoidal\ncategory. Two examples of functorial language games are presented: orders and questions, modelling\nthe pragmatics of imperative and interrogative syntax. The abstract question-answering game of the\nﬁrst section is instantiated with respect to a pregroup grammar: the teacher’s moves are grammatical\nquestions, the student’s strategies are DisCo models. We characterise the Nash equilibria and identify\nsufﬁcient conditions for the student to succeed. We conclude with a discussion of the link between open\ngames and learning algorithms for natural language processing.\nElena Di Lavore and Mario Román were supported by the European Union through the ESF funded Estonian IT Academy\nresearch measure (project 2014-2020.4.05.19-0001).\n312\nFunctorial Language Games for QA\n1\nQ&A as an open game\nOpen games [11] are building blocks that can be composed together to construct games in the sense of\neconomic game theory. They provide a compositional description of game theory and a graphical syntax\nthat facilitates reasoning. They express the equilibria of composite games in terms of their components,\nwhich might be more tractable.\nDeﬁnition 1.1 ([11, Deﬁnition 3]). Let X,S,Y,R ∈Set. An open game G :\n\u0000X\nS\n\u0001 Σ↛\n\u0000Y\nR\n\u0001\nthat takes observa-\ntions on the set X, produces moves on the set Y, receives utilities on the set R, and returns coutilities on\nthe set S, is a quadruple (ΣG ,πG ,κG ,EG ) where:\n• ΣG is the set of strategy proﬁles;\n• πG : ΣG × X →Y is the play function, representing how the player following a strategy proﬁle\nproduces a move given an observation;\n• κG : ΣG × X × R →S is the coplay function, representing how payoffs are propagated from the\nplayer to its environment;\n• EG : X ×(Y →R) →P(ΣG ) is the equilibrium function, representing the subset of strategies that\nare best responses for the player in a given context, which consists of a past observation of type X\nand a continuation of type Y →R.\nOpen games form a teleological symmetric monoidal category denoted Game, which admits a graph-\nical calculus developed in [15]. Each morphism is represented as a box with covariant wires for ob-\nservations and moves, and contravariant wires for utilities and coutilities (see Diagram 1).\nClosed\ngames G : I →I are determined by a set of strategy proﬁles ΣG together with an equilibrium function\nEG : 1 →P(ΣG ) describing a subset of equilibria. When considering games where players maximise\ntheir own utility, these equilibria are precisely Nash equilibria [11, Theorem 2]. Every simultaneous\nmove game, in the sense of classical game theory, deﬁnes a closed game [11, Section VII]. Finally, every\npair of play/coplay functions can be lifted into a game by picking the trivial strategy set SG = 1 and a\nconstantly true equilibrium function. Open games obtained in this way are called strategically trivial.\nExample 1.2. Consider an agent q that poses questions, modelled as a state q:\n\u00001\n1\n\u0001\n↛\n\u0000Q\nU\n\u0001\nwith a set of\nstrategies given by Q. We pick some questions-answer pairs T ⊆Q×U that the agent ﬁnds satisfactory,\nand these preferences are modelled by deﬁning its equilibrium function to be\nEG (f) := {q | (q, f(q)) ∈T}.\nIt confronts some oracle that answers the questions, modelled as a strategically trivial effect a:\n\u0000Q\nU\n\u0001\n↛\n\u00001\n1\n\u0001\n. Composing both gives a simple game where the agent tries to ask a question and receive a satis-\nfactory answer. The Nash equilibria of the composite game are precisely the questions that the oracle\nanswers satisfactorily.\nGeneralizing from this example, we can consider an abstract notion of utility-maximising player.\nDeﬁnition 1.3. A utility-maximising player with observations in X, moves in Y, utilities in a partially\nordered set R, and some subset of possible strategies Σ ⊆Y X, is an open game G :\n\u0000X\n1\n\u0001 Σ↛\n\u0000Y\nR\n\u0001\nwith\nπG (σ,x) := σ(x) the evaluation function, trivial coplay function; and EG (x,κ) := argmaxσ∈Σ κ(σ(x))\nan equilibrium function describing the subset of the strategies that maximises the utility of the agent.\nLet us ﬁx three sets C, Q, A for corpora (i.e. lists of facts), questions and answers respectively. Let\nU be a set of utilities, which can be taken to be R or B. We now deﬁne a closed game modelling an\ninteraction between three agents: a teacher, a student and a marker. For the moment we deﬁne it in terms\nof abstract sets and unspeciﬁed strategies, we will instantiate these in Section 5.\nde Felice, Di Lavore, Román, Toumi\n313\nExample 1.4 (Teacher, student, marker). A teacher T :\n\u0000C\n1\n\u0001\n↛\n\u0000Q×A\nU\n\u0001\nis a utility-maximising player\nwhere each strategy represents a function turning facts from the corpus into pairs of questions and\nanswers. A student S :\n\u0000Q\n1\n\u0001\n↛\n\u0000A\nU\n\u0001\nis a utility-maximising player where each startegy represents a way\nof turning questions into answers. A marker is a strategically trivial open game M :\n\u0000 A×A\nU×U\n\u0001\n↛\n\u00001\n1\n\u0001\nwith\ntrivial play function and a coplay function deﬁned as κM (aT ,aS ) = (−d(aS ,aT ),d(aS ,aT )) where\nd : A × A →U is a given metric on A. Finally, we model a corpus as a strategically trivial open game\nf :\n\u00001\n1\n\u0001\n↛\n\u0000C\n1\n\u0001\nwith play function given by π f (∗) = f ∈C. All these open games are composed to obtain\na question answering game in the following way.\nT\nS\nM\nf\nC\nQ\nA\nA\nU\nU\n(1)\nIntuitively, the teacher produces a question from the corpus and gives it to the student who uses his\nstrategy to answer. The marker will receive the correct answer from the teacher together with the answer\nthat the student produced, and output two utilities. The utility of the teacher will be the distance between\nthe student’s answer and the correct answer; the utility of the student will be the exact opposite of this\nquantity. In this sense, question answering is a zero-sum game.\n2\nPregroup semantics\nPregroup grammars are algebraic models of natural language syntax, ﬁrst introduced by Lambek [19].\nThey are weakly equivalent to context-free grammars [3], can be parsed efﬁciently [23], and can be given\nfunctorial semantics [5, 26]. In this section we give background on pregroups and their models in rigid\nmonoidal categories.\nDeﬁnition 2.1. A preordered monoid is a preorder P equipped with a monotone monoid, i.e. a ≤c ∧\nb ≤d =⇒ab ≤cd for all a,b,c,d ∈P. A pregroup is a preordered monoid P where every type t ∈P\nhas left and right adjoints tl,tr such that tlt ≤1 ≤ttl and ttr ≤1 ≤trt.\nDeﬁnition 2.2. A pregroup grammar is a tuple G = (V,B,D,s) where V is a set of words called the\nvocabulary, B is a ﬁnite set of basic types with s ∈B the sentence type, and D ⊆V ×PB is a ﬁnite set of\ndictionary entries for PB the free pregroup generated by B.\nA pregroup grammar G generates a language L (G,s) ⊆V ∗as follows. A list of words u ∈V ∗is\ngrammatical, i.e. u ∈L (G,s), whenever for each word ui ∈V, i ≤|u| there is a type ti ∈PB such that\n(ui,ti) ∈D and t1 ...tn ≤s in the free pregroup.\nIn [24], Lambek and Preller recast the pregroup formalism in terms of free compact 2-categories.\nWe focus on the case of compact 2-categories with one-object, i.e. rigid categories. Let Cat, MonCat\nand RigidCat denote the categories of categories and functors, monoidal categories and monoidal func-\ntors and rigid categories and rigid functors, respectively. Given a set of generating objects O, a simple\nsignature over O is a graph Γ ⇒O, it generates the free category C(Γ) ∈Cat, [27, 2.3]. A monoidal\nsignature over O is a graph Γ ⇒O∗and it generates the free monoidal category MC(Γ) ∈MonCat, [27,\n3.3]. Finally a rigid signature over O is a graph Γ ⇒PO where PO is the free pregroup on O, Γ generates\nthe free rigid category RC(Γ) ∈RigidCat, [27, 4.8].\n314\nFunctorial Language Games for QA\nFor a pregroup grammar G = (V,B,D,s), let G := RC(D ⇒B +V) be the free rigid category gen-\nerated by the dictionary entries, where the two maps are given by projections, i.e. dom(w,t) = w and\ncod(w,t) = t for (w,t) ∈D. The grammatical structure of a sentence u ∈L (G,s) may now be given\nexplicitly by a diagram g : u →s in G. In general, for any basic type b ∈B we will write:\nL (G,b) = ∏\nu∈V ∗G(u,b)\nExample 2.3. Take G = (V,B,D,s) with V = {sense,makes,this,sentence}, B = {s,n,d } and D =\n{(sense,n), (makes,nrsnl), (this,d), (sentence,dln)}. The following string diagram is a proof that\nu = “This sentence makes sense” ∈L (G,s) is a grammatical sentence. We do not draw the wires for\nwords and depict the dictionary entries as triangles.\nd\nThis\ndr\nn\nsentence\nnr s nl\nmakes\nn\nsense\nGoing from inequalities in a preordered monoid to arrows in a monoidal category allows both to\nreason about syntactic ambiguity (e.g. “men and (women who run)” vs “(men and women) who run”)\nas well as to deﬁne pregroup semantics as a monoidal functor. This second observation lead to the\ndevelopment of the DisCo (distributional compositional) framework [4, 5].\nDeﬁnition 2.4. A DisCo model for a pregroup grammar G = (V,B,D,s) is a rigid monoidal functor\nF : G →S for S a rigid monoidal category, such that words are sent to the unit F(w) = 1 for all w ∈V.\nThe semantics of a list of words u ∈V ∗with grammatical structure g : u →t is given by the state F(g) :\n1 →F(t).\nExample 2.5. Relational models F : G →Rel correspond precisely to relational databases. The basic\ntypes B correspond to a set of attributes, with F(b) the set of data values for each b ∈B. The dictionary\nD ⊆V ×PB corresponds to a database schema, and the functor F to an instance of that schema, mapping\neach entry (w,t) ∈D to a relation F(w) ⊆F(t) = F(b0) × F(b1)··· × F(bk) where {bi} is the list of\nbasic types in t (note that F(br) = F(b) = F(bl) as Rel is compact closed). Finally, morphisms in\nG (and sentences u →s in particular) correspond to conjunctive queries which can be evaluated by\napplying the functor F, see [7] where this correspondence is spelled out in detail.\nExample 2.6. Distributional models F : G →VectR can be constructed by counting co-occurences of\nwords in a corpus [14]. The image of the noun type n ∈B is a vector space where the inner product\ncomputes noun-phrase similarity [26]. When applied to question answering tasks, distributional models\ncan be used to compute the distance between a question and its answer [6].\n3\nFrom pregroups to open games with snake removal\nWe now aim to give semantics to pregroup grammars in the category of open games. As Game is not a\nrigid monoidal category, building such an interpretation is more involved than the cases above. A ﬁrst\nattempt would be to use the teleological structure of Game to interpret the cups in pregroup diagrams.\nHowever, the models obtained in this way would be very limited: the image of words are all states, i.e.\nthey have trivial observations and co-utilities. This motivated Hedges and Lewis [17] to deﬁne the notion\nof a process grammar as a free rigid category where the words are modeled as generators with arbitrary\ndomains. We propose an alternative construction which does not require any change to the pregroup\nformalism, using the following lemma.\nde Felice, Di Lavore, Román, Toumi\n315\nLemma 3.1 ([8]). The forgetful functor RigidCat →MonCat has a left adjoint A : MonCat →RigidCat.\nFurthermore, the embedding functor C ,−→A (C) is strong monoidal and fully-faithful.\nThe free completion A : MonCat →RigidCat is called autonomisation in [8], given a monoidal\ncategory C it constructs a rigid monoidal category A (C) by freely adding adjoints to the objects of C\nwith formal cups and caps witnessing the adjunctions.\nIn our context, this means that we can give semantics to pregroup grammars in open games by\nconstructing a DisCo model F : G →A (Game) with F(s) ∈Game. Then, by fullness of the embedding\nGame ,−→A (Game), we get that the image of any grammatical sentence g : u →s in G is a morphism:\nF(g) ∈A (Game)(1,F(s)) ≃Game(1,F(s)).\nIn other words, once a functor of this type is constructed, all the cups and caps from pregroup diagrams\nwill cancel each other via the snake equation, leaving us with a morphism in Game. We now give the\nmain result of this section, which will allow us to build language games functorially from any functional\npregroup grammar.\nDeﬁnition 3.2. A pregroup type t ∈PB is functional if it belongs to the context-free grammar b |trt |ttl\nwhere b ∈B. A pregroup grammar G = (B,V,D,s) is called functional if each type in the dictionary\nt ∈D(V) is functional.\nThe restriction to functional types is very common in the literature on categorial grammar. They cor-\nrespond to the syntactic types of combinatory categorial grammars [28] and of the product-free Lambek\ncalculus [10, 2], as well as the original types used for Montague semantics [22]. Even if Lambek doesn’t\nstate this restriction explicitly, all the pregroup types he uses in his book [20] are of this form.\nProposition 3.3. For any functional pregroup grammar G, there exists a monoidal signature ΓG and\na functor FG : G →RC(ΓG), such that any DisCo model F : G →A (Game) factors uniquely as F =\nA (J)◦FG for some J : MC(ΓG) →Game.\nExample 3.4. Fix a pregroup grammar G = (B,V,D,s) with B = {d,n,s} for determinant, noun, sentence\ntypes. We use the dictionary:\nD = {(the, d), (person, drn), (who, nrnsln), (explains, nrs), (knows, nrsnl), (rules, drn)}.\nThe following is a grammatical sentence.\nThe\nperson\nwho\nexplains\nknows\nthe\nrules.\n(2)\nThe monoidal signature ΓG associated with G is given by: ΓG = {the : 1 →d ; person, rules : d →\nn; explains : n →s;knows : n ⊗n →s; who1 : n →a ⊗n; who2 : a ⊗s →n}. The functor FG factors\neach dictionary entry using cups and the boxes in ΓG. For instance every entry of the form (w, arb) ∈D\n(including adjectives, common nouns and intransitive verbs) and every transitive verb (v, nrsnl) ∈D are\nfactored as follows:\nar\nb\nw\n7→\nar\na\nb\nw\n,\nnr\ns\nnl\nv\n7→\nnr\nn\nn\nnl\ns\nv\n.\n(3)\n316\nFunctorial Language Games for QA\nThe factorization of “who” requires two boxes:\nnr\nn\nsl\nn\nwho\n7→\nnr\nn\na\nn\ns\nsl\nn\nwho1\nwho2\n.\n(4)\nNote that this factorisation carries the same data as a comb in the sense of [18] or equivalently of a\nlens, see [25] for an account of the relationship between these notions. Applying the functor FG to the\nsentence (2) and removing the snakes yields the following diagram in MC(ΓG) ,−→RC(ΓG).\nd\nn\na\nn\ns\nn\nd\nn\ns\nthe\nperson\nwho1\nexplains\nwho2\nthe\nrules\nknows\nWe can now build games for each sentence by ﬁnding a functor J : MC(ΓG) →Game. In the next\nsection we will use this to obtain a game-theoretic semantics for imperative and interrogative sentences.\n4\nFunctorial language games\nWe start this section by recasting the example of a language game modelled in [17] into our formal-\nism. This is the ﬁrst example given in the Philosophical Investigations [31] and it features two play-\ners: a master builder and his apprentice. The master gives instructions to the apprentice who helps\nhim building with building-stones. They use a language consisting of the following dictionary D =\n{(bring, snl), (large, nnl), (slabs, n), ...}, where n,s ∈B are the noun and sentence type respectively.\nThe master gives an order to his apprentice by forming a grammatical sentence u ∈O = L (G,s) where\nG = (B,V,D,s). We can give a game-theoretic semantics to the master’s orders as follows. First, the\nmonoidal signature associated with G is ΓG = {bring : n →s, large : n →n, slabs : 1 →n}, and the\nfunctor FG maps “Bring large slabs” as follows:\nnl\nBring\nn\nnl\nlarge\nn\nslabs\ns\n7→\nn\nn\ns\nslabs\nlarge\nBring\n(5)\nThe interpretation as open games J : MC(ΓG) →Game is given by J(n) = N = L (G,n) and J(s) =\n\u0000O\nA\n\u0001\nwhere A is a set of actions with a mapping bring : N →A, i.e. every noun phrase x refers to some\nobject in the building site and bring(x) is the action that brings it. We interpret the nouns and adjectives\nde Felice, Di Lavore, Román, Toumi\n317\nsyntactically, i.e. J(slabs) = (slabs →n) ∈N and\nJ(large) : N −→N ::\nx\n7−→\nlarge\nx\n.\nThe game is encoded in the image of the imperative “Bring”, which is interpreted as the open game\nJ(bring):\n\u0000N\n1\n\u0001\n↛\n\u0000O\nA\n\u0001\nwith trivial set of strategy proﬁles Σ = ⋆and play function: π : ⋆× N →O : x 7→\n(ids ⊗cupn)◦(Bring⊗x), analogous to the the image of “large”. The coplay function is trivial and the\nequilibrium E : N ×(O →A) →P(⋆) = B is given by:\nE(x,k) =\n(\n1\nk(π(x)) = bring(x)\n0\notherwise\n.\n(6)\nSimilar open games can be deﬁned for other orders such as “cut” or “stack”. Applying the functor J−K =\nA (J)◦FG to the diagram above, yields an open game JBringlargeslabsK:\n\u00001\n1\n\u0001\n↛\n\u0000O\nA\n\u0001\nwith equilibrium\nfunction taking a continuation of the apprentice k : O →A to:\nEJBringlargeslabsK(k) =\n(\n1\nk(Bring large slabs) = bring(large slabs)\n0\notherwise\nIn words, the master is satisﬁed when his order results in an action that brings large slabs.\nNow that we have illustrated the concept of language game with a simple example, we move to a\ndifferent setup replacing the master-apprentice language with teacher-student pragmatics. We start by\nmodelling the role of a teacher examining his pupil, where orders are replaced by questions. Suppose we\nare dealing with a philosophy teacher and take the following example:\nD = {(who, qsln}, (invented, nrsnl), (truth, nnl), (tables, n)}\nWho\ninv.\ntruth\ntables\n?\nWe model the teacher’s knowledge of his course with a DisCo model KT : G →Rel such that KT(n) =\nKT(q) = A where A = {Fela,Wittgenstein,Peirce,...} is a set of names of historical ﬁgures. The correct\nanswers to a who-question g : u →q are given by a subset KT(g) ⊆A, thus the utility of the student with\nstrategy k : Q →A is the intersection ⟨k(g)|KT(g)⟩∈B, see example 2.5.\nAs in the previous example, we give a strategically-trivial semantics to each of the words, except for\nthe interrogative “Who” which we use to encode the game. Note that the dictionary entry for “Who”\nfactors via FG as follows:\nWho\nq\nsl\nn\n7→\na\nn\ns\nsl\nq\nWho1\nWho2\n(7)\n318\nFunctorial Language Games for QA\nThe functor J : MC(ΓG) →Game is deﬁned on objects by J(a) = J(n) =\n\u0000N\n1\n\u0001\nand J(q) =\n\u0000Q\nA\n\u0001\nwhere\nQ = L (G,q) is the set of grammatical who-questions and N = L (G,n) is the set of grammatical noun\nphrases. The ﬁrst part of the factorization initializes the same noun variable x : 1 →n ∈G in its two\noutputs: πJ(Who1) = (x,x) : ⋆→N ×N, and has trivial coplay function, strategy set and equilibrium. The\nsecond play function substitutes the question word “Who” for x in sentence g to build the question:\nπJ(Who2) : N ×S →Q : (x,g) 7→g[x := Who].\nIt has trivial coplay function and strategy set and an equilibrium EJ(Who2) : N ×S ×(Q →A) →B given\nby EJ(Who2)(x,g,k) = ⟨k(q)|KT(q)⟩for q = πJ(Who2)(x,g). As a result, the functor J−K = A (J)◦FG maps\nthe question “Who invented truth tables?” to an open game with the following equilibrium function.\nEJWho invented truth tables?K(k) =\n(\n1\nk(Who invented truth tables?) ∈{Witt.,Peirce}\n0\notherwise\nIn words, the teacher is satisﬁed when the student answers his question correctly. Note that we could\nreverse the equilibrium to model a teacher that is satisﬁed when the student gives the wrong answer. In\nthe next section, we will use this alternative choice to deﬁne an adversarial question answering game.\n5\nNash equilibria in a Q&A game\nIn Section 1, we deﬁned an open game for question-answering using abstract sets C, Q, A and U for\ncorpus, questions, answers and utilities. Strategies and plays for the agents were given by arbitrary\nfunctions between those sets. We now instantiate those functions with respect to a pregroup grammar\nG = (B,V,D,s) with a ﬁxed question type z ∈B. We consider the case where utilities are booleans U = B\nand leave the generalisation to any semiring for future work.\nWe take the corpus C to be a list of question-answer pairs (q,a) for q : u →z and a ∈A. For\nsimplicity, we assume q is a yes/no question and a is a boolean answer, i.e. Q = L (G,z) and A = B.\nThe strategies of the student are DisCo models σ : G →Rel with σ(z) = 1, so that given a question\nq : u →z, σ(q) ∈P(1) = B is the student’s answer. In practice, the student may only have a subset of\nmodels available to him so we set ΣS ⊆{σ : G →Rel : σ(z) = 1}. The strategies of the teacher are\ngiven by indices ΣT = {0,1,...n}, so that the play function πT : ΣT × (Q × A)∗→Q × A picks the\nquestion-answer pair indicated by the index. The marker will compare the teacher’s answer a with the\nstudent’s answer σ(q) ∈B using the metric d : A×A →B :: (a0,a1) 7→(a0 = a1). Plugging these open\ngames as in Example 1.4, we can compute the set of equilibria of the game by composing the equilibrium\nfunctions of its components.\nEG = {(j,σ) ∈ΣT ×ΣS : j ∈argmax\ni∈ΣT\nai ̸= σ(qi)∧σ ∈argmax\nσ∈ΣS\n(aj = σ(qj))}\nTherefore, in a Nash equilibrium, the teacher will ask the question that the student, even with his best\nguess, is going to answer in the worst way. The student, on the other hand, is going to answer as correctly\nas possible.\nWe can analyse the possible outcomes of this game.\n1. There is a pair (qi,ai) in C that the student cannot answer correctly, i.e. ∀σ ∈ΣS : σ(qi) ̸= ai.\nThen i is a winning strategy for the teacher and (i,σ) is a Nash equilibrium, for any choice of\nstrategy σ for the student. If no such pair exists, then we fall into one of the following cases.\nde Felice, Di Lavore, Román, Toumi\n319\n2. The corpus is consistent — i.e. ∃σ : G →Rel such that ∀i · σ(qi) = ai — and the student has\naccess to the model σ that answers all the possible questions correctly. Then, the strategy proﬁle\n(j,σ) is a Nash equilibrium and a winning strategy for the student for any choice j of the teacher.\n3. For any choice i of the teacher, the student has a model σi that answers qi correctly. And viceversa,\nfor any strategy σ of the student there is a choice j of the teacher such that σ(qj) ̸= aj. Then the\nset EG is empty, there is no Nash equilibrium.\nTo illustrate the last case, consider a situation where the corpus C = {(q0,a0),(q1,a1)} has only\ntwo elements and the student has only two models ΣS = {σ0,σ1 } such that σi(qi) = ai for i ∈{0,1}\nbut σ0(q1) ̸= a1 and σ1(q0) ̸= a0. Then we’re in a matching pennies scenario, both the teacher and the\nstudent have no incentive to choose any one of their startegies and there is no Nash equilibrium. This\nproblem can be ruled out if we allowed the players in the game to have mixed strategies, which can be\nachieved with minor modiﬁcations of the open game formalism [12].\n6\nConclusion\nWe studied the links between two recently developed applications of category theory: open games and\ndistributional compositional language models. We constructed language games as functors from a pre-\ngroup grammar to the free completion of open games as a rigid category and used this construction to\ngive a game-theoretic pragmatics for orders and questions. Finally, we analysed the Nash equilibria of an\nadversarial Q&A game. Going towards implementation, the next step is to deﬁne a similar Q&A game in\nthe category of learners of Fong et al. [9], see [16] for the relationship between learners and open games.\nThis would amount to instantiating the strategy sets with the parameters of a learning algorithm, so that\ngradient descent converges to the desired Nash equilibrium. It would allow to formalise a generative\nadversarial learning algorithm [13] for question answering.\nReferences\n[1] Anton Benz & Jon Stevens (2018): Game-Theoretic Approaches to Pragmatics. Annual Review of Linguis-\ntics 4(1), pp. 173–191, doi:10.1146/annurev-linguistics-011817-045641.\n[2] Wojciech Buszkowski (2016): Syntactic Categories and Types: Ajdukiewicz and Modern Categorial Gram-\nmars. doi:10.1163/9789004311763_004.\n[3] Wojciech Buszkowski & Katarzyna Moroz (2007): Pregroup Grammars and Context-Free Grammars.\n[4] Stephen Clark, Bob Coecke & Mehrnoosh Sadrzadeh (2008): A Compositional Distributional Model of\nMeaning. In: Proceedings of the Second Symposium on Quantum Interaction (QI-2008), pp. 133–140.\n[5] Stephen Clark, Bob Coecke & Mehrnoosh Sadrzadeh (2010): Mathematical Foundations for a Compositional\nDistributional Model of Meaning. In J. van Benthem, M. Moortgat & W. Buszkowski, editors: A Festschrift\nfor Jim Lambek, Linguistic Analysis 36, pp. 345–384.\n[6] Bob Coecke, Giovanni de Felice, Dan Marsden & Alexis Toumi (2018): Towards Compositional Dis-\ntributional Discourse Analysis. Electronic Proceedings in Theoretical Computer Science 283, pp. 1–12,\ndoi:10.4204/EPTCS.283.1.\n[7] Giovanni de Felice, Konstantinos Meichanetzidis & Alexis Toumi (2019): Functorial Question Answering.\narXiv:1905.07408 [cs, math].\n[8] Antonin Delpeuch (2017): Autonomization of Monoidal Categories. doi:10.31219/osf.io/efs3b.\n320\nFunctorial Language Games for QA\n[9] Brendan Fong, David Spivak & Remy Tuyeras (2019): Backprop as Functor: A compositional perspective on\nsupervised learning. In: 2019 34th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS),\nIEEE, doi:10.1109/lics.2019.8785665.\n[10] Timothy A. D. Fowler (2008): Efﬁciently Parsing with the Product-Free Lambek Calculus. In: Proceedings\nof the 22nd International Conference on Computational Linguistics (Coling 2008), Coling 2008 Organizing\nCommittee, Manchester, UK, pp. 217–224, doi:10.3115/1599081.1599109.\n[11] Neil Ghani, Jules Hedges, Viktor Winschel & Philipp Zahn (2018): Compositional game theory.\nIn:\nProceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science, pp. 472–481,\ndoi:10.3982/ECTA6297.\n[12] Neil Ghani, Clemens Kupke, Alasdair Lambert & Fredrik Nordvall Forsberg (2019): Compositional Game\nTheory with Mixed Strategies: Probabilistic Open Games Using a Distributive Law. In: Applied Category\nTheory Conference 2019.\n[13] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron\nCourville & Yoshua Bengio (2014): Generative Adversarial Nets. In Z. Ghahramani, M. Welling, C. Cortes,\nN. D. Lawrence & K. Q. Weinberger, editors: Advances in Neural Information Processing Systems 27, Curran\nAssociates, Inc., pp. 2672–2680.\n[14] Edward Grefenstette & Mehrnoosh Sadrzadeh (2011): Experimental Support for a Categorical Composi-\ntional Distributional Model of Meaning. In: The 2014 Conference on Empirical Methods on Natural Lan-\nguage Processing., pp. 1394–1404.\n[15] Jules Hedges (2017): Coherence for Lenses and Open Games. arXiv:1704.02230 [cs, math].\n[16] Jules Hedges (2019): From Open Learners to Open Games. arXiv:1902.08666 [cs, math].\n[17] Jules Hedges & Martha Lewis (2018): Towards Functorial Language-Games. Electronic Proceedings in\nTheoretical Computer Science 283, pp. 89–102, doi:10.4204/eptcs.283.7.\n[18] Aleks Kissinger & Sander Uijlen (2017): A categorical semantics for causal structure. In: 32nd Annual\nACM/IEEE Symposium on Logic in Computer Science, LICS 2017, Reykjavik, Iceland, June 20-23, 2017,\nIEEE Computer Society, pp. 1–12, doi:10.1109/LICS.2017.8005095.\n[19] Joachim Lambek (1999): Type Grammar Revisited. In Alain Lecomte, François Lamarche & Guy Perrier,\neditors: Logical Aspects of Computational Linguistics, Springer Berlin Heidelberg, Berlin, Heidelberg, pp.\n1–27, doi:10.1016/0168-0072(94)00063-9.\n[20] Joachim Lambek (2008): From Word to Sentence: A Computational Algebraic Approach to Grammar. Open\nAccess Publications, Polimetrica.\n[21] David K. Lewis (1969): Convention: A Philosophical Study. Wiley-Blackwell.\n[22] Richard Montague (1970):\nUniversal Grammar.\nTheoria 36(3), pp. 373–398, doi:10.1111/j.1755-\n2567.1970.tb00434.x.\n[23] Anne Preller (2007):\nLinear Processing with Pregroups.\nStudia Logica 87(2-3), pp. 171–197,\ndoi:10.1007/s11225-007-9087-0.\n[24] Anne Preller & Joachim Lambek (2007): Free Compact 2-Categories. Mathematical Structures in Computer\nScience 17(2), pp. 309–340, doi:10.1017/S0960129506005901.\n[25] Mario Román (2020): Comb Diagrams for Discrete-Time Feedback. arXiv:2003.06214 [cs].\n[26] Mehrnoosh Sadrzadeh, Stephen Clark & Bob Coecke (2013): The Frobenius Anatomy of Word Mean-\nings I: Subject and Object Relative Pronouns. Journal of Logic and Computation 23(6), pp. 1293–1317,\ndoi:10.1093/logcom/ext044.\n[27] P. Selinger (2010): A Survey of Graphical Languages for Monoidal Categories. In: New Structures for\nPhysics, Springer Berlin Heidelberg, pp. 289–355, doi:10.1007/978-3-642-12821-9_4.\n[28] Mark Steedman (2000): The Syntactic Process. MIT Press, Cambridge, MA, USA.\nde Felice, Di Lavore, Román, Toumi\n321\n[29] Sandeep Subramanian, Sai Rajeswar, Francis Dutil, Chris Pal & Aaron Courville (2017): Adversarial Gen-\neration of Natural Language. In: Proceedings of the 2nd Workshop on Representation Learning for NLP,\nAssociation for Computational Linguistics, Vancouver, Canada, pp. 241–251, doi:10.18653/v1/W17-2629.\n[30] Rocco Tripodi & Roberto Navigli (2019): Game Theory Meets Embeddings: A Uniﬁed Framework for Word\nSense Disambiguation. In: Proceedings of the 2019 Conference on Empirical Methods in Natural Language\nProcessing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP),\nAssociation for Computational Linguistics, Hong Kong, China, pp. 88–99, doi:10.18653/v1/D19-1009.\n[31] Ludwig Wittgenstein (1953): Philosophical Investigations. Basil Blackwell, Oxford.\n",
  "categories": [
    "cs.CL",
    "cs.GT"
  ],
  "published": "2020-05-19",
  "updated": "2021-01-26"
}