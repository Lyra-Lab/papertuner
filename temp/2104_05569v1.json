{
  "id": "http://arxiv.org/abs/2104.05569v1",
  "title": "Deep Learning for IoT",
  "authors": [
    "Tao Lin"
  ],
  "abstract": "Deep learning and other machine learning approaches are deployed to many\nsystems related to Internet of Things or IoT. However, it faces challenges that\nadversaries can take loopholes to hack these systems through tampering history\ndata. This paper first presents overall points of adversarial machine learning.\nThen, we illustrate traditional methods, such as Petri Net cannot solve this\nnew question efficiently. To help IoT data analysis more efficient, we propose\na retrieval method based on deep learning (recurrent neural network). Besides,\nthis paper presents a research on data retrieval solution to avoid hacking by\nadversaries in the fields of adversary machine leaning. It further directs the\nnew approaches in terms of how to implementing this framework in IoT settings\nbased on adversarial deep learning.",
  "text": " \nDeep Learning for IoT \n \nTao Lin  \nAmazon \nSeattle, US \npaper@Ltao.org \n \nAbstract— Deep learning and other machine learning \napproaches are deployed to many systems related to Internet of \nThings or IoT. However, it faces challenges that adversaries can \ntake loopholes to hack these systems through tampering history \ndata. \nThis paper first presents overall points of adversarial machine \nlearning. Then, we illustrate traditional methods, such as Petri Net \ncannot solve this new question efficiently. After that, this paper \nuses the example from triage(filter) analysis from IoT cyber \nsecurity operations center. Filter analysis plays a significant role \nin IoT cyber operations. The overwhelming data flood is obviously \nabove the cyber analyst’s analytical reasoning. To help IoT data \nanalysis more efficient, we propose a retrieval method based on \ndeep learning (recurrent neural network). Besides, this paper \npresents a research on data retrieval solution to avoid hacking by \nadversaries in the fields of adversary machine leaning. It further \ndirects the new approaches in terms of how to implementing this \nframework in IoT settings based on adversarial deep learning. \nKeywords—Deep Learning, Adversarial Machine Learning, \nMachine Learning, Internet of Things, IoT \nI. INTRODUCTION \nMachine learning, especially Deep Learning, is increasingly \npopular not only in daily life, but also in many science \ndisciplines, including Internet of Things or IoT[1]. For example, \ncomputer security in terms of IoT network intrusions’ detection, \nand malware identification relies on automatic approaches \nstemming from deep learning, but those are only two examples \nof deep learning in IoT security. Whereas, deep learning is \neffective at average normal cases, such as the well-known \nexample of sorting fish automatically by their inherent features. \nOn the other hand, security is targeted on worst tricky cases[2]. \nIt would be easy to bypass a deep learning based IoT analysis \nfilter through malicious tasks in adversarial settings[3]. An \nexample of this is combining malicious samples with benign \nfiles, evading several PDF malware classifiers. Therefore, the \nsafe adoption of deep learning approaches in IoT security \nsettings is an unsolved challenge. \nAdversarial deep learning is crucial in life-critical IoT \nsystems[4], such as roadside sign recognition used by \nautonomous vehicles. To be specific, small nonobvious \nmanipulations in roadside signs can lead to distinct opposite \nresults in specific deep learning methods[5]. Accuracy and \nsensitivity simultaneously are trade-off in several systems.  \nThis paper will focus on two aspects to implement deep \nlearning in adversarial environments using more robust and \nfeasible approaches. First, this paper will suggest do some \nresearch on deep learning’s transferability. The second research \nquestion is about effective defense against adversaries in deep \nlearning in IoT. \nAdversaries can launch transferability attacks through \nconstructing an independent deep learning model to simulate \nsome other models just using the input data and output labels[6], \nwithout any insights on the original deep learning models’ \nparameters, even the models’ type. Transferability is significant \nnot only in adversarial deep learning, but also in many other \ndeep learning applications. On the one hand, although deep \nlearning has achieved impressive successes in many areas, many \ndetails are still unclear. Some simple deep learning approaches \nhave similar results with complicated and computationally \nexpensive deep learning algorithms. An open question is \nwhether or not we can simplify the features or hierarchies in \ndeep learning models through transferability. The other question \nis that although different deep learning models can generate \nsimilar outputs from same inputs, we cannot use same evading \ntechniques to attack different deep learning algorithms. In other \nwords, we can protect deep learning models through these \ntransferability properties. \nIn addition, compared to many state-of-the-art approaches \non evading and positioning deep learning models, there is little \nresearch to defend the adversaries. Protecting classifiers through \nensemble learning, hiding the classification probability scores, \nor hiding features, even hiding entire classifiers are not \nappropriate methods, partly because of deep learning’s \ntransferability. I propose that defending the adversaries by \nleveraging reinforcement learning through adversarial training, \nwhich is intentionally generating adversarial examples as part of \nthe training procedure. The main challenge is how to craft \nrelevant adversarial examples to simulate the real settings.  \nII. FILTER ANALYSIS IN SOC \nThis section presents traditional data analysis workflow in IoT \nsecurity operations center, as shown in Figure 1. \nAlthough there is little work on information retrieval related to \ncyber security operations centers (SOC), there are many works \non how to improve and advance the function of SOC. No \nspecific literature for information retrieval on data filter \noperations. While, information retravel are studied deeply. \nGenerally, there are two categories— graph-based information \nretrieval approaches and cyber security operations center. \n \nIDS\nAlerts Correction\nCoordination Agents\nInference Agents\nDecision-Making Agents \n \nFigure 1 Traditional data analysis workflow in security \noperations center \n \nTo some extent, information retrieval and recommendation \nsystems are two sides of one specific coin. By this we mean that \na variety of efficient algorithms in recommendation systems \ncan be updated and transformed to the information retrieval. \nThere are some recommendation systems using graph structure. \nWhile context-aware information retrieval is a traditional \nresearch area, there are increasingly state of the art approaches \nrecently. \nThanks to the increase of software’s complexity, Filter analysis \nconfront increasing puzzles, such as: \n(1) Undetermined environment. Compared to the past, the \nloopholes are much more complicated and the GUI \nevents growth dramatically. \n(2) Time consuming. Penetration testing mainly depend on \nrandom testing and the professional experience of the \nprogrammers. \n(3) User’s unsatisfactory. Though software companies \ninvest a huge amount of human and material resource, \nit is hard to satisfy the requirements specification. \nThere are some theory and approaches for Filter analysis in \nliterature. For instance, automatic filter testing can be achieved \nby a method which they called Observe-Model-Exercise*(* \nmeans iteration in the approach). Besides, combinatorial-based \ncriteria can be used in security operations center. There is a \nfilter algorithm for multi-windows analysis. Previously, we \nused event data graph in the area of GUI testing’s coverage rate. \nHowever, there is a lack of systematic filter analysis approach \nbased on strict mathematics theory. Therefore, the key to \nincrease the efficiency of filter is that semi-automatic or \nautomatic dynamitic analysis which involves context. \nThis research proposed a filter method based Petri network to \nsolve the previous three problems and there are three \ncontributions in this research: \n(1) Propose and summarize some Petri network properties \nin filter analysis. \n(2) Propose a new automatic analysis approach for six \ncategories IoT deficiencies. \n(3) Validate the efficiency of the analysis based Petri \nnetwork is prior to other traditional methods \nWe brief how to leverage Petri Net to this area. Firstly, there is \na relation explanation between Petri network and IoT analysis, \nand some significant properties, such as accessibility, \nboundedness, liveness and strong connectivity. And all the \nproperties are illustrated by a running example, which is a \nsimplified IoT system to explain six categories deficiencies in \nIoT analysis. The experiments prove that the testing-based Petri \nnetwork is outperformance than other methods. \nPetri network is mainly used in discrete parallel system and the \nmodeling of software. In IoT analysis, Petri network will be \nmigrated to the field. There are some relevant Petri network \ndefinitions in IoT analysis. For instance, Petri network is 5-\ntuple, PN= (P, T, I), In other works, different definitions can be \nassigned to the other two tuples.  \nOverall, this section presents Petri Net in IoT analysis. In next \nsection, we will present filter analysis based on deep learning. \nIII. DEEP LEARNING BASED RETRIEVAL OF IOT FILTER \nOPERATIONS \nDeep Learning is intriguing far-reaching impacts on \ninformation retrieval lately. Compared to a large number of \nworks on image retrieval and natural language processing \n(NPL), there are tough challenges to other formats (graph, etc.) \nretrieval through deep learning. By addressing some essential \nfactors in relevance matching, deep relevance matching model \n(DRMM) can significantly outperform traditional retrieval \nmodels. Another model is based on long short-term memory. \nBecause of the following reasons, deep learning could be used \nfor better IoT data filter retrieval systems. \nFirstly, the related methods use of pre-defined similarity \nmeasurements [7]. On the other hand, these pre-determined \nsimilarity metrics maybe not the most suitable. Deep learning \ncould be leveraged in this scenario to help analysis professional \nlearn how to conquer this.  \nSecondly, data filter operation retrieval systems are targeted to \nbe used in a variety of uncertainties, such as fault positive. \nDeep learning could be used in the uncertainties situations.[8] \nDeep learning, especially recurrent neural networks (RNN) and \nconvolutional neural networks (CNN), is a potential approach, \nwhich can be used for data filter operation retrieval in a SOC[8]. \nWe may also conduct research on deep belief networks. In the \nnext sections, we mainly discuss the recurrent neural networks \nin IoT settings. \nIV. DATA FILTER OPERATION DEEP LEARNING \nFor data filter operation retrieval[9], many related work uses \nrecurrent neural networks (RNN), since this neural network can \nbe used for data with time sequence.  \nInstead of rewriting all information, each element in an RNN \nmodel updates the current state by adding new information. \nAccordingly, when an RNN is trained to classify the newly \narrived data filter operations, the RNN can be incrementally \nmaintained to incorporate substantial new data triaging \nknowledge.  \nBut, before training and deploying any RNNs in a SOCs, the \nSOC should cautiously consider the potential adversaries.  \nSOC is targeted by adversaries, as shown in Figure 2. That is, \nthe attacker may purposely alter the data to be used for these \nmachine learning settings. The first part of the figure presents \nall penitential adversary alerts. Traditional machine learning \nmethods can detect these attacks easily. Besides, most \napproaches can recognize the root events, which is represented \nby dash lines. However, the most critical attacks are illustrated \nin the second (bottom) part of the figure. These attacks are \ndrafted by adversaries, which intentionally bypassing machine \nmodels. Although these hidden attacks are hard to detect, they \nstill have sequence order. This is the reason we use RNN on this \nwork. \n \nFigure 2 Data filter operations are being retrieved in \nadversarial settings \nRecently, a lot of traditional machine learning methods have \nbeen hacked by adversaries. The RNNs deployed in a SOC \nshould be resilient to adversarial examples. \nThe problem is which attacks are more important, accompanied \nby several trivial network events. In order to do this, most \nmachine learning models use sample events from archive as \ntraining data. Then, filter these training data in terms of \nhierarchies. However, the training data is highly unbalanced. It \nseems that adversaries can bypassing these models. In this \npaper, we try to use RNN to overcome these problems. \nV. IOT DATA FILTER MODEL \nCyber security data filter is targeted at determining whether the \nincoming data sources are worth of further investigation in a \ntimely and quick manner, as shown in Figure 3.  \n \nFigure 3 A retrieval system used by SOC \nTo achieve this goal, security analysts usually conduct a \nsequence of data filter operations to filter malicious network \nevents and to group them according to the potential attack \nchains bases on the Events Tree, as shown in Figure 4. \nTherefore, the unit of data filter analysis is a network event. \nNetwork events are the data reported by various network \nmonitoring sensors, including SIEM tools and human \nintelligence agents. \n \nFigure 4 An Event Tree in IoT SOC \nA network event can be abstracted as a multi-tuple of its \ncharacteristics, \n \n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\noccur\ndetect\nprior\nsrc\nsrc\ndst\ndst\ne\nt\nt\ntype attack\nsensor protocol ip\nport\nip\nport\nseverity confidence msg\n=<\n>\n \nwhere toccur is the date (time) the adversary hacked the IoT \nsystem; tdetect is the date, when analysist first find the specific \nadversary task; type is the type of these kind of adversary events \n(e.g., Built, or Deny); attackprior is the analyst using his or her \nprior experience to determine these tasks; sensor is the \nsensor/agent who first find these tasks; protocol is the general \nnetworking protocol; ipsrc, portsrc, ipdst, portdst are the source IP \naddress, source port number, destination IP address, and \ndestination port number, respectively; severity and confidence \nspecify the significance of these adversary tasks , respectively; \nmsg specifies additional notes for these tuples.. \nThe analyst specified several criteria of the suspicious or \ncorrelated network events based on the domain knowledge and \nexperience. Each criterion specifies a constraint on the network \nevent characteristics, so that a data filter operation can select \nand correlated network events. \nVI. KNOWLEDGE MATCHING AND RULE RELAXATION \nGiven the rule-based representation, adversaries can mock the \nsimilar situation and hack the system based on history data. \nTherefore, knowledge or experience will not work in these \ncomplicated environments. \nThe problem is: how can we make a limited number of \nexperiences useful for assisting to detect similar events? An \nexperience will not be useful if we do not abstract the particular \ndetails. It is significant to retrieve the key parts of an experience \nand to relax the experience by choosing the portions, which are \nnot too specific. \nConditions with lower priorities can be relaxed. Experience \nincludes specific details, such as the exact time and location of \nthe incident.  \nThe higher the degree to which an experience can be relaxed, \nthe higher the possibility exists that it can be matched against a \nnew situation. Figure 5 shows that the knowledge generated by \nrelaxation form a hierarchy: the most specific knowledge at the \nbottom while the top is the most relaxed ones. \n \nFigure 5 Experience relaxation levels. \nAccording to Figure 6, matching based on deep learning is \nperformed on each piece of knowledge through the network. \nWe may use different levels to represent the IoT analysis. \n \nFigure 6 Hierarchical experience networks. \nVII. CONCLUSION \nThis work first presents using Petri Net on SOC retrieval. Then, \nthis work by leveraging RNN to illustrates a new direction for \nSOC data recommendation. This approach can significantly \npresent the machine learning framework hacked by adversaries.  \nVIII. ACKNOWLEDGE \nPart of this work is from the author’s PhD study[1], before the \nauthor joining Amazon. Professor Fu Chen from Central \nUniversity of Finance and Economics provided many \nconstructive suggestions and perspectives for this work during \nauthor’s PhD study. Professor Fu Chen and this work were \nsupported in part by National Science Foundation of China \nunder No.61672104. \n \nREFERENCES \n[1] \nT. Lin, “A Data Triage Retrieval System for Cyber \nSecurity Operations Center,” Pennsylvania State Univ. \nThesis, 2018. \n[2] \nT. Lin, “A Container - Destructor – Explorer Paradigm \nto Code Smells Detection,” J. Chinese Comput. Syst., \nvol. 37, no. 3, 2016. \n[3] \nT. Lin and X. Fu, “Flame Detection Based on SIFT \nAlgorithm and One Class Classifier with Undetermined \nEnvironment,” Comput. Sci., vol. 42, no. 6, 2015. \n[4] \nT. Lin, C. Zhong, J. Yen, and P. Liu, “Retrieval of \nRelevant Historical Data Triage Operations in Security \nOperation Centers,” in From Database to Cyber \nSecurity, Springer, Cham, 2018, pp. 227–243. \n[5] \nT. Lin, “A Novel Image Matching Algorithm Based on \nGraph Theory,” Comput. Appl. Softw., vol. 33, no. 12, \n2016. \n[6] \nT. Lin, “Graphic User Interface Testing Based on Petri \nNet,” Appl. Res. Comput., vol. 33, no. 3, 2016. \n[7] \nT. Lin, “A Novel Direct Small World Network Model,” \nJ. Shanghai Norm. Univ., vol. 45, no. 5, 2016. \n[8] \nT. Lin, J. Gao, X. Fu, and Y. Lin, “A Novel Bug Report \nExtraction Approach,” in International Conference on \nAlgorithms and Architectures for Parallel Processing, \n2015, pp. 771–780. \n[9] \nC. Zhong, T. Lin, P. Liu, J. Yen, and K. Chen, “A cyber \nsecurity data triage operation retrieval system,” \nComput. Secur., vol. 76, pp. 12–31, 2018. \n \n \n \n",
  "categories": [
    "cs.LG",
    "cs.NI"
  ],
  "published": "2021-04-12",
  "updated": "2021-04-12"
}