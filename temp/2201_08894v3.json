{
  "id": "http://arxiv.org/abs/2201.08894v3",
  "title": "Reinforcement Learning for Personalized Drug Discovery and Design for Complex Diseases: A Systems Pharmacology Perspective",
  "authors": [
    "Ryan K. Tan",
    "Yang Liu",
    "Lei Xie"
  ],
  "abstract": "Many multi-genic systemic diseases such as neurological disorders,\ninflammatory diseases, and the majority of cancers do not have effective\ntreatments yet. Reinforcement learning powered systems pharmacology is a\npotentially effective approach to design personalized therapies for untreatable\ncomplex diseases. In this survey, state-of-the-art reinforcement learning\nmethods and their latest applications to drug design are reviewed. The\nchallenges on harnessing reinforcement learning for systems pharmacology and\npersonalized medicine are discussed. Potential solutions to overcome the\nchallenges are proposed. In spite of successful application of advanced\nreinforcement learning techniques to target-based drug discovery, new\nreinforcement learning strategies are needed to address systems\npharmacology-oriented personalized de novo drug design.",
  "text": "Reinforcement Learning for Personalized Drug Discovery and Design for \nComplex Diseases: A Systems Pharmacology Perspective \n \nRyan K. Tan1, Yang Liu1, Lei Xie1,2,3,* \n \n1Department of Computer Science, Hunter College, The City University of New York \n \n2Ph.D. Program in Computer Science, Biology & Biochemistry, The Graduate Center, The City \nUniversity of New York \n \n3Helen and Robert Appel Alzheimer’s Disease Research Institute, Feil Family Brain & Mind \nResearch Institute, Weill Cornell Medicine, Cornell University \n \n*Correspondence should be addressed \n \n \n \n \n \nAbstract \n \nMany multi-genic systemic diseases such as neurological disorders, inflammatory diseases, and \nthe majority of cancers do not have effective treatments yet. Reinforcement learning powered \nsystems pharmacology is a potentially effective approach to design personalized therapies for \nuntreatable complex diseases. In this survey, state-of-the-art reinforcement learning methods and \ntheir latest applications to drug design are reviewed. The challenges on harnessing reinforcement \nlearning for systems pharmacology and personalized medicine are discussed. Potential solutions \nto overcome the challenges are proposed. In spite of successful application of advanced \nreinforcement learning techniques to target-based drug discovery, new reinforcement learning \nstrategies are needed to address systems pharmacology-oriented personalized de novo drug design. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n1. Introduction \n \nDrug discovery and development is a costly and heavily time-consuming process. Despite \nmassive investment of time and money, it is infeasible to explore the whole chemical space of \ndrug-like compounds, which is composed of around 1033 small molecules [1], by using \nconventional technologies. Owing to the improvement of computer power, tremendous progress \nin deep learning (DL) and emergence of quantum computing, computer-aided drug design has the \npotential to dramatically speed up the drug discovery process. With a reasonably reliable and \naccurate computational model, it is possible to synthesize and test a small number of compounds \nprecisely interacting with expected drug target(s) and achieve desirable clinical outcomes. \nRecently, researchers have introduced various methods to generate novel molecules or optimize \nexisting molecules towards designed properties. The mostly used methods include generative \nadversarial neural-networks (GAN) [2], variational autoencoder (VAE) [3], normalizing flow [4, \n5], and reinforcement learning (RL) [6]. The molecules generated by GAN, VAE, and normalizing \nflow are biased to specific data distributions. They generally lack the ability to explore the \nunknown space that has a distribution shift or directly optimize molecules toward specific targets. \nRL, on the other hand, is able to learn or tune a generative model specifically toward the properties \nof interest and enable the model to generate molecules that have different distribution from the \ntraining data. However, RL is usually less efficient compared with other methods. Training a \nmodel with RL from scratch will either cost a long time or lead to a model that is hard to converge. \nThus, recent studies tend to combine pre-training or adversarial training with RL to take the \nadvantage of the exploitation ability of transfer or adversarial learning [7–9] and the exploration \npower of RL.  \nExisting efforts in applying RL to drug discovery mainly follow conventional one-drug-one-\ngene target-based paradigm. Although target-based drug discovery is mostly successful in tackling \nmono-genic diseases whose etiologies are driven by a single gene, it suffers from high failure rate \nespecially for multi-genic, multi-factorial, heterogeneous diseases. Moreover, a drug rarely \ninteracts only with its primary target in human bodies. Off-target effects are common, and may \ncontribute to therapeutic effects or side effects [10]. Therefore, systems pharmacology that targets \na gene-gene interaction network instead of a single gene and is tailored to individual patients has \nemerged as a new drug discovery paradigm for complex diseases. However, unlike target-based \ncompound screening that can be easily measured by drug-target binding affinities, advances of \nsystems pharmacology are hindered by the lack of effective read-outs for high-throughput \ncompound screening. Powered by the development of many high-throughput cell-based \nphenotypic detection methods, phenotype-based drug discovery starts to gain an increasing \nattention in recent years due to its ability to identify drug lead compounds in a physiologically \nrelevant condition [11]. Phenotype-based drug discovery is a target agnostic and empirical \napproach to exploit new drugs with no prior knowledge about the drug target or mechanism of \naction in a disease [12]. The use of molecular signatures as phenotype read-outs makes it possible \nto not only establish robust drug-disease associations but also deconvolute drug targets from the \nunbiased phenotype screening. Additionally, phenotype-based drug discovery has the power to \nexploit drugs for rare or poorly understood diseases such as neurological disorders and many types \nof cancers. Recently, several computational methods have been developed for high-throughput \nphenotype compound screening using chemical-induced gene expressions [13] and images [14] as \nread-outs. Tremendous progress in protein structure predictions [15, 16] and development of new \nmethods for exploring dark chemical genomics space [17] significantly enhance our ability to \ndeconvolute genome-wide target profiles for dark proteins that are not readily accessible by \nexperimental methods. Another fundamental challenge in systems pharmacology-oriented \nprecision drug design is to transfer compound activity in cell-line and animal models into \ntherapeutic efficacy in an individual patient. Although human tissue-based organoid and ex vivo \nmodels have been developed for anti-cancer drug testing, they are expensive and often infeasible \nand even unethical in many disease areas. Thus, computational approaches such as transfer \nlearning which can predict new target variables (e.g., tumor growth) of unseen samples (e.g., \npatients) from a model trained by an existing data set with different distributions (e.g., cell line \nscreens) and targets (e.g., IC50 of cell viability) can be an indispensable tool to fill in the \nknowledge gap between in vitro bioassays and in vivo clinical endpoints of drug candidates. These \ncomputational tools pave the way for systems pharmacology-oriented high-throughput compound \nscreening for personalized drug discovery.  \n \nThis review will be organized as follows. We will first give a brief overview of RL, including \ndefinitions of some key concepts, problem setting and formulation of leading methods. Then we \nwill survey the recent developments of applying deep RL to drug discovery. Finally, we will \nhighlight the challenges and opportunities of RL in systems pharmacology and personalized \nmedicine.  \n \n2. Overview of reinforcement learning \n \nIn reinforcement learning, there are usually two main characters -- an agent and an environment. \nThe agent is the key component of RL that makes sequential decisions, and the environment is the \nworld that the agent lives in. A typical RL problem can be considered as training an agent to \ninteract with an environment that follows a Markov Decision Process (MDP) [18].  \nIn each interaction (with the environment), the agent receives the information of the current \nstate 𝑠\"∈ 𝒮 and performs an action 𝑎\"∈𝒜 accordingly, where 𝒮 and 𝒜 are state and action spaces.1 \nAfter performing an action 𝑎\", the agent will transition to a new state 𝑠\"() and receive a reward 𝑟\". \nThese are characterized by underlying state transition dynamics P : 𝒮 × 𝒜 ® ∆(𝒮) and the reward \nfunction 𝑟 : 𝒮 × 𝒜  ® ℝ, i.e., P(𝑠\"()| 𝑠\", 𝑎\") and 𝑟(𝑠\", 𝑎\") are the probability and reward of taking \naction 𝑎\" in state 𝑠\" and then transitioning into state 𝑠\"(). This process repeats indefinitely or until \na predefined termination condition is met. The sequence of states and actions followed in this \nprocess constitutes a so-called trajectory 𝜏, e.g., at time 𝑡, 𝜏\" = {𝑠), 𝑎), 𝑠5, 𝑎5, …, 𝑠\", 𝑎\"}. \nMoreover, with a discount factor 𝛾 ∈ (0, 1], we can define the discounted cumulative reward under \na trajectory 𝜏 as 𝑅(𝜏) = ∑\n𝛾\"<)𝑟( 𝑠\", 𝑎\")\n=\n\">)\n. An MDP ℳ can be represented as a tuple of all \ncomponents mentioned above along with an initial state distribution 𝜇, i.e., ℳ= {𝜇, 𝒮, 𝒜, P, 𝑟, \n𝛾}.  \nIn the typical setting of MDP, agent behaves by following a (stationary) policy 𝜋, which \nspecifies a decision-making strategy in which the agent chooses an action 𝑎\" adaptively only based \non its current state 𝑠\" . Precisely, a stochastic policy is specified as 𝜋 : 𝒮 ® ∆(𝒜) while a \ndeterministic policy is of the form 𝜋 : 𝒮 ® 𝒜.  \nGiven an MDP ℳ and a policy 𝜋, we can define some functions that measures the quality of \nbeing in a state 𝑠 or taking an action 𝑎 upon 𝑠 in the long run. Specifically, we can define the value \n                                                \n1 We use 𝑡 to track the time-step, e.g., 𝑠\" is the state at time t. \nfunction 𝑉ℳ\n𝜋 : 𝒮 ® ℝ that gives discounted sum of future rewards at a state 𝑠 following an \narbitrary policy 𝜋:  \n \n𝑉ℳ\n𝜋(𝑠) = 𝔼𝜏~𝛵𝜋(𝜏)F∑\n𝛾𝑡−1𝑟(𝑠𝑡, 𝑎𝑡) |\n∞\n𝑡=1\n 𝜋,𝑠1 = 𝑠J  \n \n \n \n \n(1) \nwhere 𝑇P(𝜏) = ∏\n𝜋(𝑎\"|𝑠\")𝑃(𝑠\"()|𝑠\", 𝑎\")\n=\n\">)\n \n \nSimilarly, the action-value function (or Q-function) 𝑄ℳ\n𝜋: 𝒮 × 𝒜® ℝ can be defined as: \n \n𝑄ℳ\n𝜋(𝑠, 𝑎) = 𝔼𝜏~𝛵𝜋(𝜏)F∑\n𝛾𝑡−1𝑟(𝑠𝑡, 𝑎𝑡) |\n∞\n𝑡=1\n 𝜋, 𝑠1 = 𝑠, 𝑎1 = 𝑎J  \n \n \n \n(2) \n \nWith 𝑉ℳ\n𝜋(𝑠) and 𝑄ℳ\n𝜋(𝑠,𝑎), we can also define another value function, the advantage function \n𝐴ℳ\n𝜋(𝑠, 𝑎) = 𝑄ℳ\n𝜋(𝑠, 𝑎) −𝑉ℳ\n𝜋(𝑠), which measures the relative reward that the agent could obtain by \ntaking a particular step 𝑎 upon 𝑠 (compared to an average action).  \nThe objective of RL is to learn a policy 𝜋 that optimizes the expectation of accumulated reward \nunder a particular initial state distribution 𝜇: \n \nmaxP∈Π JZ(𝜋) = maxP∈Π 𝔼[\\~Z[𝑉ℳ\nP (𝑠))]  \n \n \n \n \n \n(3)2 \n                               =  max𝜋∈_ 𝔼𝜏~𝛵𝜋(𝜏)[𝑅(𝜏)]  \n \n \n \n \n \n(4) \nwhere 𝑇P(𝜏) = 𝜇(𝑠)) ∏\n𝜋(𝑎\"|𝑠\")𝑃(𝑠\"()|𝑠\", 𝑎\")\n=\n\">)\n \n \nWith the basics of RL terminology and notation, we will review several leading RL algorithms \nin this section, with the focus on the mathematical formulation and foundational design. We will \nstart with the model-free RL including value-based methods, policy gradient and actor-critic, and \nthen briefly introduce model-based RL. A non-exhaustive taxonomy of RL algorithms can be \nfound in Figure 1.  \n \n \nFigure 1. A taxonomy of RL algorithms \n                                                \n2 Please note in the following subsections, we will drop the subscripts of ℳ and 𝜇 from value functions and the \nobjective function JZ(𝜋) respectively given working under the same MDP ℳ. \n \n \nValue-based Methods \nA common way to optimize the RL objective J(𝜋) is by the observation that if the optimal \nvalue function or Q-function could be accurately estimated, we can easily recover an optimal \npolicy. For instance, given the optimal Q-function 𝑄∗(𝑠, 𝑎), an optimal policy 𝜋∗(𝑠) could be \nobtained by \n𝜋∗(𝑠) = argmaxb∈𝒜𝑄∗(𝑠, 𝑎)  \n \n \n \n \n \n \n \n(5) \nDynamic Programming (DP) is a classic approach to approximate these desired value \nfunctions assuming a perfect model of the environment is given, and the number of states and \nactions is small so that value functions can be represented in some lookup tables [18]. The \nfoundation of DP is centered on bellman optimality equation and bellman expectation equation, \nand they can be defined as follows with respect to Q-function:  \n𝑄∗(𝑠, 𝑎) = 𝑟(𝑠, 𝑎) + 𝛾𝔼[d~e[maxbf 𝑄∗(𝑠d, 𝑎d)]  \n \n \n \n \n(6) \n𝑄P(𝑠, 𝑎) =  𝑟(𝑠, 𝑎) +  𝛾𝔼bd~P,[d~e[𝑄P(𝑠d, 𝑎d)]   \n \n \n \n \n(7) \n       Where 𝑠d is the successor state and 𝑎d is the action performed at 𝑠d. \nAccording to these equations, two helpful mathematical operations, bellman optimality \noperator 𝒯: ℝ|𝒮||𝒜| ® ℝ|𝒮||𝒜|  and bellman evaluation operator 𝒯P ∶ ℝ|𝒮||𝒜| ® ℝ|𝒮||𝒜|  can be \nconstructed as follows: \n(𝒯𝑄)(𝑠, 𝑎) ∶=  𝑟(𝑠, 𝑎) + 𝛾𝔼[d~e[max𝑎′𝑄(𝑠′, 𝑎′)]   \n \n \n \n \n(8) \n(𝒯𝜋𝑄)(𝑠, 𝑎) ∶=  𝑟(𝑠, 𝑎) +  𝛾𝔼bd~P,[d~e[𝑄(𝑠′, 𝑎′)]   \n \n \n \n \n(9) \n \nThese operators map any Q-function from ℝ|𝒮||𝒜| to another Q-function in the same space. It’s \nhelpful to consider the Q-function as a vector of length |𝒮||𝒜| and the operators are just some \ntransformations that take the vector and output another vector with the same dimensions. More \nspecifically, considering 𝒯 and a state-action value 𝑄(𝑠, 𝑎), 𝒯 can be viewed as an assignment \nstatement that updates the original value of 𝑄(𝑠, 𝑎) with the one derived from the RHS of (8). \nThere are two pleasant properties of these operators, related to contraction mapping, which help \nthe design of the classic DP algorithms. First, given any arbitrary Q-function 𝑄, repeatedly \napplying 𝒯P or 𝒯 on 𝑄 yields 𝑄P  or 𝑄∗ respectively. This property can directly turn Bellman \noperators into update rules, providing an iterative algorithm for approximating a desired Q-\nfunction. Moreover, 𝒯P and 𝒯 have unique fixed points 𝑄P  and 𝑄∗ such that 𝒯P𝑄𝜋= 𝑄𝜋 and \n𝒯𝑄∗= 𝑄*. This second property serves as the termination condition of many classic DP algorithms \nand the building blocks of some advanced RL algorithms, such as actor-critic.  \nSince, in practice, the complete knowledge of the environment is usually unknown, and the \nnumber of states and actions can be arbitrarily large, dynamic programming is thus limited to some \nrestricted problems by its assumptions and function representation. The value-based RL, \nsometimes known as approximate dynamic programming, provides a class of algorithms that \novercome these problems, extending the framework of iterative dynamic programming with \nmodified bellman operators and function approximation. The essence of this approach is to modify \nthe update rule by approximating the bellman operators with some empirical estimators, i.e., \nestimating the RHS of equations (8) and (9) with sampling [19]. In the simplest case of using a \nsingle sample < 𝑠, 𝑎, 𝑟, 𝑠′ > where 𝑟= 𝑟(𝑠, 𝑎), the empirical bellman operators 𝒯j𝑄 and 𝒯P\nk 𝑄 can \nbe constructed as [20–22]: \n \n(𝒯j𝑄)(𝑠, 𝑎) ∶=  𝑟(𝑠, 𝑎) + 𝛾maxbf𝑄(𝑠′, 𝑎′)  \n \n \n \n \n \n(10)3 \n(𝒯P\nk 𝑄)(𝑠, 𝑎) ∶= 𝑟(𝑠, 𝑎) + 𝛾𝑄(𝑠′, 𝜋(𝑠′))  \n \n \n \n \n \n(11) \n \nA classic algorithm under this category is the Fitted Q-Iteration (FQI) [23]. In FQI, the \nalgorithm first gathers a dataset 𝐷= {< 𝑠n,  𝑎n,  𝑟n,  𝑠n() >}n\n|p|where state 𝑠n  and action  𝑎n  are \ndrawn from a pre-defined distribution 𝜈, and the next state 𝑠n() and the reward 𝑟n, are obtained \nfrom an unknown state transition probability function 𝑃(⋅|𝑠n,  𝑎n) and reward function 𝑟(𝑠n ,  𝑎n) \nof the environment. With the initialization of a parameterized Q-function 𝑄s , the Q-values \n𝑄s(𝑠n,  𝑎n) are updated towards their target 𝒯j𝑄s(𝑠n,  𝑎n) and the update rule can be formulated as \n \n𝜃← minimizes ∑\ny𝒯j𝑄s(𝑠n, 𝑎n) −𝑄s(𝑠n, 𝑎n)z\n5\n|p|\nn>)\n  \n \n \n \n \n(12) \nWhere 𝒯j𝑄s(𝑠n, 𝑎n) = 𝑟n + 𝛾maxb{|\\𝑄s(𝑠n(), 𝑎n()) \n \nEquation (12) can be interpreted as applying Monte-Carlo approximation of Bellman \noptimality 𝒯j to Q-function 𝑄s through minimizing the square loss over 𝜃. And since the Q-values \nin FQI are estimated by a parameterized function rather than a lookup table (as in DP), they are \nclosely correlated to each other, implying that a small update of 𝜃 may benefit some Q-values but \npush others away from their targets. Therefore, unlike supervised learning where the ground truth \nlabels remain unchanged, the targets 𝒯j𝑄 defined in FQI may vary every time when the parameter \nchanges, which introduces instability in training. Consequently, depending on the generalization \nand extrapolation ability of the function approximation, the contraction mapping property of DP \ncannot guarantee convergence under parametrized Q-functions, especially for those using neural \nnetworks [24]. However, there exist other variants of FQI using non-parametric approximation \narchitecture, such as k-nearest-neighbor and totally randomized trees, showing strong convergence \nproperty [25–28].   \nRegarding the value-based methods using neural networks, Deep Q-Network algorithm, \nshowing strong performance in a variety of ATARI games, can be viewed as an instantiation of \nFQI in online settings [29]. The Q-function approximator of DQN can be any typical neural \nnetwork, referred to as Q-network. The framework of DQN uses two heuristics to limit the \ninstability inherited from FQI with neural networks. First, a separated network called target \nnetwork is introduced solely for computing the targets (interpreted as the ground truth) due to their \ninconsistency. Compared to Q-network, the target network is updated less frequently to keep the \ntarget fixed for an extra amount of time. With this strategy, DQN prevents the instability from \npropagating too quickly and thus reduces the risk of divergence.  \nMoreover, Deep Q-Network is an online learning algorithm which follows its current policy \nfor exploring and data sampling. Without proper care, this may deliver a policy that has inferior \n                                                \n3 It is worth noting that the empirical bellman operator constructed in (10) is an analogue to Q-learning [30] with the \nlearning rate 𝛼= 1. Theoretically, if we want to turn (10) directly into an update rule, a large number of successor \nstates {𝑠n\nd}n\n~ are required for convergence, i.e., y𝒯j𝑄z(𝑠, 𝑎) ∶= 𝑟(𝑠, 𝑎) + 𝛾∑maxbf𝑄(𝑠n\nd, 𝑎′)\n~\nn\n [21]. Otherwise, a new \nalgorithm with a customized update rule needs to be proposed [22]. \nperformance since previously visited state-action pairs with high rewards may not guarantee to be \nrevisited due to the stochasticity of the system. Experience Replay, a replay buffer, is introduced \nto solve this issue by keeping all samples < 𝑠, 𝑎, 𝑟, 𝑠′ > from the last N steps in the memory where \nN is usually very large. Besides, ER selects samples from the memory following the uniform \ndistribution for every mini-batch update. This sampling method, though simple, effectively breaks \nthe temporal correlation between samples in the same trajectory, which helps reduce bias. With \nlarge memory and uniform sampling, mini-batch samples constructed under ER are more \nrepresentative than those from alternative methods such as Q-learning [30] which uses only one \nsample for an update. Additionally, a large buffer provides good coverage of the state-action space, \nwhich makes the policy training more exploratory and consistent, thus increasing the chance of \nachieving a more desirable policy.  \nIn addition to target network and experience replay, there are other advanced approaches that \ncould help improve the stability and efficiency of policy learning including Double DQN [31] for \noverestimation reduction, Multi-step learning for accurate target estimation [24], Dueling \nNetworks [32] for enhanced Q-function representation and Prioritized Experience Replay (PER) \nfor efficient TD-error minimization [33], along with other extensions such as Distributional DQN \n[34], Quantile Regression DQN (QR-DQN) [35], and Fully parameterized Quantile Function (FQF) \n[36].  \n \nPolicy gradient \nUnlike the value-based approach that learns a desired policy by estimating the optimal value \nfunctions, the Policy Gradient (PG) methods work directly on the objective function defined in (4) \nor some equivalent ones. In the setting of this review, we limit our focus on (4). Specifically, with \na policy π parameterized by θ ∈ Θ Ì ℝd, the goal of PG is to find a θ that maximizes J(𝜋s): \nmaxs∈•J(𝜋s)    \n \n \n \n \n \n \n \n \n(13) \nSince the search space has now shifted from the policy space Π in (4) to Θ which is continuous \nand has fixed dimensions, various numerical optimization methods could be utilized to solve (13). \nGradient ascent is one direct approach to this, which iteratively moves in the direction of steepest \nascent as defined by the gradient for maximizing J(𝜋s). Following is the expression of the gradient \nfor J(𝜋s): \n∇sJ(𝜋s) =  ∇s𝔼•~‚ƒ„(…)[𝑅(𝜏)]  \n                 = 𝔼•~‚ƒ„(•)[∑\n∇s\n=\n\">)\nlog𝜋s(𝑎\"|𝑠\")𝑅(𝜏)]  \n \n \n \n \n(14) \nWhere 𝑅(𝜏) = ∑\n𝛾\"<)𝑟( 𝑠\", 𝑎\")\n=\n\">)\n. \nAt each update iteration 𝑘, gradient ascent, with a fixed step size a, follows the update rule: \n𝜃‰() = 𝜃‰ + 𝛼∇sŠJ(𝜋sŠ)  \n \n \n \n \n \n \n \n(15) \nSince the policy gradient ∇sJ(𝜋s) is an expectation over all possible trajectories, it can be \ndirectly estimated by a set of samples where each is a trajectory collected by the agent interacting \nwith the environment while following policy 𝜋s. With the set of samples denoted as 𝐷 and the \nlength of trajectories assumed to be 𝐻, we can estimate ∇sJ(𝜃) as: \n \n∇sJ(𝜃) ≈\n)\n|p| ∑\n∇s log𝑇Ps(𝜏)[𝑅(𝜏)]\n•∈p\n   \n \n \n \n \n \n(16) \n              ≈\n)\n|p| ∑\n∑\n∇s log𝜋sy𝑎n,\"•𝑠n,\"z 𝑅(𝜏)\nŽ\n\">)\n|p|\nn>)\n   \n \n \n \n \n(17) \nWhere 𝑅(𝜏) = ∑\n𝛾\"<)𝑟(𝑠\", 𝑎\")\nŽ\n\">)\n. \n \nWith equation (17), we have derived our first policy gradient method, commonly known as \nREINFORCE [37] which serves as the foundation of PG-based methods.  \n \nBecause ∇sJ(𝜋s) is an expectation, a long-standing issue centered on PG-based methods is to \nderive an unbiased estimator of ∇sJ(𝜋s) with possibly low variance. For instance, 𝑅(𝜏) in (17) \ncan be replaced by a smaller term ∑\n𝛾\"f<\"𝑟(𝑠\"f, 𝑎\"f)\nŽ\n\"f>\"\n thanks to causality that the policy at time \n𝑡d cannot affect the reward at time 𝑡 when 𝑡 < 𝑡d. This gives us a new unbiased estimator of \n∇sJ(𝜋s) with reduced variance called Reward-to-go [38]: \n \n∇sJ(𝜃) ≈\n)\n|p| ∑\n∑\n𝛾\"<)∇s log𝜋sy𝑎n,\"•𝑠n,\"z y∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\nz\nŽ\n\">)\n|p|\nn>)\n  \n \n(18) \nRegarding the policy gradient ∇sJ(𝜋s), it can be viewed as an analogue of the gradient in \nmaximum likelihood where the term log𝜋sy𝑎n,\"•𝑠n,\"z  in equations (17) and (18) is the log \nlikelihood of the policy 𝜋s given data <𝑠n,\", 𝑎n,\">. Unlike maximum likelihood, the log likelihood \nin PG is now weighted by some discounted cumulative rewards, such as 𝑅(𝜏)  or \n∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\n. Thus, updating the parameter 𝜃 with ∇sJ(𝜋s) would change the policy \naccording to the sign of 𝑅(𝜏) or ∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\n, e.g., the chance of selecting 𝑎n,\" given 𝑠n,\" \nincreases if 𝑅(𝜏) is positive or decreases otherwise.  \nOn the other hand, if the reward function only outputs positive values and some mediocre \nactions are randomly selected for parameter updates, the agent may tend to choose these inferior \nactions even their absolute values of log𝜋sy𝑎n,\"•𝑠n,\"z are small. A popular strategy to address this \nunstable issue is to introduce an extra term, called baseline b, which can be shown to always keep \nthe estimator of ∇sJ(θ) unbiased while reducing its variance if selected properly [39]. For instance, \nby choosing an average reward over sampled trajectories as baseline, the term \ny∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\nz −𝑏 in (19) is centered around 0, which improves the sampling \nefficiency by distinguishing actions with their relative rewards. \n∇sJ(θ) ≈\n)\n|p| ∑\n∑\n𝛾\"<)∇s log𝜋sy𝑎n,\"•𝑠n,\"z\nŽ\n\">)\n[\n|p|\nn>)\ny∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\nz - b] \n(19) \nWhere b can be \n)\n|p| ∑\n𝑅(𝜏)\n|p|\nn>)\n \nThus, with proper care of designing the baseline, the policy 𝜋s could eliminate the inferior \nactions and choose more desirable ones with higher probability. In the next subsection, a learnable \nbaseline will be introduced, which is more stable and significantly reduces the variance of the \nclassic policy gradient estimators.  \nActor-Critic \nActor-critic algorithms can be viewed as an approach that combines policy gradients with \nvalue-based methods to optimize J(θ). Generally, it takes a policy 𝜋s as an actor to interact with \nthe environment, while maintaining a learnable value function as the critic to evaluate the actor’s  \nactions [24, 40]. The simplest form of actor-critic called Q actor-critic [40] can be derived directly \nfrom the reward-to-go and we denote ∇sJ(θ)\n‘  below as the estimator of ∇sJ(θ) from (18): \n𝔼F∇sJ(θ)\n‘ J = 𝔼’\n)\n|p| ∑\n∑\n𝛾\"<)𝑄P„\nk (𝑠\", 𝑎\")∇s log𝜋sy𝑎n,\"•𝑠n,\"z\nŽ\n\">)\n|p|\nn>)\n“  \n                    = 𝔼’\n)\n|p| ∑\n∑\n𝛾\"<)𝔼F𝑄P„\nk (𝑠\", 𝑎\")•𝑠\", 𝑎\"J∇s log𝜋sy𝑎n,\"•𝑠n,\"z\nŽ\n\">)\n|p|\nn>)\n“  \n                    = 𝔼’ )\n|p| ∑\n∑\n𝛾\"<)𝑄P„(𝑠\", 𝑎\")∇s log𝜋sy𝑎n,\"•𝑠n,\"z\nŽ\n\">)\n|p|\nn>)\n“  \n \n \n(20) \nWhere 𝑄P„\nk (𝑠\", 𝑎\") = ∑\n𝛾\"f<\"𝑟(𝑠n,\"f, 𝑎n,\"f)\nŽ\n\"f>\"\n \nA direct advantage of this new estimator, the one inside the expectation of (20), is that it has \nless variance than the reward-to-go. This can be shown following the tower property of conditional \nprobability and the definition of variance. The intuition is that 𝑄P„\nk (𝑠\", 𝑎\") is indeed the cumulative \nreward of a single sample trajectory that estimates 𝑄P„(𝑠\", 𝑎\"), which inevitably has larger \nvariance and so does the reward-to-go. In practice, we usually estimate 𝑄P„ by a parameterized Q-\nfunction 𝑄”\nP„and update 𝜔 following a similar procedure as Fitted Q-Iteration described in the \nprevious subsection of value-based methods. \nSimilar to (19), a baseline can be incorporated into Q actor-critic to further reduce its variance. \nA favorable choice is using a value function 𝑉–\nP„  parameterized by 𝜑 where ∇sJ(𝜋s) can be \nfurther reduced to a form of advantage function: \n∇sJ(θ) ≈\n)\n|p| ∑\n∑\n𝛾\"<)∇s log𝜋sy𝑎n,\"•𝑠n,\"z\nŽ\n\">)\n𝐴”,–\nP„ y𝑠n,\", 𝑎n,\"z\n|p|\nn>)\n   \n \n \n(21) \nWhere 𝐴”,–\nP„ y𝑠n,\", 𝑎n,\"z = 𝑄”\nP„y𝑠n,\", 𝑎n,\"z −𝑉–\nP„y𝑠n,\"z \nThe derived PG estimator in (21) is the naïve advantage actor-critic [24, 41, 42]. As the \nadvantage function measures the performance difference between a specific action and the average \naction in a given state, it’s usually considered as a favorable critic to evaluate the actor and \ndetermine which action should be chosen more often.  \nMoreover, ∇sJ(𝜋s) can be approximated in another way as specified in (22) by the observation \nthat given a sample < 𝑠, 𝑎, 𝑟, 𝑠′ >, the sum of 𝑟 and 𝛾𝑉P(𝑠′) is a sample estimate of 𝑄P (𝑠, 𝑎): \n∇sJ(θ) ≈\n)\n|p| ∑\n∑\n𝛾\"<)∇s log𝜋sy𝑎n,\"•𝑠n,\"z𝐴–\nP„y𝑠n,\", 𝑎n,\"z\nŽ\n\">)\n|p|\nn>)\n \n \n \n  \n(22) \nWhere 𝐴–\nP„y𝑠n,\", 𝑎n,\"z = 𝑟y𝑠n,\", 𝑎n,\"z + 𝛾𝑉–\nP„y𝑠n,\"()z −𝑉–\nP„y𝑠n,\"z \nThe unbiased estimator of ∇sJ(𝜋s) derived in (22) is called TD-error actor-critic [41, 43, 44]. \nTheoretically, it has a higher variance than the naïve advantage actor-critic in (21) as we replace \n𝑄”\nPy𝑠n,\", 𝑎n,\"z  with a single sample estimate 𝑟y𝑠n,\", 𝑎n,\"z + 𝛾𝑉–\nP„y𝑠n,\"()z . But in practice the \nestimator of ∇sJ(𝜋s) in (22) is more stable for policy training and has less bias as it only requires \na function estimator for the value function 𝑉–\nP„ while the naïve advantage actor-critic requires an \nextra function estimator 𝑄”\nP„ for Q-function other than 𝑉–\nP„, which thus needs more samples to \nachieve a comparable performance. Owing to the favorable property of TD-error actor-critic, \nprecisely the term of 𝐴–\nP„y𝑠n,\", 𝑎n,\"z, it has been widely adapted to many advanced actor-critic \nalgorithms such as Asynchronous Advantage Actor Critic (A3C) [42], Trust Region Policy \nOptimization (TRPO) [45] and Proximal Policy Optimization (PPO) [46].  \nThe methods discussed so far in this subsection, as well as the ones mentioned in PG, are \ngenerally on-policy methods where the target policy being learned (i.e., evaluated and improved) \nis used as the one to interact with the environment and generate samples, which is commonly \nreferred to as behavior policy [24]. On the other hand, in off-policy setting, agent usually learns a \npolicy that is different from the one being executing. Some typical examples are the methods \nintroduced in the value-based RL, such as FQI, Q-learning and DQN, where the samples used for \ntraining are not exactly generated by the current learning policy, the target policy. There is a class \nof off-policy actor-critic methods, such as Deep Deterministic Policy Gradient (DDPG) [47], Twin \nDelayed DDPG (TD3) [48] and Soft Actor-Critic (SAC) [49], that adopt the replay buffer and \nheavily depend on Q-function estimator for approximating desired policy. These methods, in \npractice, are usually more sample efficient yet less robust to hyperparameter settings than their on-\npolicy counterparts mainly due to the incorporation of off-policy samples and sometimes \nconvoluted tricks for stabilizing training.  \nModel-based RL \n \nModel-based RL is a general term that refers to a broad class of algorithms, which is widely \nseen as a potential approach to improve the sample efficiency of model-free RL [50–52]. Unlike \nmodel-free RL which learns a policy 𝜋s  and/or a value function, without modeling the \nenvironment, model-based RL explicitly estimates the transition dynamics 𝑃(𝑠\"()|𝑠\", 𝑎\"), which \nwe denote 𝑃˜(𝑠\"()|𝑠\", 𝑎\", ) parameterized by 𝜓, and uses it for planning [53] or policy learning. \nSince model-based RL has not been well standardized and there exist many variants, we will \nbriefly summarize three important types of algorithms. A common class of model-based RL \nalgorithms, related to shooting methods [54], learns the dynamics model 𝑃˜, and uses it to derive \na local planning strategy for action selection. This is typically achieved by formulating and solving \nreceding horizon problems posed in model-predictive control [55] using various trajectory \noptimization methods [56, 57]. Other model-based RL methods, such as PILCO, learn a policy 𝜋s \nin addition to the dynamics model 𝑃˜, and employ backpropagation through time with respect to \nthe expected future reward for policy search and improvement [58–60]. Dyna-style algorithms, \nanother set of model-based methods, incorporate the dynamic model 𝑃˜ to the general model-free \nframework for augmenting samples and accelerating policy learning [61–64]. Specifically, training \nunder this category usually iterates between two steps: first, the agent learns 𝑃˜ and 𝜋s with a set \nof real experiences {< 𝑠n,  𝑎n,  𝑟n,  𝑠n() >}n\n~  gathered from interacting with the environment. \nSecond, a number of ‘synthetic’ samples {< 𝑠̂n,  𝑎›n,  𝑟̂n,  𝑠̂n() >}n\nœ are generated using the current \npolicy 𝜋s under the learned dynamic model 𝑃˜ and another round of policy update is performed \nwith these ‘synthetic’ samples. Such an iterative process can significantly boost the sample \nefficiency of pure model-free learning once 𝑃˜ precisely estimates the environmental dynamics.  \n \n3. State-of-the-arts in applying reinforcement learning to drug discovery \n \n \n \nFigure 2. RL-based methods for drug design  \n \n      There are different approaches in applying reinforcement learning to drug discovery depending \non the objectives [65–67]. Distributional learning, a common task of computational drug design, \nis to generate a set of molecules distributed differently from an existing dataset, which satisfy one \nor more predefined requirements. One typical approach is to pretrain a generative model with some \nwell-established dataset and incorporate it into a RL framework for optimization. In this case, the \ngenerative model is trained as learning a policy that maximizes a RL loss function as defined in \n(3), where the reward is customized for the objective(s). Another set of problems, usually referred \nto as goal-directed learning, requires searching for the exact molecule with specific properties. \nThese tasks are usually formulated as solving a combinatorial optimization problem [68, 69], \nwhich falls exactly into the region that could be potentially solved by RL [70, 71]. In this section, \nwe will briefly review different adaptations of RL algorithms, as defined in section 2, to drug \ndiscovery, with a focus on the practical strategy and design of RL-based generative models. A \nnon-exhaustive taxonomy of RL-based methods for drug design can be found in Figure 2. \n \nModels with policy gradient \n \nPolicy gradient method has been adapted to a variety of RL-based generative models for \ndistributional learning owing to its policy stochasticity and learning capability for high-\ndimensional state and/or action spaces. Marcus et al. developed an approach REINVENT for \ndistributional learning based on REINFORCE algorithm, in which they first pre-trained a recurrent \nneural network (RNN) known as prior policy that could generate a set of samples with a similar \nstructural distribution as ChEMBL [72]. Then the agent RNN for learning target policy was \ninitialized with the same architecture and parameters as the pre-trained RNN and later tuned using \nRL to achieve higher expected score while keeping the new policy close to the prior policy. The \ngenerated molecules thus have a similar structural distribution as the ChEMBL dataset while being \noptimized towards the target properties. Since the agent RNN is pre-trained, the RL searching \nefficiency has been increased whereas the exploration capability of this model is somewhat limited.  \nRecently, the attention to polypharmacology is constantly increasing owing to its therapeutic \npotential in some complex pathologies. Dual-target ligand generative network (DLGN), leveraging \nRL and adversarial training, was developed to generate molecules that have bioactivities toward \ntwo targets [73]. With SMILES string as input, DLGN uses an RNN-based generator to produce \nnovel molecules that satisfy the predefined constraints. To make generated molecules dual-\ntargeted, DLGN utilizes two discriminators to monitor the generative process and encourages the \ngenerated molecules lying in the intersection of the two bioactive-compound distributions. The \ndrawback of this model is that, although the generator does not need to be trained with labeled \ndata, the discriminators require reliable labeled data to control the qualities of generated molecules. \nAs graph is a more natural way to represent a molecule, graph neural networks (GNNs) are \nwidely used in computational drug discovery. You et al. developed a graph convolutional policy \nnetwork (GCPN) that generates molecules under some guidance towards desired objectives while \nrestricting the output molecules to some specific chemical rules [8]. To achieve this goal, they \nleveraged RL for molecule generation and optimization under a simulated environment with a \ndesigned reward function, and used expert pre-training and adversarial training to incorporate prior \nknowledge for guidance. In another work, Sara et al. extended REINVENT with gated graph neural \nnetworks to generate molecules with desired properties [74]. To overcome the difficulty of RL \ntraining, they introduced a best agent reminder (BAR) loss, which is calculated based on the \nactions given by the current agent and the best agent, and shown to significantly improve the speed \nof convergence and the final performance. MolecularRNN is another interesting work based on \nthe REINFORCE algorithm that utilizes graph data structure to represent molecules while \nexploiting RNN as the generator. It employs a dual network model, consisting of both node-level \nand edge-level RNNs, to predict the next atom and bond given an intermediate generated molecular \ngraph [75]. With valency-based rejection sampling constraints, MolecularRNN achieves 100% \nvalidity of the generated molecules in the experiments.  \nTo balance the exploration and exploitation, Xuhan et al. employed two pretrained RNNs in \nDrugEx to generate novel molecules [76]. The two RNNs share the same architecture while having \ndifferent internal parameters. One of the RNN, which serves as the exploration network, is \npretrained on the ZINC database and then fine-tuned with desired molecules to memorize the \ndistribution of the potential drug space. This exploration network will not be updated during \ntraining. The other RNN, performing as exploitation network, is only pretrained on ZINC database, \nfollowed by policy gradient update to generate molecules with high pIC50 values for properties of \ninterests. During the training phase, the exploration and the exploitation networks are randomly \nassigned to generate the next token based on a predefined ‘exploring rate’. This helps the generated \nmolecules to be well diverse while maintaining high pIC50 value for target proteins. To improve \nthe balance of exploration and exploitation, Tiago et al. extended DrugEx by introducing a \ndynamically adaptive ‘exploring rate’ which is determined by the property of two latest batches of \ngenerated molecules [77]. Additionally, they added a penalty in reward for improving novelty \nwhen the diversity of the latest generated molecules decreases. \n \nModels with Deep Q-networks (DQNs) \n \nValue-based RL methods are usually more stable and sample efficient than those using \npolicy gradient [24]. In addition, as the policy learned by value-based approach is deterministic, \nit’s more natural to choose these methods for solving the goal-directed problems. Molecule Deep \nQ-Network (MolDQN) based on bootstrapped-DQN is a leading method for goal-directed \nlearning [78]. By allowing only valid actions, MolDQN guarantees that the generated molecules \nare 100 % valid. The molecule generation or optimization starts from an empty or a seed \nmolecule in the form of Morgan fingerprint. In the constrained optimization task, MolDQN \noptimizes the seed molecule toward the target property while maintaining its similarity to the \noriginal molecule above a designed threshold. The advantage of MolDQN is that it does not \ndepend on a pre-trained model for molecule generation, and thus it is not biased to any observed \nchemical space. Therefore, MolDNQ can in principle generate novel chemical structures or \nmolecules with desired properties but may require considerable time for exploring to achieve \nfavorable performance. \nTang et al. developed an advanced deep Q-learning network with the fragment-based drug \ndesign (ADQN-FBDD) to generate molecules specifically targeting a protein with known 3D \nstructure [79]. They designed a practical reward by considering drug-likeness, as well as specific \nfragments and pharmacophores which are protein-structure dependent. Although this approach has \na obvious limitation, which is the high dependency of 3D structures of target proteins, a recent \nbreakthrough in protein structure prediction [15] may provide it with a wide range of application \nscenarios. \n \nModels with actor-critic \n \nAs mentioned in section 2, the actor-critic method improves the sampling efficiency of policy \ngradient by learning a parameterized value function (critic). It usually involves two networks, a \npolicy network and a variance-reduced value network. Intuitively, the actor, the policy network, \ndecides what action to take based on the current policy and state whereas the critic, value network, \nevaluates the action and informs the actor how the policy should be adjusted. With the guidance \nfrom the critic, the policy training process usually becomes more stable and efficient [80]. \nGregor et al. developed a novel actor-critic architecture for 3D molecule design that exploits \nthe symmetries of the design process [81]. Specifically, it employs a state embedding network to \nobtain rotation-covariant and -invariant state representations of 3D molecular graphs, which \nimproves the generalization of the policy network and enables it to generate more complex 3D \nstructure than previous approaches. Niclas et al. introduced a fragment-based RL framework based \non actor-critic where both actor and critic are modeled with bidirectional long short-term memory \n(LSTM) networks [82]. As the research is focused more on the constrained optimization task and \nthe molecular fragments are used as atomic actions, a novel encoding approach using a balanced \nbinary tree was developed to represent the fragments. With the help of this design, the RL agent is \nmore capable of distinguishing promising steps from those mediocre ones.  \nGenerating molecules in silicon is far from the final goal of developing drugs. The first step \nafter molecular design is to synthesize designed compounds and test their effects with wet \nexperiments. However, not all computational designed molecules are synthesizable. This seriously \naffects the practical value of computational drug design. Some studies try to resolve this by taking \nsynthesizability into consideration while generating molecules. Reaction-driven objective \nreinforcement (REACTOR) empowered by actor-critic method, for example, defines the state-\naction trajectory in RL as a sequence of chemical reactions, and thus not only improves the \nsynthesizability of generated molecules, but also speeds up the exploration rate of the model in the \nchemical space [83]. Additionally, REACTOR employs a synchronous version of A3C which can \nperform parallelized policy search and thus tremendously improves the efficiency of the policy \ntraining. In addition to REACTOR, there are other works that leverage actor-critic methods for \nsynthesis-oriented molecule generation, such as Towered Actor-Critic (TAC) [84] and Policy \nGradient for Forward Synthesis (PGFS) [85]. \n \nRemarks on RL algorithms \n \nWith the jumbo chemical searching space and limited pretraining samples, machine learning \nalgorithms like GAN and VAE have difficulties to generate a set of molecules distributing \ndifferently from the training dataset. Moreover, such methods are inherently hard to be adapted for \ngoal-directed tasks, especially for those related to exhaustive search. Under such circumstances, \nRL, which does not rely on training data and can be adopted to skew the underlying distribution \nof the (pretrained) generative model or directly learn a policy to optimize a seed molecule, is a \npromising approach to tackle various drug discovery problems. However, the current RL methods \napplied for molecule generation are generally sample inefficient especially in high-dimensional \nsearch space under multiple constraints, which is usually the case for drug-like molecule space. \nRecent studies tend to incorporate pretraining and adversarial training into conventional RL \nframework to overcome this difficulty. Moreover, the quality of the molecules generated by RL-\nbased generative model highly relies on the reward function. Thus, in future studies, improving \nthe sample efficiency of RL and the accuracy of the property predicting model is the key to bring \ncomputational drug design to practical production. \n \n4. Challenges and opportunities of reinforcement learning in systems \npharmacology and personalized medicine \n \n \n \nFigure 3. Illustration of a RL framework for systems pharmacology-oriented lead optimization.  \n \nFigure 3 illustrates a RL framework for systems pharmacology-oriented personalized lead \noptimization and drug design. The molecule and the environment together constitute a state. A \nmolecule generator (agent) will first take an action based on the current state and policy to generate \na new molecule or modify a seed molecule (e.g., replacing a hydrogen atom with a methyl group). \nThen, multiplex phenotypic responses (cell viability, drug-target profile, chemical-induced gene \nexpression, pharmacokinetics etc.) in an individual patient (environment) will be predicted for the \nnewly generated molecule by machine learning, biophysics, systems biology, or other methods, \nand these responses are used as the reward for policy training. A new policy will be learned based \non observed actions, states, and rewards by performing an optimization with a multi-objective RL \n(MORL) algorithm, and a new molecule will be generated again from the updated policy. Unlike \ntarget-based compound screening where only chemical space is needed to be explored, systems \npharmacology-oriented personalized drug discovery needs to optimize the interplay of chemicals, \nthe druggable genome, and high-dimensional omics characterizations of disease models or patients \n(environment). Several barriers need to be overcome when applying RL to systems pharmacology \nand precision medicine. These include the exploration of out-of-distribution samples, \ngeneralization power of RL, adaptive multi-objective optimization [86–88], and activity cliffs of \nquantitative structure-activity relationship (QSAR) space [89].    \n \nOut-of-distribution reward function. Although rewards for several molecular properties (e.g., \nlogP and druglikeness) can be directly calculated from a given molecular structure, reward \nfunctions that are the most important for drug actions such as binding affinity and chemical-\ninduced gene expression need to be obtained from a predictive model that is dependent on machine \nlearning, mathematical or physics-based modeling. In spite of tremendous advances in deep \nlearning and availability of diverse omics data sets, robust and accurate predictions of genome-\nwide drug-target interactions and molecular phenotypic read-outs in a physiological relevant \ncondition remain as an unsolved challenging problem. The problem is rooted in biased, noisy, and \nincomplete omics data and inherited from the limitation of machine learning. In the case of \ngenome-wide drug-target prediction, only less than 10% of gene families have known small \nmolecule ligands. The remaining 90% gene families are dark matters in the chemical genomics \nspace [17]. Even for mostly studied G-protein coupled receptors (GPCRs), more than 99% \nreceptors are orphans, i.e., their endogenous or exogenous ligands are unknown. Similarly, only a \nsmall number of cell lines have annotated drug response data. It is a fundamental challenge to \ngeneralize a “well-trained” machine learning model to unseen data (e.g., patients), which lie out-\nof-the-distribution (OOD) of the training data (e.g., cell lines), so as to successfully predict \noutcomes from conditions that the model has never before encountered. While deep learning is \ncapable, in theory, of simulating any functional mapping, its generalization power is notoriously \nlimited in the case of distribution shifts [90].  \n \nGeneralization power of RL. The conventional MDP defined in section 2 is assumed that the \nproblem setting is stationary, i.e., the transition dynamics and the reward function do not change \nover time, and the agent fully observes the underlying state, i.e., the observation received by the \nagent includes perfect information of the current state. Thus, the conventional RL methods, \nespecially those falling into the model-free RL, may perform poorly in an environment that is non-\nstationary (e.g., from one patient to another) with partially observed state though they perform well \nin the conventional setting [91, 92]. Additionally, directly employing conventional RL methods to \nsolve an MDP with corrupted3 or sparse reward4 could fail catastrophically [93, 94]. The partially \nobserved, non-stationary or corrupted sparse-reward environment is the exact situation in systems \npharmacology. Due to observed chemical activity and omics data highly biased and incomplete, it \nis likely that a novel molecule is an OOD sample. Thus, no reliable reward can be assigned to this \nmolecule as mentioned above. Additionally, drug response data mainly comes from cell lines or \ndisease models. The environment in a cell line or animal model could be dramatically different \nfrom human bodies. A naïve adaptation of standard RL systems is not sufficient for systems \npharmacology. New methods are needed to improve the robustness, generalizability and \ntransferability of RL. \n \nAdaptive multi-objective optimization. To design drugs that optimize the system-level \nresponses to maximize therapeutic effects and minimize side effects, it is needed for a RL \nalgorithm to optimize multiple (sometimes conflict) objectives such as pharmacokinetics, blood-\nbrain barrier permeation, drug binding affinities to multiple targets, or chemical-induced gene \nexpression profiles. Although RL methods have been developed for multiple objectives [78], the \nfinal reward function in these methods is an linear combination of the reward functions of \nindividual objectives with a priori defined weights.  It is often difficult to define such weights. \nMoreover, the weight may be altered when an environment changes. For example, gene expression \nprofiles can be dramatically different for different patients and in different disease states. Thus, for \nconventional RL, typically with fixed weight, a generative model (the policy) needs to be trained \nfor different conditions. In addition, it is more computationally challenging to find optimal \nsolutions in the framework of Pareto optimization for the multi-objective drug design due to the \nhigh dimensionality and uncertainty of omics and bioassay data. It has been suggested that Pareto \n                                                \n3 In the corrupted reward problem, observed reward may not be an unbiased estimate of the true reward (e.g., the \nresponse data from cell lines is different than that of human bodies) \n4 In a dense-reward setting, almost every state-action pair in a trajectory is assigned with a reward. On the contrary, \nif rewards are not available for most of the state-action pairs, the setting is considered as sparse-reward. \noptimization should be integrated with evolutionary algorithms or other complexity reduction \nmethods [86, 95]. \n \nActivity cliff of QSAR. Reward drop is a phenomenon that the reward 𝑟\" received from a \ntrajectory {𝑠), 𝑎), 𝑠5, 𝑎5, …, 𝑠\", 𝑎\"} suddenly drops or oscillates dramatically within certain range \ndue to the nonsmoothness of the reward function, and many advanced RL algorithms have suffered \nfrom this problem [96]. Unfortunately, in computational molecule design, a well-known \nphenomenon in QSAR is activity cliff, in which a slight modification of chemical structure may \nlead to a dramatic activity change. The activity cliff is more complicated in systems pharmacology \nthan single-targeted drug discovery. For example, the replace of a methyl group with an ethyl \ngroup for a chemical compound that has moderate binding affinities to two targets may increase \nthe binding affinity to one of targets, but completely destroy the binding to another target due to \nsteric clash. As a result, the phenotype response modulated by this compound could be changed \nsignificantly. Such unpleasant property (of QSAR landscape) thus increases the difficulty of policy \nlearning for RL-based drug design.  \n \nTo address aforementioned challenges in adapting RL to systems pharmacology and precision \nmedicine, a synergistic integration of latest advances in RL with new development in machine \nlearning and other related fields is needed.   \n \nImproving robustness, generalizability, and transferability of RL algorithms. Recently, Ghosh \net al, showed that optimal generalization of RL at test-time corresponds to solving a partially-\nobserved Markov decision process (POMDP) that is induced by the agent’s epistemic uncertainty \nabout the test environment [92]. They proposed an algorithm, LEEP, which uses an ensemble of \npolicies to approximately learn the Bayes-optimal policy for maximizing test-time performance. \nIn another study, Agarwal et al. proposed meta-reward learning to achieve the generalizability of \nRL in a sparse-reward environment [97]. In principle, these techniques can be adapted for systems \npharmacology. \nThe majority of existing work in RL for drug design is based on the model-free approach. \nModel-based RL [6] may provide new opportunities for addressing the challenges in systems \npharmacology-oriented drug discovery for precision medicine. Different from model-free \napproach, model-based method typically employs a learned dynamics model to facilitate policy \ntraining. It is more powerful in predicting future reward, has higher sample efficiency, and bears \nstronger transferability and generality than the model-free approach. The ability of predicting \nfuture reward may help to avoid activity cliffs. Sample efficiency will be helpful to alleviate issues \nin data sparsity, biasness, and noisiness. Transferability and generalizability are critical to address \nthe OOD problem.  \nSeveral algorithms have been developed to solve multi-objective optimization problems in RL. \nYang et al. introduced an envelope Q-learning method that can quickly adapt and solve new tasks \nwith different preferences [98]. The capability of learning a single Q function over all preferences \nis important for personalized drug discovery. In another study, Chen et al. proposed a two-stage \nmodel [99] for multi-objective deep RL. At the first stage, a multi-policy soft actor-critic algorithm \nis applied to collaboratively learn multiple policies with different targets, in which each policy \ntargets on a specific scalarized objective. At the second stage, a multi-objective covariance matrix \nadaptation evolution strategy is applied to fine-tune the policy-independent parameters.  \n \nNew methods to improve reward functions for OOD data. A plethora of machine learning \napproaches including self-supervised learning, transfer learning, semi-supervised learning, meta-\nlearning and their combinations have been recently developed to address out-of-distribution \nproblems in compound screening in terms of chemicals, proteins and cell lines. Self-supervised \nlearning has enjoyed a great success in Natural Language Processing, image recognition, and \nprotein sequences modeling. Cai et al. have proposed a DIstilled Sequence Alignment Embedding \n(DISAE) transformer for predicting ligand binding to orphan receptors [100]. DISAE has been \nfurther extended to out-of-distribution prediction of receptor activities of ligand binding, \nspecifically, agonist vs antagonist [101]. An out-of-cluster meta-learning algorithm has been \nproposed to explore dark chemical genomics space that includes all Pfam families [102]. Self-\nsupervised learning and semi-supervised learning have also been applied to explore chemical space \n[103]. Transfer learning is particularly useful in predicting drug responses (both cell viability and \ngene expressions) for novel cell lines [104] or translating in vitro compound screens to clinical \noutcomes in patients [105]. These methods, when applied to reward functions, could improve the \nperformance of RL in systems pharmacology.  \nBiophysics-based methods such as molecular dynamics (MD) simulation, quantum chemistry, \nand protein-ligand docking (PLD), can be directly applied to evaluate the chemical properties, and \nthus can be used as reward functions. MD simulation and quantum chemistry calculation are \ncomputationally expensive. Emergence of quantum computing may make it feasible to incorporate \nthem directly into RL as reward functions [106]. With the advent of high-accuracy protein \nstructural models, such as AlphaFold2 [15], it now becomes feasible to use PLD to predict ligand-\nbinding sites and poses on dark proteins, on a genome-wide scale. However, PLD suffers from a \nhigh false-positive rate due to poor modeling of protein dynamics, solvation effects, crystallized \nwaters, and other challenges [107]; often, small-molecule ligands will indiscriminately 'stick' to \nconcave, pocket-like patches on protein surfaces. For these reasons, although AlphaFold2 can \naccurately predict many protein structures, the relatively low reliability of PLD still poses a \nsignificant limitation, even with a limitless supply of predicted structures [108]. Thus, the direct \napplication of PLD remains a challenge for predicting ligand binding to dark proteins. Recently, \nCai et al. have proposed an end-to-end sequence-structure-function learning framework PortalCG \n[17]: protein structure information is not used as a fixed input, but rather as an intermediate layer \nthat can be tuned using various structural and functional information. PortalCG significantly \noutperforms the direct use of PLD for predicting ligand binding to dark proteins. Thus, it could be \nan effective strategy to incorporate biophysics domain-knowledge into deep learning frameworks \nas constraints or regularizations.  \n \n5. Conclusion \n \nIn spite of the great success of RL in GO board game, computer games, and other settings with \nwell-defined environments, its application to drug discovery is still in its infancy. Current efforts \nin RL mainly focus on target-based drug design. Although RL is a promising technique, its actual \nvalue in the target-based drug discovery is overestimated in the current stage. The major hurdle \ncomes from the reward function that is based on predicted binding affinities and needs to be \nobtained from either a machine learning approach or a physics-based scoring. Both of them are \nnot reliable and accurate enough when applied to chemical compounds with novel structures. For \na machine learning approach, it remains a great challenge to predict an OOD sample, i.e., a \ngenerated molecule that falls outside the distribution of chemicals in the training data for activity \npredictions. As a result, the structure of active compounds inferred from RL may not be \nsignificantly different from those in the training data. In terms of physical-based scoring, there is \na lack of computationally efficient and accurate methods to model multiple factors including \nconformational dynamics, solvent effects, hydrogen bonding, entropies, crystallized waters, etc., \nwhich contribute to the protein-ligand binding affinity. Consequently, the scoring function is still \nsuboptimal and unreliable. In the authors’ humble opinion, existing RL approaches to de novo \ndrug design are scarcely fruitful in regard to the structural novelty of chemical compounds without \nthe significant improvement of efficiency and accuracy of binding affinity predictions.  \nAlthough current efforts in RL mainly center around the target-based drug design, systems \npharmacology and personalized medicine have emerged as new paradigms in drug discovery. They \nhave advantages over the conventional “one-drug-one-gene” approach when tackling multi-genic, \nheterogeneous diseases. On the other hand, systems pharmacology-oriented and personalized drug \ndesign imposes new challenges on RL-based drug design. Conceptually, systems pharmacology \nhas not been fully appreciated by the pharmaceutical and biotechnology industry. Technically, \nthere are few high-quality labeled data available for training a generalizable machine learning \nmodel to predict molecular phenotypic readouts suitable for systems pharmacology-oriented and \npersonalized drug design. Thus, the OOD problem in systems pharmacology is more serious than \nthe target-based drug design. Besides the OOD issue that incapacitates the reward function, the \nsuccess of RL in systems pharmacology-oriented and personalized drug design needs to overcome \nadditional roadblocks. Firstly, the generalizability and transferability are the central challenges for \nthe deployment of RL in systems pharmacology as the environments are partially observable or \nchanged dramatically (e.g., from cell lines to human tissues). Secondly, RL needs to optimize \nmultiple dynamic and often conflict rewards in a non-stationary environment while the dynamic \nmulti-objective optimization still remains as an unsolved research problem. Finally, it is necessary \nto integrate multiple heterogeneous, noisy, and high-dimensional omics data for successful \nsystems pharmacology modeling, which is a challenging task under intensive investigations.  Thus, \nthe realization of the full potential of RL in drug discovery relies on not only new developments \nin RL but also advances in other fields that are beyond RL. Specifically, RL needs to be \nsynergistically integrated with unsupervised/supervised machine learning, biophysics, systems \nbiology, multi-omics technology, and quantum computing.   \n \n \nReferences \n1. \nPolishchuk PG, Madzhidov TI, Varnek A. Estimation of the Size of Drug-like Chemical \nSpace Based on GDB-17 Data. J Comput Aided Mol Des. 2013;27(8):675–679. \n2. \nGoodfellow I, Pouget-Abadie J, Mirza M, Xu B, Warde-Farley D, Ozair S, Courville A, \nBengio Y. Generative Adversarial Networks. Commun ACM. 2014;63(11):139–144. \n3. \nKingma DP, Welling M. Auto-Encoding Variational Bayes. 2nd Int Conf Learn Represent \nICLR 2014 - Conf Track Proc. 2013. \n4. \nRezende DJ, Mohamed S. Variational Inference with Normalizing Flows. 32nd Int Conf \nMach Learn ICML 2015. 2015;2:1530–1538. \n5. \nMadhawa K, Ishiguro K, Nakago K, Abe M. GraphNVP: An Invertible Flow Model for \nGenerating Molecular Graphs. 2019. \n6. \nPack Kaelbling L, Littman ML, Moore AW, Hall S. Reinforcement Learning: A Survey. J \nArtiicial Intell Res. 1996;4:237–285. \n7. \nOlivecrona M, Blaschke T, Engkvist O, Chen H. Molecular De-Novo Design through \nDeep Reinforcement Learning. J Cheminform. 2017;9(1):48. \n8. \nYou J, Liu B, Ying R, Pande V, Leskovec J. Graph Convolutional Policy Network for \nGoal-Directed Molecular Graph Generation. Adv Neural Inf Process Syst. 2018;2018-\nDecem:6410–6421. \n9. \nGuimaraes G, Sanchez-Lengeling B, Outeiral C, Luis P, Farias C, Aspuru-Guzik A. \nObjective-Reinforced Generative Adversarial Networks (ORGAN) for Sequence \nGeneration Models. \n10. \nXie L, Xie L, Kinnings SL, Bourne PE. Novel Computational Approaches to \nPolypharmacology as a Means to Define Responses to Individual Drugs. Annu Rev \nPharmacol Toxicol. 2012;52:361–379. \n11. \nSwinney DC, Lee JA. Recent Advances in Phenotypic Drug Discovery. F1000Research. \n2020;9. \n12. \nMoffat JG, Vincent F, Lee JA, Eder J, Prunotto M. Opportunities and Challenges in \nPhenotypic Drug Discovery: An Industry Perspective. Nat Rev Drug Discov 2017 168. \n2017;16(8):531–543. \n13. \nPham TH, Qiu Y, Zeng J, Xie L, Zhang P. A Deep Learning Framework for High-\nThroughput Mechanism-Driven Phenotype Compound Screening and Its Application to \nCOVID-19 Drug Repurposing. Nat Mach Intell. 2021;3(3):247–257. \n14. \nMéndez-Lucio O, Zapata PAM, Wichard J, Rouquié D, Clevert D-A. Cell Morphology-\nGuided De Novo Hit Design by Conditioning Generative Adversarial Networks on \nPhenotypic Image Features. 2020. \n15. \nJumper J, Evans R, Pritzel A, Green T, Figurnov M, Ronneberger O, et al. Highly \nAccurate Protein Structure Prediction with AlphaFold. Nature. 2021;596(7873):583–589. \n16. \nBaek M, DiMaio F, Anishchenko I, Dauparas J, Ovchinnikov S, Lee GR, et al. Accurate \nPrediction of Protein Structures and Interactions Using a Three-Track Neural Network. \nScience. 2021;373(6557):871–876. \n17. \nCai T, Xie L, Chen M, Liu Y, He D, Zhang S, Mura C, Bourne PE, Xie L. Exploration of \nDark Chemical Genomics Space via Portal Learning: Applied to Targeting the \nUndruggable Genome and COVID-19 Anti-Infective Polypharmacology. arXiv Prepr \narXiv211114283. 2021. \n18. \nBELLMAN R. A Markovian Decision Process. J Math Mech. 1957;6(5):679–684. \n19. \nMunos R. Error Bounds for Approximate Value Iteration. In Proceedings of the 20th \nNational Conference on Artificial Intelligence - Volume 2; AAAI’05; AAAI Press, 2005; \npp 1006–1011. \n20. \nHaskell WB, Jain R, Kalathil D. Empirical Dynamic Programming. Math Oper Res. \n2013;41(2):402–429. \n21. \nSzepesvári C, Munos R. Finite Time Bounds for Sampling Based Fitted Value Iteration. \nICML 2005 - Proc 22nd Int Conf Mach Learn. 2005881–888. \n22. \nGhavamzadeh M, Kappen H, Azar M, Munos R. Speedy Q-Learning. In Advances in \nNeural Information Processing Systems; Shawe-Taylor, J., Zemel, R., Bartlett, P., Pereira, \nF., Weinberger, K. Q., Eds.; Curran Associates, Inc., 2011; Vol. 24. \n23. \nGordon GJ. Approximate Solutions to Markov Decision Processes; Carnegie Mellon \nUniversity, 1999. \n24. \nSutton RS, Barto AG. Reinforcement Learning: An Introduction; MIT press, 2018. \n25. \nErnst D, Geurts P, Wehenkel L. Tree-Based Batch Mode Reinforcement Learning. J Mach \nLearn Res. 2005;6:503–556. \n26. \nOrmoneit D, Glynn P. Kernel-Based Reinforcement Learning in Average-Cost Problems. \nIEEE Trans Automat Contr. 2002;47(10):1624–1636. \n27. \nOrmoneit D, Sen Ś. Kernel-Based Reinforcement Learning. Mach Learn. 2002;49(2):161–\n178. \n28. \nShen J, Yang LF. Theoretically Principled Deep RL Acceleration via Nearest Neighbor \nFunction Approximation. In Proceedings of the AAAI Conference on Artificial \nIntelligence; 2021; Vol. 35, pp 9558–9566. \n29. \nMnih V, Kavukcuoglu K, Silver D, Rusu AA, Veness J, Bellemare MG, et al. Human-\nLevel Control through Deep Reinforcement Learning. Nat 2015 5187540. \n2015;518(7540):529–533. \n30. \nWatkins CJCH, Dayan P. Q-Learning. Mach Learn. 1992;8(3–4):279–292. \n31. \nHasselt H. Double Q-Learning. Adv Neural Inf Process Syst. 2010;23:2613–2621. \n32. \nWang Z, Schaul T, Hessel M, Hasselt H, Lanctot M, Freitas N. Dueling Network \nArchitectures for Deep Reinforcement Learning. In International conference on machine \nlearning; 2016; pp 1995–2003. \n33. \nSchaul T, Quan J, Antonoglou I, Silver D. Prioritized Experience Replay. arXiv Prepr \narXiv151105952. 2015. \n34. \nBellemare MG, Dabney W, Munos R. A Distributional Perspective on Reinforcement \nLearning. 34th Int Conf Mach Learn ICML 2017. 2017;1:693–711. \n35. \nDabney W, Rowland M, Bellemare MG, Munos R. Distributional Reinforcement Learning \nwith Quantile Regression. 32nd AAAI Conf Artif Intell AAAI 2018. 20172892–2901. \n36. \nYang D, Zhao L, Lin Z, Qin T, Bian J, Liu T. Fully Parameterized Quantile Function for \nDistributional Reinforcement Learning. Adv Neural Inf Process Syst. 2019;32. \n37. \nWilliams RJ. Simple Statistical Gradient-Following Algorithms for Connectionist \nReinforcement Learning. Mach Learn. 1992;8(3):229–256. \n38. \nGhavamzadeh M, Mahadevan S. Hierarchical Policy Gradient Algorithms. Comput Sci \nDep Fac Publ Ser. 2003173. \n39. \nGreensmith E, Bartlett PL, Baxter J. Variance Reduction Techniques for Gradient \nEstimates in Reinforcement Learning. J Mach Learn Res. 2004;5(9). \n40. \nKonda VR, Tsitsiklis JN. Actor-Critic Algorithms. In Advances in neural information \nprocessing systems; 2000; pp 1008–1014. \n41. \nDegris T, Pilarski PM, Sutton RS. Model-Free Reinforcement Learning with Continuous \nAction in Practice. In 2012 American Control Conference (ACC); 2012; pp 2177–2182. \n42. \nMnih V, Badia AP, Mirza M, Graves A, Lillicrap T, Harley T, Silver D, Kavukcuoglu K. \nAsynchronous Methods for Deep Reinforcement Learning. In International conference on \nmachine learning; 2016; pp 1928–1937. \n43. \nSchulman J, Moritz P, Levine S, Jordan M, Abbeel P. High-Dimensional Continuous \nControl Using Generalized Advantage Estimation. arXiv Prepr arXiv150602438. 2015. \n44. \nKimura H, Kobayashi S. An Analysis of Actor/Critic Algorithms Using Eligibility Traces: \nReinforcement Learning with Imperfect Value Function. In ICML; 1998. \n45. \nSchulman J, Levine S, Abbeel P, Jordan MI, Moritz P. Trust Region Policy Optimization. \nArXiv. 2015;abs/1502.0. \n46. \nSchulman J, Wolski F, Dhariwal P, Radford A, Klimov O. Proximal Policy Optimization \nAlgorithms. ArXiv. 2017;abs/1707.0. \n47. \nLillicrap TP, Hunt JJ, Pritzel A, Heess NMO, Erez T, Tassa Y, Silver D, Wierstra D. \nContinuous Control with Deep Reinforcement Learning. CoRR. 2016;abs/1509.0. \n48. \nFujimoto S, van Hoof H, Meger D. Addressing Function Approximation Error in Actor-\nCritic Methods. ArXiv. 2018;abs/1802.0. \n49. \nHaarnoja T, Zhou A, Abbeel P, Levine S. Soft Actor-Critic: Off-Policy Maximum \nEntropy Deep Reinforcement Learning with a Stochastic Actor. In ICML; 2018. \n50. \nKaiser Ł, Babaeizadeh M, Miłos P, Zej Osí Nski B, Campbell RH, Czechowski K, et al. \nModel-Based Reinforcement Learning for Atari. 2019. \n51. \nAtkeson CG, Santamaria JC. A Comparison of Direct and Model-Based Reinforcement \nLearning. In Proceedings of International Conference on Robotics and Automation; 1997; \nVol. 4, pp 3557–3564 vol.4. \n52. \nBerkenkamp F, Turchetta M, Schoellig A, Krause A. Safe Model-Based Reinforcement \nLearning with Stability Guarantees. In Advances in Neural Information Processing \nSystems; Guyon, I., Luxburg, U. V, Bengio, S., Wallach, H., Fergus, R., Vishwanathan, \nS., Garnett, R., Eds.; Curran Associates, Inc., 2017; Vol. 30. \n53. \nLaValle SM. Planning Algorithms; Cambridge University Press, 2006. \n54. \nRao A V. A Survey of Numerical Methods for Optimal Control. Adv Astronaut Sci. \n2009;135(1):497–528. \n55. \nQin SJ, Badgwell TA. A Survey of Industrial Model Predictive Control Technology. \nControl Eng Pract. 2003;11(7):733–764. \n56. \nChua K, Calandra R, McAllister R, Levine S. Deep Reinforcement Learning in a Handful \nof Trials Using Probabilistic Dynamics Models. Adv Neural Inf Process Syst. 2018;2018-\nDecember:4754–4765. \n57. \nNagabandi A, Kahn G, Fearing RS, Levine S. Neural Network Dynamics for Model-\nBased Deep Reinforcement Learning with Model-Free Fine-Tuning. Proc - IEEE Int Conf \nRobot Autom. 20177579–7586. \n58. \nDeisenroth M, Rasmussen C. PILCO: A Model-Based and Data-Efficient Approach to \nPolicy Search.; 2011. \n59. \nLevine S, Koltun V. Guided Policy Search. In International conference on machine \nlearning; PMLR, 2013; pp 1–9. \n60. \nHeess N, Wayne G, Silver D, Lillicrap T, Tassa Y, Erez T. Learning Continuous Control \nPolicies by Stochastic Value Gradients. Adv Neural Inf Process Syst. 2015;2015-\nJanuary:2944–2952. \n61. \nSutton RS. Integrated Architectures for Learning, Planning, and Reacting Based on \nApproximating Dynamic Programming. In In Proceedings of the Seventh International \nConference on Machine Learning; Morgan Kaufmann, 1990; pp 216–224. \n62. \nKurutach T, Clavera I, Duan Y, Tamar A, Abbeel P. Model-Ensemble Trust-Region \nPolicy Optimization. 6th Int Conf Learn Represent ICLR 2018 - Conf Track Proc. 2018. \n63. \nParmas P, Rasmussen CE, Peters J, Doya K. PIPPS: Flexible Model-Based Policy Search \nRobust to the Curse of Chaos. 35th Int Conf Mach Learn ICML 2018. 2019;9:6463–6472. \n64. \nJanner M, Fu J, Zhang M, Levine S. When to Trust Your Model: Model-Based Policy \nOptimization. Adv Neural Inf Process Syst. 2019;32. \n65. \nPolykovskiy D, Zhebrak A, Sanchez-Lengeling B, Golovanov S, Tatanov O, Belyaev S, et \nal. Molecular Sets (MOSES): A Benchmarking Platform for Molecular Generation \nModels. Front Pharmacol. 2020;11. \n66. \nBrown N, Fiscato M, Segler MHS, Vaucher AC. GuacaMol: Benchmarking Models for de \nNovo Molecular Design. J Chem Inf Model. 2019;59(3):1096–1108. \n67. \nNeil D, Segler MHS, Guasch L, Ahmed M, Plumbley D, Sellwood M, Brown N. \nExploring Deep Recurrent Models with Reinforcement Learning for Molecule Design. In \nICLR; 2018. \n68. \nYang X, Aasawat TK, Yoshizoe K. Practical Massively Parallel Monte-Carlo Tree Search \nApplied to Molecular Design. 2020. \n69. \nAhn S, Kim J, Lee H, Shin J. Guiding Deep Molecular Optimization with Genetic \nExploration. Adv Neural Inf Process Syst. 2020;2020-December. \n70. \nBengio Y, Lodi A, Prouvost A. Machine Learning for Combinatorial Optimization: A \nMethodological Tour d’horizon. Eur J Oper Res. 2021;290(2):405–421. \n71. \nBello I, Pham H, Le Q V., Norouzi M, Bengio S. Neural Combinatorial Optimization with \nReinforcement Learning. 5th Int Conf Learn Represent ICLR 2017 - Work Track Proc. \n2016. \n72. \nOlivecrona M, Blaschke T, Engkvist O, Chen H. Molecular De-Novo Design through \nDeep Reinforcement Learning. J Cheminform. 2017;9(1):1–14. \n73. \nLu F, Li M, Min X, Li C, Zeng X. De Novo Generation of Dual-Target Ligands Using \nAdversarial Training and Reinforcement Learning. Brief Bioinform. 2021;22(6). \n74. \nAtance SR, Diez JV, Engkvist O, Olsson S, Mercado R. De Novo Drug Design Using \nReinforcement Learning with Graph-Based Deep Generative Models. 2021. \n75. \nPopova M, Shvets M, Oliva J, Isayev O. MolecularRNN: Generating Realistic Molecular \nGraphs with Optimized Properties. arXiv Prepr arXiv190513372. 2019. \n76. \nLiu X, Ye K, van Vlijmen HWT, IJzerman AP, van Westen GJP. An Exploration Strategy \nImproves the Diversity of de Novo Ligands Using Deep Reinforcement Learning: A Case \nfor the Adenosine A2A Receptor. J Cheminform. 2019;11(1):1–16. \n77. \nPereira T, Abbasi M, Ribeiro B, Arrais JP. Diversity Oriented Deep Reinforcement \nLearning for Targeted Molecule Generation. J Cheminform. 2021;13(1). \n78. \nZhou Z, Kearnes S, Li L, Zare RN, Riley P. Optimization of Molecules via Deep \nReinforcement Learning. Sci Rep. 2019;9(1):1–10. \n79. \nTang B, He F, Liu D, Fang M, Wu Z, Xu D. AI-Aided Design of Novel Targeted Covalent \nInhibitors against SARS-CoV-2. bioRxiv  Prepr Serv Biol. 2020. \n80. \nWen J, Kumar S, Gummadi R, Schuurmans D. Characterizing the Gap Between Actor-\nCritic and Policy Gradient. arXiv Prepr arXiv210606932. 2021. \n81. \nSimm GNC, Pinsler R, Csányi G, Hernández-Lobato JM. Symmetry-Aware Actor-Critic \nfor 3D Molecular Design. ArXiv. 2021;abs/2011.1. \n82. \nStåhl N, Falkman G, Karlsson A, Mathiason G, Boström J. Deep Reinforcement Learning \nfor Multiparameter Optimization in de Novo Drug Design. 2019. \n83. \nHorwood J, Noutahi E. Molecular Design in Synthetically Accessible Chemical Space via \nDeep Reinforcement Learning. ACS Omega. 2020;5(51):32984–32994. \n84. \nGottipati SK, Pathak Y, Sattarov B, Sahir, Nuttall R, Amini M, Taylor ME, Chandar APS. \nTowered Actor Critic For Handling Multiple Action Types In Reinforcement Learning \nFor Drug Discovery. In AAAI; 2021. \n85. \nGottipati SK, Sattarov B, Niu S, Pathak Y, Wei H, Liu S, et al. Learning To Navigate The \nSynthetically Accessible Chemical Space Using Reinforcement Learning. In ICML; 2020. \n86. \nLambrinidis G, Tsantili-Kakoulidou A. Challenges with Multi-Objective QSAR in Drug \nDiscovery. Expert Opin Drug Discov. 2018;13(9):851–859. \n87. \nLi Z, Cho BR, Melloy BJ. Quality by Design Studies on Multi-Response Pharmaceutical \nFormulation Modeling and Optimization. J Pharm Innov. 2013;8(1):28–44. \n88. \nCruz-Monteagudo M, Schürer S, Tejera E, Pérez-Castillo Y, Medina-Franco JL, Sánchez-\nRodríguez A, Borges F. Systemic QSAR and Phenotypic Virtual Screening: Chasing \nButterflies in Drug Discovery. Drug Discov Today. 2017;22(7):994–1007. \n89. \nCruz-Monteagudo M, Medina-Franco JL, Pérez-Castillo Y, Nicolotti O, Cordeiro MNDS, \nBorges F. Activity Cliffs in Drug Discovery: Dr Jekyll or Mr Hyde? Drug Discov Today. \n2014;19(8):1069–1080. \n90. \nScholkopf B, Locatello F, Bauer S, Ke NR, Kalchbrenner N, Goyal A, Bengio Y. Towards \nCausal Representation Learning. Proc IEEE. 2021;109(5):612–634. \n91. \nChandak Y, Theocharous G, Shankar S, White M, Mahadevan S, Thomas PS. Optimizing \nfor the Future in Non-Stationary MDPs. 37th Int Conf Mach Learn ICML 2020. \n2020;PartF168147-2:1391–1402. \n92. \nGhosh D, Rahme J, Kumar A, Zhang A, Adams RP, Levine S. Why Generalization in RL \nIs Difficult: Epistemic POMDPs and Implicit Partial Observability. Adv Neural Inf \nProcess Syst. 2021;34. \n93. \nEveritt T, Krakovna V, Orseau L, Legg S. Reinforcement Learning with a Corrupted \nReward Channel. IJCAI Int Jt Conf Artif Intell. 2017;0:4705–4713. \n94. \nRiedmiller M, Hafner R, Lampe T, Neunert M, Degrave J, Van De Wiele T, Mnih V, \nHeess N, Springenberg T. Learning by Playing - Solving Sparse Reward Tasks from \nScratch. 35th Int Conf Mach Learn ICML 2018. 2018;10:6910–6919. \n95. \nSánchez-Rodríguez A, Pérez-Castillo Y, Schürer SC, Nicolotti O, Mangiatordi GF, \nBorges F, Cordeiro MNDS, Tejera E, Medina-Franco JL, Cruz-Monteagudo M. From \nFlamingo Dance to (Desirable) Drug Discovery: A Nature-Inspired Approach. Drug \nDiscov Today. 2017;22(10):1489–1502. \n96. \nDong Y, Zhang S, Liu X, Zhang Y, Shen T. Variance Aware Reward Smoothing for Deep \nReinforcement Learning. Neurocomputing. 2021;458:327–335. \n97. \nAgarwal R, Liang C, Schuurmans D, Norouzi M. Learning to Generalize from Sparse and \nUnderspecified Rewards. 36th Int Conf Mach Learn ICML 2019. 2019;2019-June:184–\n194. \n98. \nYang R, Sun X, Narasimhan K. A Generalized Algorithm for Multi-Objective \nReinforcement Learning and Policy Adaptation. Adv Neural Inf Process Syst. 2019;32. \n99. \nChen D, Wang Y, Gao W. A Two-Stage Multi-Objective Deep Reinforcement Learning \nFramework. Front Artif Intell Appl. 2020;325:1063–1070. \n100. Cai T, Lim H, Abbu KA, Qiu Y, Nussinov R, Xie L. MSA-Regularized Protein Sequence \nTransformer toward Predicting Genome-Wide Chemical-Protein Interactions: Application \nto GPCRome Deorphanization. J Chem Inf Model. 2021;61(4):1570–1582. \n101. Cai T, Abbu KA, Liu Y, Xie L. DeepREAL: A Deep Learning Powered Multi-Scale \nModeling Framework Towards Predicting Out-of-Distribution Receptor Activity of \nLigand Binding. bioRxiv. 20212021.09.12.460001. \n102. Mistry J, Chuguransky S, Williams L, Qureshi M, Salazar GA, Sonnhammer ELL, et al. \nPfam: The Protein Families Database in 2021. Nucleic Acids Res. 2021;49(D1):D412–\nD419. \n103. Liu Y, Wu Y, Shen X, Xie L. COVID-19 Multi-Targeted Drug Repurposing Using Few-\nShot Learning. Front Bioinforma. 2021;0:18. \n104. Liu Q, Qiu Y, Xie L. Predictive Modeling of Multiplex Chemical Phenomics for Novel \nCells and Patients: Applied to Personalized Alzheimer’s Disease Drug Repurposing. \nbioRxiv. 20212021.08.09.455708. \n105. He D, Liu Q, Xie L. Robust Prediction of Patient-Specific Clinical Response to Unseen \nDrugs From in Vitro Screens Using Context-Aware Deconfounding Autoencoder. \nbioRxiv. 2021. \n106. Marx V. Biology Begins to Tangle with Quantum Computing. Nat Methods 2021 187. \n2021;18(7):715–719. \n107. Grinter SZ, Zou X. Challenges, Applications, and Recent Advances of Protein-Ligand \nDocking in Structure-Based Drug Design. Molecules. 2014;19(7):10150–10176. \n108. Jaiteh M, Rodríguez-Espigares I, Selent J, Carlsson J. Performance of Virtual Screening \nagainst GPCR Homology Models: Impact of Template Selection and Treatment of \nBinding Site Plasticity. PLOS Comput Biol. 2020;16(3):e1007680. \n \n \n",
  "categories": [
    "q-bio.BM",
    "cs.LG"
  ],
  "published": "2022-01-21",
  "updated": "2022-02-23"
}