{
  "id": "http://arxiv.org/abs/2305.14044v1",
  "title": "Process-To-Text: A Framework for the Quantitative Description of Processes in Natural Language",
  "authors": [
    "Yago Fontenla-Seco",
    "Alberto Bugarín-Diz",
    "Manuel Lama"
  ],
  "abstract": "In this paper we present the Process-To-Text (P2T) framework for the\nautomatic generation of textual descriptive explanations of processes. P2T\nintegrates three AI paradigms: process mining for extracting temporal and\nstructural information from a process, fuzzy linguistic protoforms for\nmodelling uncertain terms, and natural language generation for building the\nexplanations. A real use-case in the cardiology domain is presented, showing\nthe potential of P2T for providing natural language explanations addressed to\nspecialists.",
  "text": "Process-To-Text: a framework for the quantitative\ndescription of processes in natural language\nYago Fontenla-Seco1[0000−0002−7566−0164], Manuel Lama1[0000−0001−7195−6155],\nand Alberto Bugarín1[0000−0003−3574−3843]\nCentro Singular de Investigación en Tecnoloxías Intelixentes (CiTIUS)\nUniversidade de Santiago de Compostela, Spain.\n{yago.fontenla.seco, manuel.lama, alberto.bugarin.diz,}@usc.es\nAbstract. In this paper we present the Process-To-Text (P2T) frame-\nwork for the automatic generation of textual descriptive explanations of\nprocesses. P2T integrates three AI paradigms: process mining for extract-\ning temporal and structural information from a process, fuzzy linguistic\nprotoforms for modelling uncertain terms, and natural language gener-\nation for building the explanations. A real use-case in the cardiology\ndomain is presented, showing the potential of P2T for providing natural\nlanguage explanations addressed to specialists.\nKeywords: Process mining · Natural Language Generation · Explain-\nable AI\nThis version of the article has been accepted for publication, after peer review and is subject to\nSpringer Nature’s AM terms of use, but is not the Version of Record and does not reflect post-\nacceptance improvements, or any corrections. The Version of Record is available online at: http:\n//dx.doi.org/10.1007/978-3-030-73959-1_19. © Springer Nature Switzerland AG 2021 F. Heintz\net al. (Eds.): TAILOR 2020, LNAI 12641, pp. 212–219, 2021.\n1\nIntroduction\nProcesses constitute a useful way of representing and structuring the activities\nin information systems. The Process Mining field offers techniques to discover,\nmonitor and enhance real processes extracted from the event logs generated by\nprocesses execution, allowing to understand what is really happening in a pro-\ncess, which may be different from what designers thought [2]. Process models are\nusually represented with different notations that represent in a graphical man-\nner the activities that take place in a process as well as the dependencies among\nthem. Process models tend to be enhanced with properties such as temporal\ninformation, process execution-related statistics, trends of process key indica-\ntors, interactions between the resources involved in the process execution, etc.\nInformation about these properties is shown to users through visual analytic\ntechniques that help to understand what is happening in the process execution\nfrom different perspectives. However, in real scenarios process models are highly\ncomplex, with many relations between activities, which make them nearly im-\npossible to be interpreted and understood by the users [2]. Furthermore, the\namount of information that can be added to enhance the process description is\nalso very high, and it is quite difficult for users to establish its relation with the\nprocess model. Additional analytics which summarize quantitative relevant in-\nformation about a process, such as frequent or infrequent patterns, that make it\neasier to focus on finding usual or unexpected behaviors, are also very useful. [4]\narXiv:2305.14044v1  [cs.CL]  23 May 2023\n2\nY. Fontenla-Seco et al.\nNevertheless, their correct interpretation is usually difficult for users, since\nthey need to have a deep knowledge about process modelling and process related\nvisual analytics. In this regard, some approaches have been described to auto-\nmatically generate natural language descriptions of a process aiming to provide\nusers with a better understanding of it [10]. These descriptions aim to explain in\na comprehensible way, adapted to the user information needs, the most relevant\ninformation of the process. In general, textual information is complementary to\nprocess model visualization, which is the usual way of conveying information to\nusers.\nNatural Language Generation (NLG) [6, 16] provides different methods for\ngenerating insights on data through natural language. Its aim is to provide users\nwith textual descriptions that summarize the most relevant information of the\ndata that is being described. Natural language is an effective way of conveying\ninformation to humans because i) it does not rely on human capability to identify\nor understand visual patterns or trends; and ii) it may include uncertain terms\nof expressions, which are very effective for communication [13]. Research sug-\ngests that in some specialized domains knowledge and expertise are required to\nunderstand graphical information [12] and proves that specialists can take better\ndecisions based on textual summaries than on graphical displays [8]. With the\nintegration of NLG and process model and analytics visualization, users with\nlimited expertise on process modeling and analysis are provided with an Au-\ntoAI tool that allows them to understand the relevant information about what\nis really happening within a process.\nIn the state-of-the-art, techniques for process textual description focus on\ntwo perspectives. On the one hand, the Control-Flow perspective aims to align\na Business Process Model Notation (BPMN) representation of a process model\nwith its corresponding textual description [1,10,11,17]. The aim of this proposal\nis to, first, facilitate users to understand the process model structure and the\ndependencies between activities and how resources are used and second, detect\ninconsistencies in the process model such as missing activities, activities in differ-\nent order, or misalignments in order to maintain a stable process model through\nthe different stakeholders of an organization. The main drawback of these ap-\nproaches is that they focus on hand-made processes (not discovered from real\ndata) with a well-defined structure, and draw all their attention in the validation\nstep of the process design phase. Preventing its application to process models\nextracted from real-life data, usually unstructured, with many relations between\nactivities, including frequent loops, parallels and choices. On the other hand,\nCase Description techniques focus on generating textual descriptions about the\nexecution of single activities or activity sequences that have been registered in an\nevent log [5]. The underlying process model is not discovered from the event log,\ntherefore neither the process structure is considered nor the relations between\nactivities. So, these last techniques do not provide a faithful description of what\nhas happened during the process execution.\nIn this paper, we present the Process-To-Text (P2T) framework, a process\nmining-based framework (the real process model is discovered from the event\nQuantitative description of processes in Natural Language\n3\nFig. 1. Framework for the linguistic description of processes\ndata) for the automatic generation of natural language descriptions of processes.\nDescriptions include information from both the control-flow, case and specially\ntime perspectives, the later being usually neglected in the literature. P2T is\nbased on a Data-to-Text (D2T) architecture [15] using linguistic protoforms (as\na way to handle imprecision) that will be generated into natural language texts\nfollowing a hybrid template-based realization approach.\n2\nP2T: a framework for textual description of processes\nFig. 1 depicts the Process-To-Text (P2T) framework, for the automatic gener-\nation of textual descriptive explanations of processes. This framework is based\non the most widely used architecture for D2T systems [15], which defines a\npipeline composed of four stages: signal analysis, data interpretation, document\nplanning, and microplanning and realization. P2T does not include the signal\nanalysis stage since data input are not numerical, but event logs. Also, the doc-\nument planning stage is subsumed in the microplanning and realization stage.\n4\nY. Fontenla-Seco et al.\nProcess discovery. The input of the data interpretation stage is an event log,\ndefined as a multiset of traces. A trace is a particular execution of a process (i.e.,\na case), and it is represented as an ordered sequence of events, being an event the\nexecution of an activity, which contains context information about the execution\nsaid activity (e.g. timestamp, the case it belongs to, the resources involved in\nits execution, the process variables modified, etc.). However, the event log itself\nis not used as a direct input to generate the descriptions. Firstly, the process\nmodel has to be discovered from the event log by applying a process mining\nalgorithm [2, 3], which, traditionally have followed heuristic [19], inductive [9],\nor evolutionary computation [18] based approaches.\nProcess Analysis. Once the process is mined, the log is replayed (each trace is\nplayed over the discovered model) [2]. This gives us both temporal and frequency-\nbased information about activities, arcs (relations between activities) and traces\nthat can be as well used to extract frequent and infrequent behavioral patterns\n[4]. Then, this information is summarized into indicators (e.g. average duration\nand frequency of the relation between activities, average and mode duration of\na path, changes of mean duration of an activity within a period, etc.) which are\ncomputed in the modules depicted in Figure 1 in the process analysis phase.\nThis phase is part of the framework and indicators are computed for any case\nor domain.\nProtoform generation. A protoform [20] is an abstracted summary which\nserves to identify the semantic structure of the object to which applies. In P2T,\nprotoforms include fuzzy temporal references for providing information about\nthe temporal dimension of activities, arcs, or traces. For example, the textual\ndescription Most executions of activity α1 last ten minutes in average more than\nthose of activity α2 is generated by the protoform Q B activity lasts A. This is\nan activity-related protoform where Q is the quantifier Most B is a qualifier, in\nthis case, activity α1, and A is the summarizer used to describe activity α1 ten\nminutes in average more than those of activity α2. Note that behavioral patterns\ncan be expressed through relations between activities, meaning that pattern-\nrelated protoforms are compositions of arcs-related protoforms. Protoforms have\nabstraction levels, as summarization does, this allows for a general abstracted\nsummary to produce multiple different summaries depending on the knowledge\nused for its realization.\nDocument planning and Realization Its objective is to generate the natu-\nral language descriptions of the process, taking the protoforms, templates, and\nexpert knowledge as inputs. In our model we follow a hybrid template-based re-\nalization, which uses some domain expert knowledge and is more rich and flexible\nthan basic fill-in-the-gap approaches, but simpler and quicker than full fledged\nNLG system implementations. The SimpleNLG-ES [14] (Spanish version of the\nSimpleNLG realization engine) realization engine is used in this stage.\nQuantitative description of processes in Natural Language\n5\n3\nCase study\nWe have applied our framework in a real case study in the health domain:\nthe process related to the patients’ management in the Valvulopathy Unit of\nthe Cardiology Department of the University Hospital of Santiago de Com-\npostela. In this Unit, consultations and medical examinations, such as radiog-\nraphy, echocardiogram or Computed Tomography (CT) scans, are performed to\npatients with aortic stenosis in order to decide the treatment (including surgery)\nthey will undergo. Other information like unexpected events (e.g. emergencies,\nnon-programmed admissions) and patient management activities (inclusion in\nthe process, revisions, etc) are also recorded in the event log data.\nMedical professionals have a real interest in applying process mining tech-\nniques to this process, since it allows them to extract valuable knowledge about\nthe Unit like, relations between age, sex, admittance (emergency or normal ad-\nmission) and the number of successful surgeries or delay between activities, the\ndelays between crucial activities (such as the admission of a patient and its\nsurgery) due to tests like CT scans or echocardiograms, the different paths of\nthe process which patients with different attributes follow, etc. The main goal\nto reach with all this information is to reduce the delays between process activi-\nties, prevent the repetition of activities (loops in the process), minimize patient\nmanagement time, optimize resources and most important, increase the number\nof successful treatments.\nIn Fig. 2 the model that describes this process is shown, it has been discovered\nfrom an event log with data on 639 patients.\nSince medical, management activities and exceptions are recorded, and since\npatients’ management depends on their pathological state, the frequency of each\npath (sequence of activities on a trace) in the process is very low (only the twenty\nmost frequent paths from the six-hundred twenty-two total are shown in the\nfigure) giving place to a highly complex model. This makes it difficult for medical\nprofessionals to understand what happens within the process even when it is\ngraphically represented. To solve this, linguistic descriptions of the main process\nanalytics are generated, as shown in Table 1, facilitating the understanding of\ntemporal relations and delays between activities and traces, which is the main\nconcern of domain experts in this regard.\n4\nConclusions and Future Work\nOur P2T framework integrates the process mining, natural language genera-\ntion, and fuzzy linguistic protoforms paradigms for the automatic generation\nof textual descriptive explanations of processes, which include quantitative in-\nformation (i.e., frequent and infrequent behavior, temporal distances between\nevents and frequency of the relationships between events). A real use-case is pre-\nsented, showing the potential of P2T for providing natural language explanations\naddressed to cardiology specialists about consultations and interventions of the\npatients of the valvulopathy unit. As future work, extensive human validation\nof the generated descriptions will be conducted with domain experts.\n6\nY. Fontenla-Seco et al.\nFig. 2. Model of the Valvulopathy process represented with the InVerbis Analytics\nvisualization tools [7].\nTable 1. Textual descriptions generated for the valvulopathy process\n- During the first half of year 2018, 52% less Surgical Interventions were registered\ncompared to the second half of that same year. period.\n- In the process, 78% less Surgical Interventions than Coronographies were registered.\n- Waiting time between Consultations is around 5 weeks and 6 days in average.\n- Waiting time between a Coronography and a CAT is around 6 weeks in average.\n- Around 7 weeks and 3 days after the Medical-Surgical Session a patient undergoes\nSurgical Intervention.\n- 6% of times, after the First Medical-Surgical Session, a Second Session is held around\n5 weeks and 3 days later. On the contrary, 33% of times, patient undergoes Surgical\nIntervention around 7 weeks and 3 days later.\n- Patients who go through Assessment, Medical-Surgical Session and Surgical Inter-\nvention stay for 114 days in average at the cardiology service.\nAcknowledgments\nThis research was funded by the Spanish Ministry for Science, Innovation and\nUniversities, the Galician Ministry of Education, University and Professional\nTraining and the ERDF/FEDER program (grants TIN2017-84796-C2-1-R,\nED431C2018/29 and ED431G2019/04).\nQuantitative description of processes in Natural Language\n7\nReferences\n1. van der Aa, H., Leopold, H., Reijers, H.: Detecting inconsistencies between pro-\ncess models and textual descriptions. In: Proceedings 13th Int. Conf. on Business\nProcess Management, BPM 2015. vol. 9253, pp. 90–105. Springer (2015)\n2. van der Aalst, W.M.P.: Process Mining: Data Science in Action. Springer (2016)\n3. Augusto, A., Conforti, R., Dumas, M., Rosa, M.L., Maggi, F.M., Marrella, A.,\nMecella, M., Soo, A.: Automated discovery of process models from event logs:\nReview and benchmark. IEEE Transactions on Knowledge and Data Engineering\n31(4), 686–705 (2019)\n4. Chapela-Campa, D., Mucientes, M., Lama, M.: Mining frequent patterns in process\nmodels. Information Sciences 472, 235–257 (2019)\n5. Dijkman, R.M., Wilbik, A.: Linguistic summarization of event logs: A practical\napproach. Information Systems 67, 114–125 (2017)\n6. Gatt, A., Krahmer, E.: Survey of the state of the art in natural language generation:\nCore tasks, applications and evaluation. J. Artif. Int. Res. 61(1), 65–170 (Jan 2018)\n7. InVerbis Analytics: https://processmining.inverbisanalytics.com/, [Online;\naccessed in February 2021]\n8. Law, A.S., Freer, Y., Hunter, J., Logie, R.H., Mcintosh, N., Quinn, J.: A compar-\nison of graphical and textual presentations of time series data to support medical\ndecision making in the neonatal intensive care unit. Journal of Clinical Monitoring\nand Computing 19(3), 183–194 (2005)\n9. Leemans, S.J.J., Fahland, D., van der Aalst, W.M.: Discovering block-structured\nprocess models from event logs - a constructive approach. In: Application and\nTheory of Petri Nets and Concurrency. pp. 311–329. Springer (2013)\n10. Leopold, H., Mendling, J., Polyvyanyy, A.: Generating natural language texts from\nbusiness process models. Lecture Notes in Computer Science 7328, 64–79 (2012)\n11. Leopold, H., Mendling, J., Polyvyanyy, A.: Supporting process model validation\nthrough natural language generation. IEEE Trans. Soft. Eng. 40(8), 818–840 (2014)\n12. Petre, M.: Why looking isn’t always seeing: Readership skills and graphical pro-\ngramming. Commun. ACM 38, 33–44 (06 1995)\n13. Ramos-Soto, A., Bugarín, A., Barro, S.: Fuzzy sets across the natural language\ngeneration pipeline. Progress in Artificial Intelligence 5(4) (2016)\n14. Ramos-Soto, A., Janeiro-Gallardo, J., Bugarín, A.: Adapting SimpleNLG to span-\nish. In: 10th International Conference on Natural Language Generation. pp. 142–\n146. Association for Computational Linguistics (2017)\n15. Reiter, E.: An architecture for Data-to-Text systems. In: 9th European Workshop\non NLG (2007). pp. 97–104 (2007)\n16. Reiter, E., Dale, R.: Building Natural Language Generation Systems. Cambridge\nUniversity Press, USA (2000)\n17. Sànchez-Ferreres, J., Carmona, J., Padró, L.: Aligning textual and graphical de-\nscriptions of processes through ilp techniques. In: Advanced Information Systems\nEngineering. pp. 413–427. Springer International Publishing, Cham (2017)\n18. Vázquez-Barreiros, B., Mucientes, M., Lama, M.: Prodigen: Mining complete, pre-\ncise and minimal structure process models with a genetic algorithm. Information\nSciences 294, 315–333 (2015)\n19. Weijters, A., Aalst, W.: Rediscovering workflow models from event-based data\nusing little thumb. Integrated Computer-Aided Engineering 10, 151–162 (07 2003)\n20. Zadeh, L.A.: A prototype-centered approach to adding deduction capability to\nsearch engines-the concept of protoform. In: Proc. Annual Meeting North American\nFuzzy Information Processing Society (NAFIPS-FLINT 2002). pp. 523–525 (2002)\n",
  "categories": [
    "cs.CL"
  ],
  "published": "2023-05-23",
  "updated": "2023-05-23"
}