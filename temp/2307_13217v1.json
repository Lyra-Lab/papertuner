{
  "id": "http://arxiv.org/abs/2307.13217v1",
  "title": "Adversarial Deep Hedging: Learning to Hedge without Price Process Modeling",
  "authors": [
    "Masanori Hirano",
    "Kentaro Minami",
    "Kentaro Imajo"
  ],
  "abstract": "Deep hedging is a deep-learning-based framework for derivative hedging in\nincomplete markets. The advantage of deep hedging lies in its ability to handle\nvarious realistic market conditions, such as market frictions, which are\nchallenging to address within the traditional mathematical finance framework.\nSince deep hedging relies on market simulation, the underlying asset price\nprocess model is crucial. However, existing literature on deep hedging often\nrelies on traditional mathematical finance models, e.g., Brownian motion and\nstochastic volatility models, and discovering effective underlying asset models\nfor deep hedging learning has been a challenge. In this study, we propose a new\nframework called adversarial deep hedging, inspired by adversarial learning. In\nthis framework, a hedger and a generator, which respectively model the\nunderlying asset process and the underlying asset process, are trained in an\nadversarial manner. The proposed method enables to learn a robust hedger\nwithout explicitly modeling the underlying asset process. Through numerical\nexperiments, we demonstrate that our proposed method achieves competitive\nperformance to models that assume explicit underlying asset processes across\nvarious real market data.",
  "text": "Adversarial Deep Hedging: Learning to Hedge\nwithout Price Process Modeling\nMasanori HIRANO\nThe University of Tokyo\nTokyo, Japan\nresearch@mhirano.jp\nKentaro MINAMI\nPreferred Networks, Inc.\nTokyo, Japan\nminami@preferred.jp\nKentaro IMAJO\nPreferred Networks, Inc.\nTokyo, Japan\nimos@preferred.jp\nABSTRACT\nDeep hedging is a deep-learning-based framework for derivative\nhedging in incomplete markets. The advantage of deep hedging lies\nin its ability to handle various realistic market conditions, such as\nmarket frictions, which are challenging to address within the tradi-\ntional mathematical finance framework. Since deep hedging relies\non market simulation, the underlying asset price process model is\ncrucial. However, existing literature on deep hedging often relies on\ntraditional mathematical finance models, e.g., Brownian motion and\nstochastic volatility models, and discovering effective underlying\nasset models for deep hedging learning has been a challenge. In this\nstudy, we propose a new framework called adversarial deep hedg-\ning, inspired by adversarial learning. In this framework, a hedger\nand a generator, which respectively model the underlying asset pro-\ncess and the underlying asset process, are trained in an adversarial\nmanner. The proposed method enables to learn a robust hedger\nwithout explicitly modeling the underlying asset process. Through\nnumerical experiments, we demonstrate that our proposed method\nachieves competitive performance to models that assume explicit\nunderlying asset processes across various real market data.\nCCS CONCEPTS\n• Applied computing →Economics; • Computing methodolo-\ngies →Neural networks.\nKEYWORDS\ndeep hedging, price process, adversarial learning, neural network,\noption, financial market\n1\nINTRODUCTION\nDerivative hedging is an important issue in the field of finance.\nPractical derivative hedging is strongly connected to the theory of\nmathematical finance, which was pioneered by the work of Black,\nScholes and Merton in the 1970s [4, 22]. In mathematical finance,\nthe financial market is typically modeled as a complete market,\ni.e., an ideal market with continuous tradability and no friction.\nUnder this assumption, the optimal hedging strategy is a portfolio\nthat replicates the derivative, which also leads to the theoretical\nprice of the derivative from the no-arbitrage argument. However,\nthe assumption of the complete market does not hold in reality,\nand perfect hedging is impossible. Therefore, practical hedging\nstrategies are manually adjusted by human traders using various\nempirical rules. Greeks are the most typical tools for managing risk\nsensitivities. By managing greeks, traders aim for robust hedging\nagainst market changes (see e.g., [28]).\nDeep hedging [5] was developed to address the problem of hedg-\ning in incomplete markets. Deep hedging is a fully computational\nand data-driven approach based on market simulation and deep\nhedging techniques that directly optimizes the profit and loss (PL)\nof the portfolio of derivatives. The advantage of deep hedging is\nthat it can calculate the optimal hedging strategy in terms of a\ngiven utility function, while considering various characteristics of\nreal markets, such as market friction, which are difficult to handle\nwithin the traditional framework of mathematical finance theory.\nThe choice of the market simulator, which simulates the price\nprocess of the underlying asset, is crucial in deep hedging training.\nAs deep hedging aims to learn the optimal hedging strategy on a\ngiven market simulator, the market simulator should cover all the\npossible scenarios in real markets. Currently, in the literature on\ndeep hedging, there are mainly two approaches to market simulator\ndesign:\n(i) Models from mathematical finance: While deep hedging can be\ntrained on any market simulator, many existing studies tend to\nconduct experiments based on underlying asset models developed\nin mathematical finance. These models include geometric Brown-\nian motion [4, 22], Heston model [14], rough volatility model [2],\nand jump-diffusion model [8, 23], among others. This approach of\nutilizing established mathematical finance models is valid as it is\nboth simple to implement and provides a fair comparison with tra-\nditional hedging techniques. However, the validity of these models\nis hindered by their limited ability to simulate market scenarios that\ncould happen in reality. One reason is that the traditional models\naim to represent market stylized facts (e.g., volatility surfaces [10])\nusing just a handful of parameters, while they are not necessarily\ntargeting market prediction or path simulations. Additionally, as\nfinancial markets are subject to non-stationarity and regime shifts,\nit is not always possible to make good predictions with a single\nmodel. In situations where the assumed underlying asset price pro-\ncess deviates significantly from the actual market conditions, there\nis a risk of deteriorating hedge performance.\n(ii) Machine-learning-based models: An alternative approach is to\nutilize machine learning methods to learn data-driven market sim-\nulators. In recent years, the accelerated development of machine-\nlearning-based generative models has facilitated this approach.\nSome examples include Generative Adversarial Networks (GAN)\ntraining using the actual data in financial markets [16, 20, 26, 29],\nbut which requires plenty of computational resources just for gener-\nating price series. One of the most pressing challenges for machine-\nlearning-based approaches is that the historical data from financial\nmarkets is comparably limited to the amount of data required by\ncontemporary machine learning algorithms. In response to this\nchallenge, various techniques based on market stylized facts or\ndata augmentation have been proposed to mitigate the effects of\nlimited data. For example, Ziyin et al. [30] proposed a new noise\narXiv:2307.13217v1  [q-fin.CP]  25 Jul 2023\nHirano et al.\ninjection method for data augmentation in financial market data.\nNonetheless, it remains uncertain whether adjustments based on\nstylized facts are effective for the downstream task of deep hedging.\nIn this paper, we propose a novel alternative approach by adopt-\ning an adversarial environment to learn the hedging strategy. Our\nproposed method consists of two adversarial neural networks: a\nhedger and a generator. The hedger learns to maximize the utility\nfunction to optimize the hedging strategy, similar to the existing\ndeep hedging framework. On the other hand, the generator, which\nis newly introduced in our framework, is a generative neural net-\nwork that simulates the underlying asset. The generator learns to\nsimulate the market to make it more difficult for the hedger to max-\nimize the utility function. The proposed method can be considered\nas a framework similar to adversarial learning. It is expected to\npromote robust learning against environmental changes by a gen-\nerator providing an environment that is unfavorable to the hedger.\nThis is a desirable property, considering that real markets are non-\nstationary and difficult to predict, and regime shifts exist. Moreover,\nthe modeling aspect of our approach has a distinct advantage in\nthat it can learn the hedging strategy without presuming an ex-\nplicit underlying asset model. Although our proposed approach is\namong the earliest attempts at adversarial hedging, we demonstrate\nthrough numerical experiments in Section 6 that the adversarially\nlearned hedger performs well in real markets.\n2\nRELATED WORK\nIn their seminal work [5, 6], Buehler et al. proposed a method called\nDeep Hedging. Deep hedging utilizes neural networks to model\nhedging strategies and construct optimal strategies by directly max-\nimizing utility functions derived from the final Profit & Loss (PL).\nDeep hedging has been recognized as a breakthrough in the deriva-\ntive industry, owing to two prominent features: First, deep hedging\ncan handle various types of frictions by a fully computational ap-\nproach. Second, deep hedging bypasses the need for theoretical\npricing models, which are prerequisites for other standard hedging\nmethods, such as those based on Greeks. Since the introduction\nof deep hedging, many efforts have been devoted to expand its\nversatility. Imaki et al. [19] proposed a deep hedging model that\nincorporates no-transaction band [9] into the neural network ar-\nchitecture, resulting in fast convergence of learning. Murray et al.\n[7, 25] proposed an actor-critic-based reinforcement learning for\ndeep hedging and achieved almost equivalent performance to the\noriginal deep hedging. Hirano et al. [1] extended the deep hedging\nframework into a nested structure, thereby facilitating the use of\noptions as hedging instruments. The authors also proposed effi-\ncient simulation designs and a learning algorithm to circumvent\nthe computational issues.\nSeveral recent studies focus on the data used for learning of deep\nhedging. Mikkila et al. [24] argued that deep hedging often depends\non a specific choice of price process simulator, which could result\nin suboptimal performance. They suggested that improved perfor-\nmance could be achieved by utilizing empirical data for training.\nHowever, the amount of available historical market data is often\nlimited. Horvath et al. [18] proposed a deep hedging model based\non rough volatility models such as the rBergomi model [2], which\ncan model (non-Markov) jumps in price processes.\nOther studies have also focused on generating financial time\nseries using deep-learning-based models. For example, several re-\nsearchers have proposed variants of Generative Adversarial Net-\nworks (GANs) for generating financial time series [16, 20, 26, 29].\nHayashi et al. [13] proposed a generative diffusion model tailored\nfor financial markets. While these were originally intended for\npurposes other than deep hedging, they can be adapted for use\nwithin the deep hedging framework. However, to the best of our\nknowledge, there has not been ample exploration of deep genera-\ntive models explicitly designed with the direct goal of enhancing\ndeep hedging performance. This specific research gap is what we\naim to address in this paper.\n3\nSETTING: DISCRETE TIME MARKET WITH\nFRICTIONS\nThroughout this paper, we consider the problem of hedging an\noption with its underlying asset. We consider a discrete-time fi-\nnancial market with a finite time horizon 𝑇and trading dates\n0 = 𝑡0 < 𝑡1 < · · · < 𝑡𝑛= 𝑇. At 𝑡= 𝑡0, the hedger (the issuer\nof the option) sells one unit of the option. The hedger aims to hedge\nthe risk arising from the future payoff of the option by trading the\nunderlying asset 𝑆. 𝑆is assumed to be always tradable, and its price\nat time 𝑡is denoted as 𝑆𝑡. At each trading date 𝑡𝑖, the hedger sets\na new position 𝛿𝑡𝑖in 𝑆. For all transactions of 𝑆, a proportional\ntransaction cost is charged at a rate of 𝑐per unit price.\nOption 𝑍is a contract in which the payoff at time 𝑡= 𝑇de-\npends on the price of the underlying asset 𝑆. Examples include an\nEuropean option 𝑍(𝑆) = max(𝑆𝑇−𝐾, 0) and a Lookback option\n𝑍(𝑆) = max(max(𝑆) −𝐾, 0), where 𝐾denotes the strike value of\nthe options. These options will also be used in the experiment in\nSection 6.\nThe Profit & Loss (PL) of the hedger (the issuer) is formulated as\nfollows:\nPL𝑇(𝑍,𝑆,𝛿)\n:=\n−𝑍(𝑆) + (𝛿· 𝑆)𝑇−𝐶𝑇(𝛿)\n(1)\n(𝛿· 𝑆)𝑇\n:=\n𝑛−1\n∑︁\n𝑖=0\n𝛿𝑡𝑖(𝑆𝑡𝑖+1 −𝑆𝑡𝑖)\n(2)\n𝐶𝑇(𝛿)\n:=\n𝑛\n∑︁\n𝑖=0\n𝑐𝑆𝑡𝑖|𝛿𝑡𝑖−𝛿𝑡𝑖−1 |\n(3)\nwhere 𝛿−1 = 𝛿𝑡𝑛= 0. Here, (𝛿· 𝑆)𝑇is the total return resulting\nfrom the trading of the underlying asset, and 𝐶𝑇(𝛿) is the total\ntransaction costs.\nThe objective function of the hedger is defined by the PL and the\nutility function 𝑢. Specifically, the loss function to be minimized is\ndefined as follows:\n𝑙(𝛿) = −𝑢(PL𝑇(𝑍,𝑆,𝛿)) .\n(4)\nFor an example of the utility function 𝑢, Entropic Risk Measure\n(ERM) is defined as\n𝑢(𝑥) = −1\n𝜆log E [exp (−𝜆𝑥)]\n(5)\nwhere 𝜆is the risk preference coefficient. Expected Shortfall (Con-\nditional Value at Risk; CVaR) is defined as\n𝑢(𝑥) =\n1\n1 −𝛼\n∫VaR(𝛼)\n−∞\n𝑥· 𝑝(𝑥)𝑑𝑥\n(6)\nAdversarial Deep Hedging: Learning to Hedge\nwithout Price Process Modeling\nGenerator\nSti\nSti-1\nhti-1\nRti\nhti\nIti\nHedger\nδti-1\nδti\nFigure 1: Inputs/outputs of adversarial deep hedging. ℎ𝑡𝑖is\na hidden state of the generator, 𝑅𝑡𝑖is a random variable for\ngeneration, 𝑆𝑡𝑖is underlying asset price, 𝐼𝑡𝑖is available infor-\nmation for the hedger, and 𝛿𝑡𝑖is the hedge position.\nwhere 𝛼is the confidence level and satisfies 0 ≤𝛼≤1.\n4\nMETHOD: ADVERSARIAL DEEP HEDGING\nOur goal is to learn deep-learning-based hedging strategies that\nperform well in real-world markets. As we mentioned in the in-\ntroduction, an efficient design of the market simulator is crucial\nto improve the performance of deep hedging. While the existing\nstudies of deep hedging often employ underlying asset price mod-\nels from the mathematical finance literature, we here study more\nflexible deep-learning-based models to pursue better training of\nhedging strategies.\nThe central idea of our approach is to employ the concept of\nadversarial learning. In the deep learning literature, it is well known\nthat there are “difficult” input data called adversarial examples\nthat significantly degrade the performance on the machine learning\ntasks such as image classification [12, 21]. Adversarial examples can\nbe obtained by adding noises to existing images in training dataset.\nThe noises are optimized toward the worst-case directions that\ndeteriorates the classicication performance most (hence the name\nof “adversarial” examples). Interestingly, it is shown that adding\nadversarial noises during training improves the overall classifica-\ntion performance [12]. This idea would be useful for improving\nthe market model for deep hedging training. As real market data\ncan contain many types of price movements that are difficult to be\nmodeled (e.g., jumps and regime shifts), we expect that adversarial\nlearning can make the deep hedging model robust against unseen\nenvironmental changes that are never generated from a simple\nmarket simulator.\nTo formulate the idea of adversarial learning of deep hedging, we\npropose a framework based on the mim-max game paradigm, akin\nto Generative Adversarial Networks (GANs) [11]. This approach\noffers several potential advantages. Firstly, it is anticipated that\nthe hedger is robustly trained against perturbations in the market\nenvironment. Secondly, we can circumvent the need for explicit\nmodeling of the asset model.\nFigure 1 shows the outline of the adversarial deep hedging. Simi-\nlar to the original deep hedging, the hedger receives the underlying\nasset price 𝑆𝑡and relevant information as inputs, and determines\nthe optimal hedging position. We introduce a new component, the\ngenerator, that handles market simulation.\nIn what follows, we will elaborate on each component of our\nproposed framework.\n4.1\nHedger\nHedger 𝐻is a neural network that generates a new hedge position\n𝛿𝑡𝑖using the relevant information at time 𝑡𝑖:\n𝛿𝑡𝑖= 𝐻(𝑆𝑡𝑖, 𝐼𝑡𝑖,𝛿𝑡𝑖−1),\n(7)\nwhere 𝑆𝑡𝑖is underlying asset price, 𝐼𝑡𝑖is other relevant information\nat time 𝑡𝑖, and 𝛿𝑡𝑖−1 is the previous hedge position. 𝐼𝑡𝑖can contain\ninformation related to theoretical optimal hedging, such as Black–\nScholes delta, as well as any information of market conditions. Since\nthe theoretical optimal hedging depends on the previous position\nin the presence of transaction costs (see e.g., [19]), it is natural for\nthe hedger to take 𝛿𝑡𝑖−1 as an input.\n4.2\nGenerator\nGenerator 𝐺is a neural network generating an underlying asset\nprice sequence. As the generator should generate causal time series,\nit is sensible to employ Recurrent Neural Network (RNN)-type\narchitecture, as described below. The generator has hidden state\nvector ℎ𝑡. At each time step 𝑡𝑖, the generator receives the previous\nhidden state ℎ𝑡𝑖−1, asset price 𝑆𝑡𝑖−1, and a random variable 𝑅𝑡𝑖, and\noutputs a new asset price 𝑆𝑡𝑖and hidden state ℎ𝑡𝑖:\n(𝑆𝑡𝑖,ℎ𝑡𝑖) = 𝐺(ℎ𝑡𝑖−1,𝑆𝑡𝑖−1, 𝑅𝑡𝑖).\n(8)\nHere, similar to the generator in a standard GAN, 𝑅𝑡𝑖plays a role\nin injecting exogeous randomness for generation.\n4.3\nAdversarial Learning\nIn the spirit of GAN, the adversarial deep hedging is formulated as\na min-max game. More formally, the hedger and the generator are\ntrained through the following optimization problem: 1\nmin\n𝐺max\n𝐻𝑢(PL𝑇(𝑍,𝐺(𝑅), 𝐻(𝐺(𝑅), 𝐼))) .\n(9)\nThe generator and the hedger are trained in an alternating and\nadversarial manner. Specifically, the hedger strives to maximize the\nutility function of the terminal wealth, while the generator aims\nto adversarially learn the distribution of unfavorable paths for the\nhedger.\n5\nNUMERICAL STABILITY ANALYSIS\nIn the previous section, we have introduced the concept of adver-\nsarial deep hedging at an abstract level. However, it is not clear\nwhether the min-max problem in Eq. (9) is well-posed. In other\nwords, it is not evident whether there exists an optimal solution\nor a local equilibrium, nor is the stability of learning guaranteed\nin practical settings. In fact, the well-posedness depends on the\nspecific problem formulation, including the choice of the generator\nclass, the hedger class, the option payoff, and the utility function.\nFor example, when the expressive power of the generator class is\ntoo high, it may allow for the generation of unrealistic and extreme\npaths, which could destabilize hedger learning. Therefore, it is pre-\nsumed that the learning stability requires some form of regularity\nassumptions to ensure learning stability. Moreover, it is known that\n1Here, to enhance the intuitive understanding of functional dependence, we omitted\nthe time index 𝑡and used simplified notations. The generator in Eq. (8) and the hedger\nin Eq. (7) are abbreviated as 𝐺(𝑅) and 𝐻(𝐺(𝑅), 𝐼), respectively.\nHirano et al.\n0.00\n0.25\n0.50\n0.75\n1.00\n1.25\n1.50\n1.75\n2.00\n0.9\n0.8\n0.7\n0.6\n0.5\n0.4\n0.3\n0.2\n0.1\nutility\nUtility (ERM 10.0; \n= 0.0,\n= 0.2)\n0.0\n0.5\n1.0\n1.5\n2.0\n2.5\n3.0\n3.5\n4.0\n1.6\n1.4\n1.2\n1.0\n0.8\n0.6\n0.4\n0.2\nutility\nUtility (CVaR 95%; \n= 0.0,\n= 0.2)\nFigure 2: Results (left: ERM(10.0), right: CVaR(0.95)) of Utility\nvs. 𝛿under the Generator is fixed. Peaks exist at 𝛿= 0.5011\nfor EMR(10.0) and 𝛿= 0.5082 for CVaR(0.95).\nmin-max problems like GANs often suffer from learning instability,\nwhich requires careful design of the learning algorithm.\nTo gain an intuitive understanding of learning stability, we here\nexamine a toy problem described as follows. We consider a market\nmodel with only one underlying asset 𝑆𝑡and two time instants 𝑡∈\n{0, 1} (i.e., 𝑛= 1 in Section 3). We assume that 𝑆0 is a given constant.\nThus, the generator 𝐺is responsible for generating a single price\n𝑆1 ∈R, and the hedger 𝐻determines a scalar-valued position 𝛿∈R.\nThe payoff function of the option is given as𝑍(𝑆1) = max{𝑆1−𝐾, 0},\nwhere the strike value 𝐾is assumed to be same as the initial price\n𝑆0. Then, the PL at the terminal time is written as:\nPL𝑇(𝑍,𝑆1,𝛿) = −𝑍(𝑆1) + 𝛿(𝑆1 −𝑆0) −𝑐|𝛿|𝑆0.\n(10)\nFor simplicity, we assume that the distribution of 𝑆1 is a Gaussian\ndistribution 𝑆1 −𝑆0 ∼N (𝜇, 𝜎), where the generator determines 𝜇\nand/or 𝜎.\nFor the utility function, we will use ERM(10.0) and CVaR(0.95).\nHere, ERM(10.0) means the ERM-based utility function with 𝜆=\n10.0 in Eq. (5), and CVaR(0.95) means the CVaR-based utility func-\ntion with 𝛼= 0.95 in Eq. (6).\n5.1\nCase 1: Fixed Generator\nFirstly, we fixed the generator parameters (𝜇, 𝜎) and checked the\nresponse of 𝛿(the hedger) to the utility. We set 𝜇= 0.0, 𝜎= 0.2, and\nthe goal is to maximize the utility function with respect to 𝛿.\nWe plot the utility values in Figure 2. It is evident that each\nutility function is concave in 𝛿, and the optimization problem has a\nunique optimal solution. In each case, the utility function exhibits a\npeak around 𝛿= 0.5. This means that the optimal solution is nearly\nidentical to the Black–Scholes’ delta hedging. However, owing to\nthe cost (i.e., the last term in Eq. (10)), the utility peak is slightly\ndifferent from 𝛿= 0.5.\n5.2\nCase 2: Adversarially Optimized Mean\nSecondly, we tested the case where the generator can adversarially\noptimize the mean parameter 𝜇.\nFigure 3 and 4 show the utility surfaces and their gradients\nplotted against 𝛿and 𝜇, respectively for ERM and CVaR. We also\nrun adversarial learning simulations and plotted their trajectories\nin the right panels. For the configuration of the learning algorithm\n(e.g., the learning rates and the two time-scale update rule), we used\nthe same settings as the experiments in Section 6.\n2\n1\n0\n1\n2\n0.0\n0.5\n1.0\n1.5\n2.0\n4\n3\n2\n1\n0\n1\nUtility (ERM 10.0; \n= 0.2)\n3\n2\n1\n0\n1\n2\n2.0\n1.5\n1.0\n0.5\n0.0\n0.5\n1.0\n1.5\n2.0\nUtility (ERM 10.0; \n= 0.2)\nFigure 3: Results of utility among different 𝛿and 𝜇\n(ERM(10.0)). The left figure shows the utility surface and the\nright figure shows the utility heatmap and gradient arrow\ngraph, and the blue line is the result of adversarial training\nsimulation.\n2\n1\n0\n1\n2\n0.0\n0.5\n1.0\n1.5\n2.0\n4\n3\n2\n1\n0\n1\nUtility (CVaR 95%; \n= 0.2)\n4\n3\n2\n1\n0\n1\n2\n3\n2.0\n1.5\n1.0\n0.5\n0.0\n0.5\n1.0\n1.5\nUtility (CVaR 95%; \n= 0.2)\nFigure 4: Results of utility among different 𝛿and 𝜇\n(CVaR(0.95)). The left figure shows the utility surface and the\nright figure shows the utility heatmap and gradient arrow\ngraph, and the blue line is the result of adversarial training\nsimulation.\nAccording to Figures 3 and 4, the min-max game formulated in\nEq. (9) can be convergent into the point around 𝛿= 0.5, 𝜇= 0.0. This\nsuggests that, when the generator optimizes only the mean 𝜇in an\nadversarial manner, the dynamical system determined by the learn-\ning algorithm can converge to some equilibrium. Furthermore, this\nresult also suggests that the most unfavorable market environment\nfor the hedger entails a zero expected return of the underlying asset,\nwhich is intuitively understandable as the no-arbitrage condition.\n5.3\nCase 3: Adversarially Optimized Volatility\nThirdly, we fixed 𝜇= 0 and let the generator optimize the volatility\nparameter 𝜎. Figure 5 shows utility surfaces plotted against 𝛿and\n𝜎.\nIn either case, the utility value increases as 𝜎becomes larger,\nindicating that the Nash equilibrium of the min-max game does not\nexist. As such, it is anticipated that the volatility can become arbi-\ntrarily large through the adversarial learning. This is an intuitive\nresult, since a more volatile market environment is more unfavor-\nable for the hedger. This example suggests that using a generator\nclass with excessively high expressive power can lead to instability\nin adversarial learning.\nAdversarial Deep Hedging: Learning to Hedge\nwithout Price Process Modeling\n0.0\n0.5\n1.0\n1.5\n2.0\n0.0\n0.5\n1.0\n1.5\n2.0\nutility\n15.0\n12.5\n10.0\n7.5\n5.0\n2.5\n0.0\nUtility (ERM 10.0; \n= 0.0)\n0.0\n0.5\n1.0\n1.5\n2.0\n0.0\n0.5\n1.0\n1.5\n2.0\n8\n6\n4\n2\n0\nUtility (CVaR 95%; \n= 0.0)\nFigure 5: Utility surfaces among different 𝛿and 𝜎(left:\nERM(10.0), right: CVaR(0.95)).\nNote that, for each fixed value of 𝜎,𝛿always has a local minimum\naround 0.5. This suggests the hedger may converge to an optimal\nsolution, even when the generator fails to converge. One reason for\nthis is that, in this particular example, the optimal hedging action\nremains unchanged regardless of the magnitude of the volatility. In\nthe experiment in Section 6, we confirm that such “scale invariance”\nholds even in more realistic examples of European and lookback\noptions. In general settings, however, it is considered that the scale\ninvariance does not hold, and it would be more reasonable to intro-\nduce some constraints on the volatility. See a related discussion in\nSection 8.2 as well.\n6\nEXPERIMENT\nWe conducted an experiment to demonstrate the effectiveness of\nour methods on real market data. We used ten different experimen-\ntal settings consisting of two options and five utility functions as\nfollows:\n• Option 𝑍: We used (i) European Call Option and (ii) Look-\nback Call Option explained in Section 3. For both types of\noptions, the strike 𝐾is set as 𝐾(= 𝑆𝑡0) = 1.0.\n• Utility function 𝑢: We used (a) Entropic Risk Measure\n(ERM) with three different risk preference coefficients 𝜆=\n1.0, 10.0, 100.0, and (b) Conditional Value-at-Risk (CVaR)\nwith two different confidence levels 𝛼= 0.9, 0.95.\nWe compared the following models:\n• Proposed: Adversarial deep hedging.\n• Brownian: Deep hedging using the geometric Brownian\nmotion as an underlying asset price process. The annual\nvolatility parameter 𝜎is set to 0.2.\n• Heston: Deep hedging using the Heston model [14] as an\nunderlying asset price process. For the parameters of the\nHeston model, we followed the same setting as in [1, 6] (i.e.,\n𝜅= 1.0, 𝜃= 0.04, 𝜌= −0.7, and 𝜎= 0.3).\nAdditionally, we used the following parameters across all tasks:\nthe exercise price of the option was set to 1.0, the option maturity\nwas 20 days, the transaction cost ratio was 𝑐= 10−4, the learning\nrates for the hedger and the generator were 10−3, the two time-scale\nupdate rule [15] was set to G:H=1:5, the number of epochs was\n5,000 for European option and 1,000 for Lookback option (due to\ncomputational resource constraints), 50,000 price series were used\nper epoch during training, and 10,000 price series were used per\nepoch during evaluation. To stabilize the evaluation, we take the\nmean of 20 times trials only for the evaluation.\nThe adversarial learning interaction between the generator and\nthe hedger can exhibit instability, which is a characteristic shared\nwith GANs. To address this, we adopted the performance indicator\nto take our model’s best snapshot. This is somewhat analogous to\nthe use of the Inception score [27] or the Fréchet Inception Distance\n(FID) [15] in the GAN literature. For our indicator, we employed the\nperformance of the hedger of adversarial deep hedging when the\nunderlying asset price process was Brownian. However, we stress\nthat it does not imply that the underlying asset price process was\nused during training.\nWe tested the best snapshot models of the hedger on real market\ndata. We used daily prices of the following three stock indices: 2\n• S&P 500: S&P 500 (U.S.) data between January 2000 and\nAugust 2022\n• S&P 500 (old): S&P 500 (U.S.) data between January 1931\nand December 1950\n• BVSP: Bovespa Index (Brazil) data between January 2000\nand August 2022\nWe chose these data because they exhibit significantly different\ncharacteristics, such as market efficiency. In general, emerging mar-\nkets are considered to be more inefficient and exhibit characteristics\nsuch as long-term correlation [3].\nWe divided the evaluation data into time windows of𝑇= 20 days\neach and tested the performance of the hedgers on each of these\nwindows. To align with the training conditions, we normalized the\ndata such that the initial price 𝑆𝑡0 of each time window was set to\n1.0. For each experimental setting, we reported the average and the\nstandard deviation of performance across the windows.\n7\nRESULTS\nTable 1 shows the hedging test results on the actual data. Each\nrow corresponds to a different hedging criterion. The values in the\ntable represent the hedging cost 𝑙(𝛿), where lower values indicate\nsuperior hedging performance. Underlined numbers correspond\nto the best results among three models compared, i.e., Proposed,\nBrownian, and Heston detailed in section 6. Bold numbers mean\nthat the corresponding models outperform the Black–Scholes price.\nAccording to the table, no single model is always better than\nothers For example, in the results on S&P 500 data, the Heston\nmodel tends to outperform other models. However, in the results\non S&P500 old data, our proposed model tends to outperform other\nmodels.\nWhile our proposed model does not consistently outperform\nthe other baseline models, the differences between our model and\nothers are relatively minor, typically less than 2%.\nFigure 6a – 6d show the distribution of the PL of hedging results\non the S&P 500 data backtest. The Brownian model and our pro-\nposed model are represented by the blue and orange histograms,\nrespectively. According to these results, we can observe almost all\nof the PL distributions achieved by the Brownian model are repli-\ncated by our proposed adversarial deep hedging. This replication is\n2Note that for simplicity, we used the Close-Close test, which differs from actual\ntrading.\nHirano et al.\nTable 1: Results of hedge prices (costs) for each setting. Underlined results are the best results among the proposed Brownian\nand Heston models. Bold results are better results than the Black–Scholes price.\nS&P 500\nOption 𝑍\nUtility 𝑢\nProposed\nBrownian\nHeston\nBlack–Scholes\nEuropean\nERM(1.0)\n0.019669 ± 0.000395\n0.018615 ± 0.000228\n0.018720 ± 0.000186\n0.019143\nEuropean\nERM(10.0)\n0.020818 ± 0.000162\n0.020619 ± 0.000100\n0.020578 ± 0.000080\n0.020750\nEuropean\nERM(100.0)\n0.118480 ± 0.002498\n0.118334 ± 0.001245\n0.120333 ± 0.000959\n0.123265\nEuropean\nCVaR(0.9)\n0.055750 ± 0.001051\n0.057322 ± 0.000877\n0.052462 ± 0.000888\n0.056678\nEuropean\nCVaR(0.95)\n0.068432 ± 0.000855\n0.069850 ± 0.000743\n0.063135 ± 0.000953\n0.069778\nLookback\nERM(1.0)\n0.031467 ± 0.001257\n0.030218 ± 0.000607\n0.029981 ± 0.000254\n0.031653\nLookback\nERM(10.0)\n0.035418 ± 0.001309\n0.034319 ± 0.000264\n0.034189 ± 0.000250\n0.035609\nLookback\nERM(100.0)\n0.189564 ± 0.009356\n0.169649 ± 0.006907\n0.171893 ± 0.003831\n0.180721\nLookback\nCVaR(0.9)\n0.084800 ± 0.001601\n0.082999 ± 0.001293\n0.085991 ± 0.002103\n0.088665\nLookback\nCVaR(0.95)\n0.107428 ± 0.003131\n0.106571 ± 0.001689\n0.102949 ± 0.001497\n0.111228\nS&P 500 (old)\nOption 𝑍\nUtility 𝑢\nProposed\nBrownian\nHeston\nBlack–Scholes\nEuropean\nERM(1.0)\n0.024419 ± 0.000213\n0.024681 ± 0.000087\n0.024816 ± 0.000065\n0.023999\nEuropean\nERM(10.0)\n0.027126 ± 0.000151\n0.027073 ± 0.000085\n0.027075 ± 0.000064\n0.027034\nEuropean\nERM(100.0)\n0.106246 ± 0.002327\n0.109020 ± 0.001406\n0.110758 ± 0.000523\n0.111596\nEuropean\nCVaR(0.9)\n0.078522 ± 0.001454\n0.080840 ± 0.001121\n0.074912 ± 0.001011\n0.079936\nEuropean\nCVaR(0.95)\n0.096169 ± 0.001681\n0.098889 ± 0.001040\n0.090915 ± 0.001360\n0.098017\nLookback\nERM(1.0)\n0.042866 ± 0.000715\n0.042537 ± 0.000191\n0.042679 ± 0.000170\n0.042158\nLookback\nERM(10.0)\n0.056832 ± 0.003741\n0.058438 ± 0.001229\n0.059716 ± 0.001132\n0.054546\nLookback\nERM(100.0)\n0.293896 ± 0.010271\n0.300853 ± 0.026935\n0.300347 ± 0.007946\n0.272272\nLookback\nCVaR(0.9)\n0.145088 ± 0.002363\n0.142618 ± 0.001593\n0.141590 ± 0.004286\n0.141713\nLookback\nCVaR(0.95)\n0.179468 ± 0.005448\n0.188930 ± 0.004209\n0.184107 ± 0.002658\n0.177379\nBVSP\nOption 𝑍\nUtility 𝑢\nProposed\nBrownian\nHeston\nBlack–Scholes\nEuropean\nERM(1.0)\n0.029468 ± 0.000600\n0.028637 ± 0.000352\n0.028963 ± 0.000280\n0.028476\nEuropean\nERM(10.0)\n0.031955 ± 0.000250\n0.031765 ± 0.000174\n0.031721 ± 0.000130\n0.031809\nEuropean\nERM(100.0)\n0.191471 ± 0.003796\n0.196748 ± 0.001885\n0.198085 ± 0.000672\n0.200292\nEuropean\nCVaR(0.9)\n0.077644 ± 0.002068\n0.079088 ± 0.001371\n0.071958 ± 0.001465\n0.078619\nEuropean\nCVaR(0.95)\n0.091748 ± 0.001123\n0.093617 ± 0.001179\n0.084048 ± 0.001356\n0.093865\nLookback\nERM(1.0)\n0.049972 ± 0.001463\n0.049670 ± 0.000667\n0.049796 ± 0.000302\n0.048794\nLookback\nERM(10.0)\n0.056038 ± 0.001958\n0.055078 ± 0.000453\n0.055470 ± 0.000468\n0.054807\nLookback\nERM(100.0)\n0.227208 ± 0.013092\n0.195300 ± 0.008136\n0.194505 ± 0.004359\n0.222651\nLookback\nCVaR(0.9)\n0.120657 ± 0.002515\n0.117172 ± 0.001533\n0.118355 ± 0.003760\n0.118696\nLookback\nCVaR(0.95)\n0.138230 ± 0.004309\n0.142132 ± 0.003011\n0.137341 ± 0.001893\n0.139502\nespecially noticeable when the CVaR is used as the utility function\n(Figure 6b and Figure 6d). Interestingly, it is apparent that when\nthe utility function is ERM, the proposed model generates positive\nPL with a positive probability. This suggests that the adversarial\nlearning might be encouraging the hedger to explore a more diverse\nrange of opportunities to attain profits.\n8\nDISCUSSION\n8.1\nPerformance of Adversarial Deep Hedging\nAccording to the experimental results, the proposed approach does\nnot consistently outperform the baselines. However, it does achieve\npromising performance. Regarding the S&P500 data, the Heston\nmodel tends to outperform other models. In contrast, for the S&P500\nold data, the proposed approach shows a higher likelihood of out-\nperforming other models. Nonetheless, what we want to emphasize\nis that the proposed model achieves comparable performance to\nother models, regardless of the evaluation data or the utility func-\ntion. This result is noteworthy because the proposed method does\nnot rely on explicit modeling of underlying asset price process.\nIn general, the optimal choice of the underlying asset model\nis not trivial and depends on the utility function and the market\ndata used for testing. In the experimental results, when the utility\nfunction is ERM, the Brownian model tends to perform relatively\nbetter than the Heston model. On the other hand, when the util-\nity function is CVaR, which focuses more on tail risk, the Heston\nmodel tends to achieve higher performance. Moreover, there are\ncalibration issues with the underlying asset models. Traditionally,\nparameters for mathematical finance models are estimated to fit the\nhistorical market data or the implied volatility. We should also note\nthat, with more complex models such as rough volatility models,\nthe calibration itself can be unstable or computationally challeng-\ning (see e.g., [17]). However, the training of deep hedging requires\nAdversarial Deep Hedging: Learning to Hedge\nwithout Price Process Modeling\n0.20\n0.15\n0.10\n0.05\n0.00\n0.05\nPL\n0\n10\n20\n30\n40\ndensity\nBrownian\nAdversarial (Proposed)\n(a) ERM(1.0) & European Option\n0.20\n0.15\n0.10\n0.05\n0.00\nPL\n0\n10\n20\n30\n40\ndensity\nBrownian\nAdversarial (Proposed)\n(b) CVaR(0.90) & European Option\n0.3\n0.2\n0.1\n0.0\n0.1\nPL\n0\n5\n10\n15\n20\n25\n30\ndensity\nBrownian\nAdversarial (Proposed)\n(c) ERM(1.0) & Lookback Option\n0.30\n0.25\n0.20\n0.15\n0.10\n0.05\n0.00\nPL\n0\n5\n10\n15\n20\n25\ndensity\nBrownian\nAdversarial (Proposed)\n(d) CVaR(0.90) & Lookback Option\nFigure 6: Histograms of PL for Brownian (blue) and the proposed (orange) method. The utility function and option type differ\nin each figure. Backtesting data is S&P500.\nthe generation of future scenarios through simulations, and the\nstandard calibration methods may not necessarily align with this\npurpose. As the Brownian model and the Heston model have only\na few parameters, they might not be well-suited for simulating\nfuture paths in highly non-stationary real-world markets. This is\nalso suggested by the high performance of the proposed method in\nS&P500old and BVSP, which are considered as more non-stationary\nmarkets. One possible reason for this is that the adversarial learn-\ning can train the hedger efficiently while avoiding overfitting to\nhistorical data. Considering these points, the proposed method has\nthe potential to be more generally useful across broader markets\nand utility functions.\n8.2\nGenerator Volatility\nFigure 7 shows an example of paths generated by the generator\nlearned through adversarial learning. The distribution of paths\nappears roughly symmetric in the logarithmic domain and qualita-\ntively resembles a discretized geometric Brownian motion. How-\never, the generated paths exhibit significantly large volatilities. This\ncan be attributed to the fact that, as discussed in Section 5, the util-\nity function can monotonically decrease with an increase in the\ngenerator’s volatility, leading to the exceedingly high volatility\nof the adversarially learned generator. Nevertheless, in our exper-\niments, the hedger seems to have been effectively trained. One\npossible explanation is that hedging European options and look-\nback options possess a certain scale invariance, where volatility\nFigure 7: Generated price path example.\nhas a relatively minor impact on the optimal hedging actions. In\nparticular, when the strike 𝐾and initial value 𝑆0 are the same, the\npayoff of a European option max{𝑆𝑇−𝑆0, 0} is positive homoge-\nneous. Indeed, if the generator volatility is multiplied by a constant\nfactor 𝛼(thus the random variable 𝑆𝑇−𝑆0 as well), the probability\nof the payoff occurring remains unchanged, and the value of the\npayoff simply becomes 𝛼times the original value. As a result, the\noptimal hedging action remains invariant under such scaling of\nvolatility. However, when dealing with financial derivatives whose\nHirano et al.\noptimal hedging actions depend on the path’s scale, such as volatil-\nity swaps or barrier options, it may be necessary to impose certain\nvolatility constraints during training. Developing effective volatility\nconstraints (or regularizations) is left for future work. Addition-\nally, in practical derivative businesses, underlying asset models are\ncommonly calibrated to observed volatility surfaces in the market.\nDeveloping techniques for adversarial deep hedging to calibrate\nthe generator to real volatility surfaces would also be an interesting\nfuture work.\n9\nCONCLUSION\nIn this study, we proposed a novel approach named adversarial deep\nhedging, aimed at efficient training of deep hedging strategies with-\nout reliance on an assumed underlying price process. The key idea\nis to incorporate the concept of adversarial learning. We introduce\na new component, the generator, that is responsible for generating\nthe price process, and the hedger and the generator engage in ad-\nversarial learning through a min-max game. The key advantage of\nemploying adversarial deep hedging lies in its ability to obviate the\nneed for explicit modeling of underlying price processes, thereby\ncircumventing any learning biases that may arise from modeling\nassumptions. In the experiments, we empirically demonstrated that\nthe proposed method exhibits competitive hedging performance\neven in the absence of an explicit price process model.\nThere are a number of future research directions suggested by\nthis study. The adversarial deep hedging tends to diverge the gen-\nerator volatility. Therefore, it is essential to explore appropriate\nconstraints or regularization on volatility without compromising\nthe hedge performance. Additionally, as adversarial deep hedging\ncurrently incurs significant computational costs, investigating more\nefficient learning algorithms is also a crucial task.\nREFERENCES\n[1] 2023. Efficient Learning of Nested Deep Hedging using Multiple Options. In\n14th IIAI International Congress on Advanced Applied Informatics. 514–521. https:\n//doi.org/10.1109/IIAI-AAI59060.2023.00104\n[2] Christian Bayer, Peter Friz, and Jim Gatheral. 2015. Pricing under rough volatility.\nQuantitative Finance 16, 6 (2015), 887–904.\nhttps://doi.org/10.1080/14697688.\n2015.1099717\n[3] M. Beben and A. Orłowski. 2001. Correlations in financial time series: established\nversus emerging markets. The European Physical Journal B - Condensed Matter\nand Complex Systems 20 (2001), 527–530. https://doi.org/10.1007/s100510170233\n[4] Fischer Black and Myron Scholes. 1973. The Pricing of Options and Corporate\nLiabilities. The Journal of Political Economy 81, 3 (1973), 637–654. https://doi.\norg/10.1086/260062\n[5] Hans Buehler, Lukas Gonon, Josef Teichmann, and Ben Wood. 2019. Deep\nhedging. Quantitative Finance 19, 8 (2019), 1271–1291. https://doi.org/10.1080/\n14697688.2019.1571683\n[6] Hans Buehler, Lukas Gonon, Josef Teichmann, Ben Wood, Baranidharan Mohan,\nand Jonathan Kochems. 2019. Deep Hedging: Hedging Derivatives Under Generic\nMarket Frictions Using Reinforcement Learning. (2019). https://doi.org/10.2139/\nssrn.3355706\n[7] Hans Buehler, Murray Phillip, and Ben Wood. 2022. Deep Bellman Hedging.\n(2022). https://doi.org/10.2139/SSRN.4151026\n[8] John C. Cox and Stephen A. Ross. 1976. The valuation of options for alternative\nstochastic processes. Journal of Financial Economics 3, 1-2 (1976), 145–166.\nhttps://doi.org/10.1016/0304-405X(76)90023-4\n[9] Mark H. A. Davis, Vassilios G. Panas, and Thaleia Zariphopoulou. 1993. European\nOption Pricing with Transaction Costs. SIAM Journal on Control and Optimization\n31, 2 (1993), 470–493. https://doi.org/10.1137/0331022\n[10] Jim Gatheral. 2012. The Volatility Surface: A Practitioner’s Guide. John Wiley &\nSons.\n[11] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley,\nSherjil Ozair, Aaron Courville, and Yoshua Bengio. 2014. Generative Adversarial\nNets. Advances in Neural Information Processing Systems (2014), 2672–2680.\nhttps://doi.org/10.1145/3422622\n[12] Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. 2014. Explaining and\nHarnessing Adversarial Examples. (2014). https://doi.org/10.48550/arXiv.1412.\n6572\n[13] Kohei Hayashi and Kei Nakagawa. 2022. Fractional SDE-Net: Generation of Time\nSeries Data with Long-term Memory. In 2022 IEEE 9th International Conference on\nData Science and Advanced Analytics. 1–10. https://doi.org/10.1109/DSAA54385.\n2022.10032351\n[14] Steven Heston. 1993. A Closed-Form Solution for Options with Stochastic\nVolatility with Applications to Bond and Currency Options. Review of Financial\nStudies 6 (1993), 327–343. https://doi.org/10.1093/rfs/6.2.327\n[15] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and\nSepp Hochreiter. 2017. GANs Trained by a Two Time-scale Update Rule Converge\nto a Local Nash Equilibrium. Advances in neural information processing systems\n30 (2017). https://doi.org/10.5555/3295222.3295408\n[16] Masanori Hirano, Hiroki Sakaji, and Kiyoshi Izumi. 2022. PGSGAN: Policy\nGradient Stock GAN for Realistic Discrete Order Data Generation in Financial\nMarkets. (2022). https://doi.org/10.48550/arXiv.2204.13338\n[17] Blanka Horvath, Aitor Muguruza, and Mehdi Tomas. 2021.\nDeep learning\nvolatility: a deep neural network perspective on pricing and calibration in\n(rough) volatility models. Quantitative Finance 21, 1 (2021), 11–27.\nhttps:\n//doi.org/10.1080/14697688.2020.1817974\n[18] Blanka Horvath, Josef Teichmann, and Žan Žurič. 2021. Deep Hedging under\nRough Volatility. Risks 9, 7 (2021), 138. https://doi.org/10.3390/RISKS9070138\n[19] Shota Imaki, Kentaro Imajo, Katsuya Ito, Kentaro Minami, and Kei Nakagawa.\n2023. No-Transaction Band Network: A Neural Network Architecture for Efficient\nDeep Hedging. The Journal of Financial Data Science 5, 2 (2023), 84–99. https:\n//doi.org/10.3905/jfds.2023.1.125\n[20] Junyi Li, Xintong Wang, Yaoyang Lin, Arunesh Sinha, and Michael Wellman. 2020.\nGenerating Realistic Stock Market Order Streams. AAAI Conference on Artificial\nIntelligence 34, 01 (2020), 727–734. https://doi.org/10.1609/aaai.v34i01.5415\n[21] Aleksander Madry, Aleksandar Makelov, Ludwig Schmidt, Dimitris Tsipras, and\nAdrian Vladu. 2017. Towards Deep Learning Models Resistant to Adversarial\nAttacks. (2017). https://doi.org/10.48550/arXiv.1706.06083\n[22] Robert C Merton. 1973. Theory of Rational Option Pricing. The Bell Journal of\nEconomics and Management Science (1973), 141–183. https://doi.org/10.2307/\n3003143\n[23] Robert C. Merton. 1976. Option pricing when underlying stock returns are\ndiscontinuous. Journal of Financial Economics 3, 1-2 (1976), 125–144.\nhttps:\n//doi.org/10.1016/0304-405X(76)90022-2\n[24] Oskari Mikkilä and Juho Kanniainen. 2023. Empirical Deep Hedging. Quantitative\nFinance 23, 1 (2023), 111–122. https://doi.org/10.1080/14697688.2022.2136037\n[25] Phillip Murray, Ben Wood, Hans Buehler, Magnus Wiese, and Mikko Pakka-\nnen. 2022.\nDeep Hedging: Continuous Reinforcement Learning for Hedg-\ning of General Portfolios across Multiple Risk Aversions. In Proceedings of\nthe Third ACM International Conference on AI in Finance. 361–368.\nhttps:\n//doi.org/10.1145/3533271.3561731\n[26] Yusuke Naritomi and Takanori Adachi. 2020.\nData Augmentation of High\nFrequency Financial Data Using Generative Adversarial Network. In 2020\nIEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent\nAgent Technology (WI-IAT). IEEE, 641–648. https://doi.org/10.1109/WIIAT50758.\n2020.00097\n[27] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford,\nand Xi Chen. 2016. Improved Techniques for Training GANs. Technical Report.\n2234–2242 pages.\n[28] Nassim Nicholas Taleb. 1997. Dynamic Hedging. John Wiley & Sons.\n[29] Magnus Wiese, Robert Knobloch, Ralf Korn, and Peter Kretschmer. 2020. Quant\nGANs: Deep Generation of Financial Time Series. Quantitative Finance 20, 9\n(2020), 1419–1440.\n[30] Liu Ziyin, Kentaro Minami, and Kentaro Imajo. 2022. Theoretically Motivated\nData Augmentation and Regularization for Portfolio Construction. In Proceedings\nof the Third ACM International Conference on AI in Finance. 273–281.\nhttps:\n//doi.org/10.1145/3533271.3561720\n",
  "categories": [
    "q-fin.CP",
    "cs.AI"
  ],
  "published": "2023-07-25",
  "updated": "2023-07-25"
}