{
  "id": "http://arxiv.org/abs/2312.03741v1",
  "title": "Comparing Generative Chatbots Based on Process Requirements",
  "authors": [
    "Luis Fernando Lins",
    "Nathalia Nascimento",
    "Paulo Alencar",
    "Toacy Oliveira",
    "Donald Cowan"
  ],
  "abstract": "Business processes are commonly represented by modelling languages, such as\nEvent-driven Process Chain (EPC), Yet Another Workflow Language (YAWL), and the\nmost popular standard notation for modelling business processes, the Business\nProcess Model and Notation (BPMN). Most recently, chatbots, programs that allow\nusers to interact with a machine using natural language, have been increasingly\nused for business process execution support. A recent category of chatbots\nworth mentioning is generative-based chatbots, powered by Large Language Models\n(LLMs) such as OpenAI's Generative Pre-Trained Transformer (GPT) model and\nGoogle's Pathways Language Model (PaLM), which are trained on billions of\nparameters and support conversational intelligence. However, it is not clear\nwhether generative-based chatbots are able to understand and meet the\nrequirements of constructs such as those provided by BPMN for process execution\nsupport. This paper presents a case study to compare the performance of\nprominent generative models, GPT and PaLM, in the context of process execution\nsupport. The research sheds light into the challenging problem of using\nconversational approaches supported by generative chatbots as a means to\nunderstand process-aware modelling notations and support users to execute their\ntasks.",
  "text": "Comparing Generative Chatbots Based on Process\nRequirements: A Case Study\nLuis Fernando Lins, Nathalia Nascimento, Paulo Alencar, Toacy Oliveira, Donald Cowan\nDavid R. Cheriton School of Computer Science\nUniversity of Waterloo (UW)\nWaterloo, Canada\n{lflinsdossantos, nmoraesd, palencar, toliveira, dcowan}@uwaterloo.ca\nAbstract—Business processes are commonly represented by\nmodelling languages, such as Event-driven Process Chain (EPC),\nYet Another Workflow Language (YAWL), and the most popular\nstandard notation for modelling business processes, the Business\nProcess Model and Notation (BPMN). Most recently, chatbots,\nprograms that allow users to interact with a machine using\nnatural language, have been increasingly used for business\nprocess execution support. A recent category of chatbots worth\nmentioning is generative-based chatbots, powered by Large Lan-\nguage Models (LLMs) such as OpenAI’s Generative Pre-Trained\nTransformer (GPT) model and Google’s Pathways Language\nModel (PaLM), which are trained on billions of parameters\nand support conversational intelligence. However, it is not clear\nwhether generative-based chatbots are able to understand and\nmeet the requirements of constructs such as those provided by\nBPMN for process execution support. This paper presents a\ncase study to compare the performance of prominent generative\nmodels, GPT and PaLM, in the context of process execution\nsupport. The research sheds light into the challenging problem\nof using conversational approaches supported by generative\nchatbots as a means to understand process-aware modelling\nnotations and support users to execute their tasks.\nIndex Terms—business processes, generative chatbots, large\nlanguage models, process modelling languages, process-aware\nsupport.\nI. INTRODUCTION\nProcesses are pervasive in personal and organizational set-\ntings. They can support a wide variety of tasks, ranging from\nscheduling a trip [1] to hiring new employees or admitting\nstudents into a university program [2]. For this reason, orga-\nnizations are increasingly relying on automated processes to\nimprove efficiency and accuracy in the execution of their tasks.\nIn many cases, processes require people to perform tasks\nmanually. These processes are known as human workflows\n[3]. Although mechanisms have been proposed to visualize,\ncontrol, and manage processes, performing tasks in a process\ninvolving numerous human decisions can be more complicated\nthan it seems. First, tasks may have either a strict or a\nloose order, and this might leave participants confused in\ncomplex scenarios. Second, dependencies between tasks can\nbe challenging to track, in which case, not being aware of\nthe information that is required a priori, people may start\nexecuting tasks they are not able to finish properly. Third,\nprocesses that rely heavily on humans may differ based on\ntheir context or require access to ancillary documentation so\nthat errors are avoided [4]. Owing to these challenges, process\nparticipants should have a solution to guide them through\nprocess instances.\nOne possible solution to help guide users through business\nprocesses are chatbots, also known as conversational agents.\nChatbots are an emerging technology that has become ever so\npresent in various domains, from healthcare to customer ser-\nvice [5]. This technology’s main selling point is that chatbots\nare able to talk to humans, understand their needs, and respond\nin a coherent way, while also being available 24/7. Many\nbusinesses and academic projects have been using chatbots\nas a valuable tool, but there are still some challenges in the\nchatbot field that remain to be solved in an effective way. Some\nof these challenges include personalized responses based on\nuser context, analysis of customer behaviour from interaction\nhistory, sentiment and emotion analysis, and negotiation with-\nout human intervention [6] [7].\nOn the other hand, chatbots can be very unpredictable,\ndeciding conversation paths by itself that not always corre-\nspond to the business’s intention, especially when the chatbot\nis machine-learning-based [8]. Therefore, another challenge\nin the development of chatbots is creating one that closely\nfollows the business requirements. It is not clear whether\ngenerative-based chatbots are able to understand and meet\nthe requirements of constructs such as those provided by\nBMPM for process execution support. For this reason, this\npaper presents a case study to compare the performance of\nprominent generative models, GPT and PaLM, in the context\nof process execution support. The research sheds light into\nthe challenging problem of using conversational approaches\nsupported by generative chatbots as a means to understand\nprocess modelling notations and support users to execute their\ntasks.\nOur strategy involves two steps. First we produce the\nExtensible Markup Language (XML) file related to a specific\ncase study (e.g., travel planning) using a BPMN-modelling\napplication, in this case, Camunda Modeler. Second, we pro-\nvide the chatbot with the entire XML file related to a BPMN\nmodel, and let it interpret it on its own. We will send the XML\nfile related to one BPMN process model to two different LLM\nchatbots (GPT-3.5 and PaLM 2), in an attempt to see how well\n979-8-3503-2445-7/23/$31.00 ©2023 IEEE\narXiv:2312.03741v1  [cs.CL]  28 Nov 2023\neach model follows the original process model, based on a set\nof evaluation questions that will be described in this section.\nThe paper is structured as follows. Section II provides some\nresearch background and related work. Section III describes\nthe generation of XML of the BPMN process for our case\nstudy. Section IV will and V details the evaluation questions\nthat were used for our case study, and Section presents the\nresults of our qualitative and quantitative evaluation. Finally,\nSection VI concludes with summary remarks and future per-\nspectives.\nII. RELATED WORK\nThere are multiple works that have been previously pub-\nlished that cover the use of chatbots for helping in the\nexecution of business processes. Kecht et al. introduced a\nstudy on quantifying a chatbot’s ability to learn and adhere\nto organizations’ business processes [9]. Their chatbots were\ntrained with a dataset of customer support conversations with\nhuman support agents on Twitter, and their work quantified\nthe ability of these chatbots to learn the process from the\ndataset and adhere to the discovered process. von Wolff et al.\nconducted a research study to understand users’ perspectives\nin terms of design and acceptance of a process-based chatbot\n[10]. Their results showed that users can execute business\nprocesses in a similar or faster time when using process-based\nchatbots compared to existing solutions, and that this kind of\nchatbot also reduces the risk of users making critical errors or\nexperiencing interruptions when using process-based chatbots\nto execute a business process.\nHowever, both of the previous studies only analyzed ad-\nhoc processes, not ones described in a systematic notation.\nMeanwhile, there are also works that use the BPMN notation\nwith chatbots, such as Amantea et al.’s study, that presents a\nframework that leverages both BPMN modelling and chatbot\ntechnology to enhance healthcare processes [11]. Meanwhile,\nRooein et al. investigate the use of chatbots to teach business\nmodels written in BPMN to different actors in a company [12].\nAlthough there have been advances in the use of differ-\nent kinds of chatbots to support conversational interactions\nwith users in terms of BPMN process execution, there is a\nneed to understand to what extent generative-based chatbots,\nspecifically, such as GPT and PaLM can understand modeling\nnotations for business processes and provide users with process\nexecution support.\nIII. GENERATING THE XML OF THE BPMN PROCESS\nREPRESENTATION\nThe XML file for a specific case study, that is, trip planning,\nwas generated using Camunda Modeler. The Trip Planning\nmodel is shown in Figure 1. We omit details about how the\nprocess is modelled using Camunda Modeler, because our\nfocus is on how well generative chatbots understand the XML\nfile related to the BPMN model of the process.\nBPMN uses a set of symbols and graphical notations to\nrepresent different elements of a business process. Some\ncommon symbols used in BPMN include:\n1) Activities, which can represent tasks or actions per-\nformed within a process;\n2) Events, which represent something that occurs during\nthe course of a process, such as the start or end of a\nprocess;\n3) Gateways, which indicate points in a process where the\nflow can diverge or converge based on certain conditions.\nThere are multiple types of gateways in the BPMN\nnotation, such as parallel gateways, exclusive gateways,\ninclusive gateways, and more;\n4) Flows, which depict the sequence and direction of ac-\ntivities and events within a process;\nThe approach involves directly providing the BPMN XML\nfile to the chatbot and allowing it to autonomously parse and\ncomprehend all the elements within the BPMN model. This\nidea was based on the chatbot’s ability to effectively extract\nthe relevant process information from the BPMN XML file\nwithout the need for prior in-depth explanation about the\nprocess in natural language. The only message that we sent\nbefore the XML file, to give the chatbot some context about\nwhat it was expected to do, was: “Given the BPMN XML\nbelow, act as an agent to help me execute this process, given\nBPMN restrictions. You should only list the tasks that are\navailable at that particular moment.”\nIV. EVALUATIONS QUESTIONS USED IN COMPARING\nGENERATIVE CHATBOTS\nIn this section, we discuss the evaluation questions (EQs)\nthat we will use to compare whether the chosen generative-\nbased chatbots can understand and follow the BPMN require-\nments as specified by the official BPMN specification [13].\nThese evaluation questions were thoughtfully designed and\nare categorized into six distinct categories, each addressing\nspecific aspects of the chatbots’ performance and adherence\nto BPMN standards. The six categories include:\n1) Start Event: These questions focus on assessing the\nchatbots’ ability to initiate process instances in line with\nBPMN’s Start Event requirements.\n2) Forward Flow: The evaluation questions in this cat-\negory delve into the chatbots’ capability to maintain\nthe sequential flow of activities and decisions within a\nprocess.\n3) Previous History: This category of questions examines\nthe chatbots’ handling of historical data and their ability\nto integrate past information into the ongoing processes.\n4) End Event: Here, we assess the chatbots’ proficiency\nin finishing process instances appropriately, following\nBPMN’s End Event guidelines.\n5) Process Variables: This category of evaluation ques-\ntions analyzes how well the chatbots manage and ma-\nnipulate process variables.\n6) Unintended paths: The final category of evaluation\nquestions checks if the chatbot allows the user to per-\nform actions that are not supposed to be executed at a\ngiven moment.\nFig. 1: BPMN diagram for the “Trip Planning” process.\nBy categorizing the evaluation questions into these six\ndistinct areas, we aim to provide a comprehensive assessment\nof the generative-based chatbots’ compliance with BPMN,\ncovering critical aspects of process modelling and execution.\nA. Category 1: Start Event\nEQ1: Has the process instance been initiated successfully\nafter triggering the start event?\nRepresented by sending the chatbot the following message:\n“Let’s start a new process instance and name it X1.”\nEQ2: Does the chatbot correctly mention the first task\nthat follows the start event after the process instance is\ninitiated?\nRepresented by asking the chatbot: “What tasks are avail-\nable to me at the beginning?” and verifying if only the first\ntask is mentioned.\nB. Category 2: Forward Flow\nEQ3: After completing a task, if it is followed by another\ntask directly connected by a direct sequence flow, does the\nchatbot correctly mention the next task?\nRepresented by analyzing the chatbot’s response after in-\nforming the chatbot that a task was completed.\nEQ4: After completing a task, does the chatbot avoid\nmentioning tasks that are not yet available in the process\nflow?\nRepresented by analyzing the chatbot’s response after in-\nforming the chatbot that a task was completed.\nEQ5: After completing a task and encountering an\nexclusive gateway, does the chatbot correctly evaluate the\ngateway based on the conditions of its outgoing sequence\nflows and present only one valid flow to the user?\nRepresented by analyzing the chatbot’s response after in-\nforming the chatbot that a task was completed.\nC. Category 3: Previous History\nEQ6: When presenting a task to the user, if it was\nimmediately preceded by another task through a sequence\nflow, does the chatbot correctly identify the preceding\ntask?\nRepresented by asking the chatbot the following question:\n“What was the previous task that was executed?”\nEQ7: When presenting a task to the user, if it was pre-\nceded by an exclusive gateway, does the chatbot accurately\nconvey the decision represented by the preceding gateway?\nRepresented by asking the chatbot the following question:\n“Why is this the only available task?”\nD. Category 4: End Event\nEQ8: Upon reaching an end event, does the chatbot\naccurately identify the task that immediately preceded it\nin the process flow?\nRepresented by asking the chatbot the following question:\n“What was the last task before the process instance was\nended?”\nEQ9: When reaching an end event, does the chatbot\nensure that the process instance is terminated only when\nall start events have been triggered and all pending flows\nhave been completed?\nRepresented by asking the chatbot the following question:\n“Had all the start events been triggered, and had all pending\nflows been finished?”\nE. Category 5: Process Decision Points\nEQ10: At the end of the process, does the chatbot retain\nknowledge of all the decisions that had to be made at\ngateways?\nRepresented by asking the chatbot the following question:\n“What were the decisions made at each gateway?”\nEQ11: At the end of the process, does the chatbot retain\nknowledge of the user’s choice at each gateway?\nRepresented by asking the chatbot the following question:\n“What was the user’s choice at each gateway for this particular\nprocess instance, X1?”\nF. Category 6: Unintended paths\nEQ12: Does the chatbot allow the user to perform a task\nthat is not yet available in the process?\nRepresented by having the user tell the chatbot that they\nwant to execute a task that is not on the list of available tasks\nthat the chatbot sent.\nEQ13: Does the chatbot allow the user to end the process\nwhen it is not supposed to?\nRepresented by asking the chatbot the following question:\n“Can I end the process now?”, before all the required tasks\nare done.\nV. COMPARING GENERATIVE CHATBOTS BASED ON\nBPMN REQUIREMENTS: GPT VS. PALM\nA. GPT: Trip Planning Use Case\nAfter sending to GPT the XML document that referred to\nthe Trip Planning BPMN diagram depicted in Fig. 1, we then\nbegin to send to it the set of questions that are described in\nthe previous section, to understand how well it adheres to the\nprocess itself.\n1) Category 1: Start Event: After creating a new process\ninstance named X1 and asking for the available tasks, GPT-3.5\ncorrectly initiates the process instance and presents the only\navailable task, as shown by the conversation below:\nUser: Let’s start a new process instance and name it\nX1. What tasks are available to me at the beginning?\nChatbot: In the provided BPMN XML, you’re start-\ning a new process instance named “X1” in the\n“Simple Trip Planning” process. At the beginning\nof this process instance, the following tasks are\navailable:\n1) Book flight (User Task)\nTask ID: book flight\nTask Name: Book flight\nThese are the tasks that can be executed when\nstarting process instance “X1.” You can begin by\nperforming the “Book flight” task.\nTherefore, both EQ1 (Has the process instance been initiated\nsuccessfully after triggering the start event?) and EQ2 (Does\nthe chatbot correctly mention the first task that follows the\nstart event after the process instance is initiated?) are met for\nthis particular use case.\n2) Category 2: Forward Flow: After booking the flight, the\nnext task, “Book hotel”, which is directly connected to “Book\nflight” through a sequence flow, is presented to the user.\nUser: I’ve booked the flight\nChatbot: Great! You’ve booked the flight. Now, let’s\ndetermine the next available tasks in the process.\nAfter booking the flight, you can see the following\navailable tasks:\n1) Book hotel (User Task)\nTask ID: book hotel\nTask Name: Book hotel\nTo continue the process, you can now proceed to\nbook a hotel by executing the “Book hotel” task.\nTherefore, EQ3 (After completing a task, if it is followed\nby another task directly connected by a direct sequence flow,\ndoes the chatbot correctly mention the next task?) is also met.\nNow, after the user mentions that they completed the “Book\nhotel” task, a strange behaviour occurred: the chatbot assumed\nthe gateway that followed the “Book hotel” task was also a\ntask, as shown below:\nUser: I’ve booked the hotel\nChatbot: Excellent! You’ve booked the hotel. Now,\nlet’s find out the next available tasks in the process.\nAfter booking the hotel, the following task is avail-\nable:\n1) Transfer preference (Exclusive Gateway)\nGateway ID: Gateway 01f6asu\nGateway Name: Transfer preference\nAt this point, you need to make a choice based\non your transfer preference. You can either book\na transfer or proceed with booking a tour. Please\nlet me know your preference, and I will guide you\naccordingly.\nHowever, because the gateway should not have been pre-\nsented as a task, we decide to raise an objection to the answer,\nat which point the chatbot corrects itself:\nUser: Is this gateway a task?\nChatbot: I apologize for the confusion. The “Trans-\nfer preference” (Gateway 01f6asu) is not a task; it is\na gateway element used for making decisions in the\nprocess flow. It represents a branching point where\nthe process flow diverges based on a condition.\nTo clarify, the available tasks after booking the hotel\nare as follows:\n1) Book transfer (User Task)\nTask ID: book transfer\nTask Name: Book transfer\n2) Book tour (User Task)\nTask ID: book tour\nTask Name: Book tour\nYou can choose to execute either the “Book transfer”\nor “Book tour” task based on your preference.\nThen, the user proceeds with the process execution as\nexpected:\nUser: I want to book a transfer\nChatbot: Great choice! Since you want to book a\ntransfer, you should proceed with the “Book trans-\nfer” task.\n1) Book transfer (User Task)\nTask ID: book transfer\nTask Name: Book transfer\nYou can now execute the “Book transfer” task as the\nnext step in the process.\nAnd finally, after mentioning that the transfer was booked,\nthe last User task, “Book tour” is correctly presented.\nUser: I’ve booked the transfer\nChatbot: Excellent! You’ve successfully booked the\ntransfer. Now, after booking the transfer, the next\navailable task in the process is the “Book tour” task.\n1) Book tour (User Task)\nTask ID: book tour\nTask Name: Book tour\nYou can now proceed with the “Book tour” task to\ncontinue the process.\nWith this conversation flow, we realize that EQ4 (After\ncompleting a task, does the chatbot avoid mentioning tasks that\nare not yet available in the process flow?) is met, because GPT-\n3.5 does not mention any task that is not yet available in the\nprocess flow. However, we argue that EQ5 (After completing a\ntask and encountering an exclusive gateway, does the chatbot\ncorrectly evaluate the gateway based on the conditions of its\noutgoing sequence flows and present only one valid flow to\nthe user?) is only partially met, because the gateway should\nhave been evaluated automatically by asking the user for its\npreference, instead of presenting the gateway as a task that the\nuser had to execute manually.\n3) Category 3: Previous History: For EQ6, (When pre-\nsenting a task to the user, if it was immediately preceded\nby another task through a sequence flow, does the chatbot\ncorrectly identify the preceding task?), we ask the chatbot\nwhat was the previous task executed, after executing the “Book\nflight” task, and it responds appropriately. Therefore, EQ6 is\nmet, as exemplified by the excerpt below:\nUser: What was the previous task that was executed?\nChatbot: The previous task that was executed was\n“Book flight,” with a User Task ID of “book flight.”\nLater in the process, after the user reaches the exclusive\ngateway and says that they want to book a transfer, the\nchatbot appropriately presents the “Book transfer” task. When\nquestioned, why this is the only available task, the chatbot\nprovides a valid answer:\nUser: I want to book a transfer\nChatbot: Great choice! Since you want to book a\ntransfer, you should proceed with the “Book trans-\nfer” task.\n1) Book transfer (User Task)\nTask ID: book transfer\nTask Name: Book transfer\nYou can now execute the “Book transfer” task as the\nnext step in the process.\nUser: Why is this the only available task?\nChatbot: In the BPMN process you provided, af-\nter booking the flight and then booking the hotel,\nyou reached an exclusive gateway named “Transfer\npreference.” This gateway splits the process flow into\ntwo alternative paths based on user preference. The\navailable tasks depend on the conditions specified in\nthe gateway’s outgoing sequence flows:\n• If the user wants to book a transfer, you proceed\nto the “Book transfer” task.\n• If the user does not want to book a transfer, you\nwould go to the “Book tour” task.\nSince you indicated that you wanted to book a\ntransfer, the process follows the path that leads to the\n“Book transfer” task. This is why “Book transfer” is\nthe only available task at this point in the process.\nThe other path, which involves booking a tour, is\nnot taken in this scenario.\nTherefore, EQ7 (When presenting a task to the user, if it was\npreceded by an exclusive gateway, does the chatbot accurately\nconvey the decision represented by the preceding gateway?) is\nalso met.\n4) Category 4: End Event: Then, after the transfer is\nbooked and the “Book tour” task is presented, when the user\ninforms the chatbot that the tour has been booked, the chatbot\nappropriately finish the process instance:\nUser: I’ve booked the tour\nChatbot: Great! You’ve booked the tour. After book-\ning the tour, the process reaches its conclusion,\nas the “Book tour” task is followed by the “En-\ndEvent 1pckwqd,” which signifies the end of the\nprocess instance. Your process instance “X1” has\nbeen successfully completed with the booking of the\ntour.\nThen, after asking the two questions that refer to EQ8 and\nEQ9, both are answered accordingly.\nUser: What was the last task before the process\ninstance was ended?\nChatbot: The last task executed just before the\nprocess instance was ended was the “Book tour”\ntask.\nUser: Had all the start events been triggered, and\nhad all pending flows been finished?\nChatbot: In the BPMN process you provided, there\nwas only one start event, which is “StartEvent 1.”\nThis start event was triggered to initiate the process\ninstance. All of the pending flows in the process\nhave been executed and completed as you progressed\nthrough the tasks. Therefore, all start events have\nbeen triggered, and all pending flows have been\nfinished for this specific process instance “X1.”\nTherefore, EQ8 (Upon reaching an end event, does the\nchatbot accurately identify the task that immediately preceded\nit in the process flow?) and EQ9 (When reaching an end event,\ndoes the chatbot ensure that the process instance is terminated\nonly when all start events have been triggered and all pending\nflows have been completed?) are met.\n5) Category 5: Process Decision Points: Finally, we ask\nsome questions to the chatbot regarding the process decision\npoints:\nUser: What were the decisions made at each gate-\nway?\nChatbot: In the provided BPMN process, there is an\nexclusive gateway with the ID “Gateway 01f6asu”\nnamed “Transfer preference.” Decisions are made at\nthis gateway based on the conditions specified in\nthe outgoing sequence flows. Here are the decisions\nmade at each gateway:\nExclusive Gateway “Transfer preference” (ID: Gate-\nway 01f6asu):\n• If the condition “If user wants to book a trans-\nfer” is true, the process flow goes to the “Book\ntransfer” task.\n• If the condition “If user does not want to book\na transfer” is true, the process flow goes to the\n“Book tour” task.\nThese decisions determine whether the user wants\nto book a transfer or not, and the subsequent tasks\nare executed accordingly based on these decisions.\nUser: What was the user’s choice at each gateway\nfor this particular process instance, X1?\nChatbot: In the context of the specific process\ninstance “X1,” the user’s choice at each gateway was\nas follows:\nExclusive Gateway “Transfer preference” (ID: Gate-\nway 01f6asu):\n• The user’s choice was to book a transfer, as\nindicated in your interactions. This choice led\nto the execution of the “Book transfer” task.\nThroughout the process instance “X1,” the user\nconsistently chose to book a transfer at the gate-\nway, which determined the subsequent tasks in the\nprocess flow.\nWith these answers, we notice that EQ10 (At the end of the\nprocess, does the chatbot retain knowledge of all the decisions\nthat had to be made at gateways?) and EQ11 (At the end of\nthe process, does the chatbot retain knowledge of the user’s\nchoice at each gateway?) are also met.\n6) Category 6: Unintended paths: If the user starts a new\nprocess instance, and tries to execute tasks in the wrong\norder, for this particular use case, GPT fails to prevent the\nwrongful execution. As shown by the initial conversation\nbelow, it seemed as though the chatbot would not let the\nuser execute tasks in the wrong order, however, further into\nthe conversation, the chatbot makes incorrect assumptions and\nallows for the execution of unavailable tasks.\nUser: Let’s start a new process instance X2, of the\nsame process. What tasks are available to me?\nChatbot: When starting a new process instance\n“X2” of the same “Simple Trip Planning” process,\nthe available tasks at the beginning are the same as\nfor the initial process instance “X1.” Therefore, the\navailable task is:\n1) Book flight (User Task)\nTask ID: book flight\nTask Name: Book flight\nYou can start by executing the “Book flight” task for\nprocess instance “X2” as well.\nUser: I’ve booked the flight\nChatbot: Great! You’ve booked the flight for pro-\ncess instance “X2.” After booking the flight, the next\navailable tasks in the process are the same as for the\nprevious instance “X1.” You can now proceed with\nthe following task:\n1) Book hotel (User Task)\nTask ID: book hotel\nTask Name: Book hotel\nYou can continue the process by executing the “Book\nhotel” task.\nUser: Can I book the transfer now?\nChatbot: No, you cannot book the transfer at this\npoint. In the process flow, the option to book the\ntransfer is determined by a conditional gateway\n(“Transfer preference”) that occurs after booking\nthe hotel. This gateway has two outgoing sequence\nflows:\n• If the user wants to book a transfer, the flow\ngoes to the “Book transfer” task.\n• If the user does not want to book a transfer, the\nflow goes to the “Book tour” task.\nSince you have booked the flight and hotel, the next\nstep is to book the hotel, and the decision to book\na transfer or not will be determined after booking\nthe hotel. So, you will need to complete the “Book\nhotel” task first before the option to book the transfer\nbecomes available.\nHowever, if the user does not book the hotel or the transfer,\nand insists on executing another wrong task, namely the “Book\ntour” task, the chatbot gets confused and informs the user that\nthe “Book tour” task is available, even though it cannot be\nreached directly from the “Book flight” task.\nUser: Can I book the tour?\nChatbot: Yes, you can book the tour at this point.\nAfter booking the flight and hotel, the next avail-\nable tasks are determined by the exclusive gateway\n(“Transfer preference”), which has two outgoing\nsequence flows:\n• If the user wants to book a transfer, the flow\ngoes to the “Book transfer” task.\n• If the user does not want to book a transfer, the\nflow goes to the “Book tour” task.\nSince you mentioned that you’ve booked the flight\nand hotel, it implies that you do not want to book\na transfer, so you can proceed to book the tour. The\navailable task is:\n1) Book tour (User Task)\nTask ID: book tour\nTask Name: Book tour\nYou can continue the process by executing the “Book\ntour” task.\nAs it is possible to see, the chatbot assumed the user had\nalready booked the hotel even though that was not explicitly\nmentioned. Furthermore, it also assumed that the user did not\nwant to book a transfer, despite not explicitly asking the user\nfor their choice. Therefore, EQ12 (Does the chatbot allow the\nuser to perform a task that is not yet available in the process?)\nis not met.\nHowever, if after completing the “Book flight” task, the user\nmentions that they want to end the process, the chatbot does\nnot allow the user to prematurely end the process, which means\nEQ13 (Does the chatbot allow the user to end the process when\nit is not supposed to?) is met, as shown in the excerpt below:\nUser: I’ve booked the flight\nChatbot: Great! You’ve booked the flight for pro-\ncess instance “X2.” After booking the flight, the next\navailable tasks in the process are the same as for the\nprevious instance “X1.” You can now proceed with\nthe following task:\n1) Book hotel (User Task)\nTask ID: book hotel\nTask Name: Book hotel\nYou can continue the process by executing the “Book\nhotel” task.\nUser: Can I end the process now?\nChatbot: No, you cannot end the process at this\npoint. In the provided BPMN model, there is no\nend event immediately following the “Book hotel”\ntask, so the process must continue with further\ntasks. To complete the process, you’ll need to follow\nthe sequence defined in the BPMN model. Please\nproceed with the “Book hotel” task, and then we\ncan determine the next steps in the process based on\nthe BPMN model.\nOverall, GPT-3.5 meets most of the criteria used in our\nevaluation. However, EQ12, which prevents the user from\nexecuting unavailable tasks, was not met, and EQ5, related\nto analyzing the decision at a gateway, was only partially met,\ndue to an unexpected behaviour when reaching an exclusive\ngateway. That suggests that GPT-3.5 might have a hard time\ndealing with exclusive gateways and following the correct\norder of tasks if there are strict dependencies between them.\nB. PaLM: Trip Planning Use Case\nAfter analyzing how well GPT adheres to the Trip Planning\nprocess model using its BPMN XML file, we now move on to\nthe evaluation of Google’s PaLM model, so as to compare its\nexecution to GPT, again with the same process model. In this\nsection, we will answer the same evaluation questions as the\nprevious subsection, to be able to compare PaLM and GPT\nwith a structured methodology.\nFor PaLM, we used the same XML document for the Trip\nPlanning model as the one we used for GPT. Throughout this\nsection, we will be analyzing each of the six main categories\nthat are related to the adherence of PaLM to the BPMN\nconstructs utilized in our process model.\n1) Category 1: Start Event: After creating a new process\ninstance named X1 and asking for the available tasks, PaLM\ncorrectly initiates the process instance and presents the only\navailable task, as shown by the conversation below:\nUser: Let’s start a new process instance and name it\nX1. What tasks are available to me at the beginning?\nChatbot: The following tasks are available to you\nat the beginning of the process instance X1:\n- book flight\nTherefore, both EQ1 (Has the process instance been initiated\nsuccessfully after triggering the start event?) and EQ2 (Does\nthe chatbot correctly mention the first task that follows the\nstart event after the process instance is initiated?) are met for\nthis particular use case.\n2) Category 2: Forward Flow: After booking the flight,\nthe next task, “book hotel” which is directly connected to\n“book flight” through a sequence flow, is presented to the\nuser. However, PaLM also presents another task that should\nnot have been presented, which was the “book transfer”.\nUser: I’ve booked the flight\nChatbot: The following tasks are available to you\nnow:\n- book hotel\n- book transfer\nBecause the “book hotel” task has been correctly presented,\nwe argue that EQ3 (After completing a task, if it is followed by\nanother task directly connected by a direct sequence flow, does\nthe chatbot correctly mention the next task?) is met. However,\nbecause it also mentions a task that is not yet available, EQ4\n(After completing a task, does the chatbot avoid mentioning\ntasks that are not yet available in the process flow?) is not\nmet.\nFurthermore, when we challenge the chatbot asking if it is\nsure that the “book transfer” task is available, it also lists its\nincorrect assumption about the decision at the gateway.\nUser: Are you sure the book transfer task is avail-\nable?\nChatbot: Yes, the book transfer task is available.\nSince you did not select the “If user does not want\nto book a transfer” path in the Gateway 01f6asu\ngateway, the book transfer task is available.\nTherefore, we argue that EQ5 (After completing a task and\nencountering an exclusive gateway, does the chatbot correctly\nevaluate the gateway based on the conditions of its outgoing\nsequence flows and present only one valid flow to the user?) is\npartially met, because the chatbot does present only one valid\nflow but it did not correctly evaluate the gateway based on the\nconditions of its outgoing sequence flow, as it did not ask the\nuser for their explicit choice.\n3) Category 3: Previous History: For EQ6, (When pre-\nsenting a task to the user, if it was immediately preceded\nby another task through a sequence flow, does the chatbot\ncorrectly identify the preceding task?), we ask the chatbot\nabout the previous task executed, after completing the “Book\nflight” task, and it responds appropriately. Therefore, EQ6 is\nmet, as shown in the excerpt below:\nUser: What was the previous task that was executed?\nChatbot: The previous task that was executed was\nbook flight.\nLater\nin\nthe\nprocess,\nafter\nthe\nuser\ncompletes\nthe\n“book hotel” task, the chatbot fails to ask the user’s trans-\nfer preference. Instead, it lists both the “book transfer” and\n“book tour” tasks:\nUser: I’ve booked the hotel\nChatbot: The following tasks are available to you\nnow:\n- book transfer\n- book tour\nEven though for EQ7 (When presenting a task to the user,\nif it was preceded by an exclusive gateway, does the chatbot\naccurately convey the decision represented by the preceding\ngateway?), the question that should be asked was “Why is\nthis the only available task?”, in the current conversation, this\nquestion does not make sense because the chatbot presented\ntwo tasks, and not only one, as it should have. Therefore, EQ7\nis not met.\n4) Category 4: End Event: Then, we chose to complete the\n“book tour” task before mentioning that the “book transfer”\ntask had been completed, to see how the chatbot would react.\nIn this case, the chatbot finished the process instance even\nthough the “book transfer” task had not been executed:\nUser: I’ve booked the tour\nChatbot: The process instance X1 has been com-\npleted.\nAfter asking about the “book transfer” task, the chatbot\nmentions its assumption that, because the user chose to execute\nthe “book tour” task, this implicitly meant that the user chose\nto follow the path that bypasses “book transfer” task when\nreaching the gateway:\nUser: What about the “book transfer” task? Had it\nbeen executed?\nChatbot: No, the book transfer task had not been\nexecuted. Since you did not select the “If user wants\nto book a transfer” path in the Gateway 01f6asu\ngateway, the book transfer task was not executed.\nGiven that the chatbot had the assumption that, after the\ngateway, the user had chosen to not book a transfer, it made\nsense to be able to end the process after booking the tour.\nTherefore, after asking the two questions that refer to EQ8\nand EQ9, both are answered accordingly:\nUser: What was the last task before the process\ninstance was ended?\nChatbot: The last task before the process instance\nwas ended was book tour.\nUser: Had all the start events been triggered, and\nhad all pending flows been finished?\nChatbot: Yes, all the start events had been triggered,\nand all pending flows had been finished.\nIn this case, EQ8 (Upon reaching an end event, does the\nchatbot accurately identify the task that immediately preceded\nit in the process flow?) and EQ9 (When reaching an end event,\ndoes the chatbot ensure that the process instance is terminated\nonly when all start events have been triggered and all pending\nflows have been completed?) are met.\n5) Category 5: Process Decision Points: Finally, we ask\nsome questions to the chatbot regarding the process decision\npoints:\nUser: What were the decisions made at each gate-\nway?\nChatbot: The following decisions were made at each\ngateway:\n- Gateway 01f6asu: If user wants to book a transfer\nUser: What was the user’s choice at each gateway\nfor this particular process instance, X1?\nChatbot: The user chose the following options at\neach gateway for process instance X1:\n- Gateway 01f6asu: If user does not want to book a\ntransfer\nDespite PaLM’s robotic way of describing the user’s transfer\npreference, PaLM was successfully able to remember that the\nuser decided not to book a transfer. With these answers, we\nnote that EQ10 (At the end of the process, does the chatbot\nretain knowledge of all the decisions that had to be made\nat gateways?) and EQ11 (At the end of the process, does\nthe chatbot retain knowledge of the user’s choice at each\ngateway?) are also met, even though the chatbot implicitly\nassumed the user’s choice at the gateway, without asking\nexplicitly for their choice.\n6) Category 6: Unintended paths: If the user starts a new\nprocess instance, and tries to execute tasks in the wrong order,\nfor this particular use case, just like GPT, PaLM also fails to\nprevent the wrongful execution of tasks.\nUser: Let’s start a new process instance X2, of the\nsame process. What tasks are available to me?\nChatbot: The following tasks are available to you\nat the beginning of the process instance X2:\n- book flight\nUser: I’ve booked the flight\nChatbot: The following tasks are available to you\nnow:\n- book hotel\n- book transfer\nUser: Can I book the transfer now?\nChatbot: Yes, you can book the transfer now.\nAs it is possible to see, the chatbot would let the user\nbook the transfer before booking the hotel, which is not\nallowed according to the BPMN process model. Therefore,\nEQ12 (Does the chatbot allow the user to perform a task that\nis not yet available in the process?) is not met.\nOn the other hand, after completing the “Book flight” task,\nif the user mentions that they want to end the process, the\nchatbot does not allow the user to prematurely end the process,\nwhich means EQ13 (Does the chatbot allow the user to end\nthe process when it is not supposed to?) is met, as shown in\nthe excerpt below:\nUser: I’ve booked the flight\nChatbot: The following tasks are available to you\nnow:\n- book hotel\n- book transfer\nUser: Can I end the process now?\nChatbot: No, you cannot end the process now. There\nare still pending tasks that need to be executed. The\nfollowing tasks are still pending:\n- book hotel\n- book transfer\n- book tour\nOverall, PaLM 2 has a larger failure rate than GPT in\nterms of meeting evaluation criteria. EQ4 and EQ12, related to\nmentioning and allowing the execution of tasks that are not yet\navailable in the process are not met, EQ7 is not met and EQ5\nis partially met, these last two being related to how exclusive\ngateways are evaluated. That suggests that PaLM 2, just like\nGPT-3.5, has a hard time dealing with exclusive gateways and\nfollowing the correct order of tasks, presenting tasks that are\nnot yet available in the process execution.\nC. Use Case Comparison\nOver the previous section, we have seen examples of\nconversations with both GPT-3.5 and PaLM 2 related to\nour Trip Planning process model. Our goal was to evaluate\nif generative-based chatbots can help users in the process\nexecution in a similar way as the more traditional retrieval-\nbased chatbots, without the requirement of having an explicit\nconnection to a process engine. The reason why we wanted to\nexperiment with generative-based chatbots for process execu-\ntion support was twofold:\n1) Implementing a chatbot from scratch for process execu-\ntion support is notoriously harder than using a ready-\nto-use generative-based chatbot that has already been\ntrained on a large dataset. Therefore, if it was possi-\nble to use a production-ready generative-based chatbot\nachieving the same end result and with much less\nimplementation effort than a personalized chatbot would\ntake, that would be the ideal scenario.\n2) Because generative-based chatbots are trained on mil-\nlions of data points, they are supposed to be much\nmore equipped to deal with exceptions in the process\nexecution and different ways to phrase the same intents.\nHowever, because of this flexibility that generative-based\nchatbots allow for, a pivotal question was whether or not they\nwere able to stick to BPMN constructs, such as the strict order\nbetween tasks that are directly connected by sequence flows,\nthe determining conditions for each flow coming out of an\nexclusive gateway, the multiple flows that should be presented\nfollowing a gateway, and other requirements.\nTo analyze how well these chatbots could adhere to these\nrequirements, we devised a set of evaluation questions, de-\ntailed in Section IV, to conduct a structured evaluation on\nthem, and over the previous sections, we sent each chatbot\nvirtually the same prompts, and see how each of them would\nrespond. Occasionally, we would also add an extra prompt to\nbetter understand a certain response and how that would affect\nwhether a specific evaluation criterion was met or not.\nIn the current sub-section, we provide a qualitative and\nquantitative comparison of each chatbot’s performance, based\non the results from the previous experiments.\n1) Qualitative Comparison: For our qualitative compari-\nson, in Table 1, we provide a list of all evaluation questions\nand whether each of them was fully met, partially met, or not\nmet, for each of our two experiments (GPT and PaLM).\n2) Quantitative Comparison:\nFollowing our qualitative\ncomparison, we perform a quantitative comparison based\non the results from our experiments. Table 2 describes the\npercentage of fulfillment of EQs by each chatbot for each\nexperiment, broken down into the percentage of EQs that a\ncertain experiment has met, partially met and not met. While\nboth had trouble with task dependency and the evaluation\nof exclusive gateways, GPT achieved overall better scores in\nterms of meeting BPMN requirements when helping users\nexecute business processes.\nD. Evaluation Conclusions and Limitations\nWhen it comes to assisting users in business process execu-\ntion based on BPMN constructs, it’s essential to consider the\nTable 1: Fulfillment of each evaluation question (EQ) in\neach experiment\nEQs\nGPT\nPaLM\nEQ1\nYes\nYes\nEQ2\nYes\nYes\nEQ3\nYes\nYes\nEQ4\nYes\nNo\nEQ5\nPartially\nPartially\nEQ6\nYes\nYes\nEQ7\nYes\nNo\nEQ8\nYes\nYes\nEQ9\nYes\nYes\nEQ10\nYes\nYes\nEQ11\nYes\nYes\nEQ12\nYes\nNo\nEQ13\nYes\nYes\nTable 2: Percentage of fulfillment of EQs by each chatbot\nfor each experiment\nGPT\nPaLM\nMet\n92.31\n69.23\nPartially met\n7.69\n7.69\nNot met\n0\n23.08\nperformance of both GPT and PaLM. One noteworthy obser-\nvation is their ability to analyze exclusive gateways. Exclusive\ngateways in BPMN models represent pivotal decision points,\nwhere a specific path is chosen based on certain conditions.\nWhile neither chatbot excels in dealing with this type of gate-\nway, GPT demonstrates a relatively better capability compared\nto PaLM. In the Trip Planning scenario, GPT achieved a score\nof 92.31% in terms of meeting the evaluation questions, while\nPaLM only met 69.23% of the questions. Both chatbots exhibit\nlimitations in comprehending these intricate conditions, but\nGPT’s better performance suggests a superior understanding\nof the decision-making process within exclusive gateways.\nNevertheless, this area remains a challenge for both chatbots,\nand future work may focus on enhancing their abilities to\ninterpret complex conditional logic.\nWhile this study provides valuable insights into the integra-\ntion of process knowledge into generative-based chatbots, it is\nessential to acknowledge its limitations. First, the evaluation\nis restricted to a specific process model use case, namely Trip\nPlanning. To broaden the applicability of our findings, it would\nbe advisable to explore and assess different process models,\nsuch as manufacturing processes or financial processes, which\nmight present distinct challenges and requirements. Second,\nour research focuses on a particular subset of BPMN con-\nstructs, specifically events, tasks, and one type of gateway.\nWhile these constructs are relevant, the full spectrum of\nBPMN features, including different kinds of gateways (e.g., in-\nclusive and event-based), messages, timers, and subprocesses,\nremains unexplored. Finally, our study is limited to a specific\nsubset of generative-based models, primarily GPT and PaLM.\nA more extensive evaluation of generative-based models could\nyield insights into which models might offer advantages for\nspecific scenarios.\nVI. CONCLUSION AND FUTURE WORK\nThis research underscores the potential of chatbots as valu-\nable tools in business process execution. It illuminates avenues\nfor future research and development, offering guidance on how\nto harness generative models for more effective support. As\norganizations continue to seek efficient and adaptable solutions\nfor their processes, this work provides a substantial step toward\na better integration of chatbots in the domain of business\nprocess execution support.\nFuture work involves extending the evaluation criteria, and\nincluding other process modelling constructs and generative\nchatbots. The first future research avenue would be to extend\nthe evaluation criteria to include other BPMN constructs\nand assess the applicability of generative-based process-aware\nchatbots for different process notations. Second, the opportu-\nnity of using generative-based chatbots to assist in the initial\nmodelling of BPMN processes (instead of only in their exe-\ncution) could be explored. These chatbots could take a list of\ntasks, decisions, events, and other BPMN constructs detailed in\na natural language prompt, and generate the final BPMN XML\ndocuments. This approach has the potential of streamlining\nthe process modelling phase and simplifying the work of\nprocess designers, potentially enhancing the overall efficiency\nof BPMN modelling. Third, future work could investigate the\napplication of alternative generative chatbot models beyond\nGPT and PaLM. Analyzing how different models, such as\nMeta’s OPT and NVIDIA’s Megatron-Turing, perform in the\ncontext of BPMN model understanding and process execution\nsupport could be a promising research direction.\nOverall, these proposed directions for future work can\ncontribute to the development of generative-based chatbots in\nthe context of BPMN processes, ultimately advancing the field\nof process automation and support.\nREFERENCES\n[1] M. Weske, Business process management : concepts, languages, archi-\ntectures.\nBerlin New York: Springer, 2012.\n[2] M. Dumas, Fundamentals of business process management.\nBerlin,\nGermany: Springer, 2018.\n[3] J. Dang, C. Toklu, K. Hampel, and U. Enke, “Human workflows\nvia document-driven process choreography,” in 2008 International\nMCETECH Conference on e-Technologies (mcetech 2008). IEEE, 2008,\npp. 25–33.\n[4] R. Dijkman, M. La Rosa, and H. Reijers, “Managing large collections of\nbusiness process models-current techniques and challenges,” Computers\nin Industry, vol. 63, no. 2, pp. 91–97, 2012.\n[5] B. Luo, R. Y. Lau, C. Li, and Y.-W. Si, “A critical review of state-of-the-\nart chatbot designs and applications,” Wiley Interdisciplinary Reviews:\nData Mining and Knowledge Discovery, vol. 12, no. 1, p. e1434, 2022.\n[6] X. Cheng, Y. Bao, A. Zarifis, W. Gong, and J. Mou, “Exploring con-\nsumers’ response to text-based chatbots in e-commerce: the moderating\nrole of task complexity and chatbot disclosure,” Internet Research, 2021.\n[7] M. Shumanov and L. Johnson, “Making conversations with chatbots\nmore personalized,” Computers in Human Behavior, vol. 117, p. 106627,\n2021.\n[8] W. Wang and K. Siau, “Living with artificial intelligence–developing\na theory on trust in health chatbots,” in Proceedings of the Sixteenth\nAnnual Pre-ICIS Workshop on HCI Research in MIS.\nAssociation for\nInformation Systems San Francisco, CA, 2018, pp. 1–5.\n[9] C. Kecht, A. Egger, W. Kratsch, and M. R¨oglinger, “Quantifying\nchatbots’ ability to learn business processes,” Information Systems, vol.\n113, p. 102176, 2023.\n[10] R. M. von Wolff, S. Hobert, and M. Schumann, “Designing process-\nbased chatbots in enterprises: The case of business travel organization\nconsidering the users’ perspective and business value,” AIS Transactions\non Human-Computer Interaction, vol. 14, no. 4, pp. 578–623, 2022.\n[11] I. A. Amantea, E. Sulis, G. Boella, F. De Marchi, L. Mazzini, F. Alloatti,\nand A. Bolioli, “Adopting assistive technologies in healthcare processes:\na chatbot for patients with amyotrophic lateral sclerosis,” in Italian\nForum of Ambient Assisted Living.\nSpringer, 2020, pp. 163–174.\n[12] D. Rooein, D. Bianchini, F. Leotta, M. Mecella, P. Paolini, and B. Per-\nnici, “achat-wf: Generating conversational agents for teaching business\nprocess models,” Software and Systems Modeling, pp. 1–24, 2022.\n[13] OMG, Business Process Model and Notation (BPMN), Version 2.0.2,\nObject Management Group Std., Rev. 2.0.2, Jan. 2014. [Online].\nAvailable: http://www.omg.org/spec/BPMN/2.0.2\n",
  "categories": [
    "cs.CL",
    "cs.AI",
    "cs.SE"
  ],
  "published": "2023-11-28",
  "updated": "2023-11-28"
}