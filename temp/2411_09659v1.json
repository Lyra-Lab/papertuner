{
  "id": "http://arxiv.org/abs/2411.09659v1",
  "title": "A Risk Sensitive Contract-unified Reinforcement Learning Approach for Option Hedging",
  "authors": [
    "Xianhua Peng",
    "Xiang Zhou",
    "Bo Xiao",
    "Yi Wu"
  ],
  "abstract": "We propose a new risk sensitive reinforcement learning approach for the\ndynamic hedging of options. The approach focuses on the minimization of the\ntail risk of the final P&L of the seller of an option. Different from most\nexisting reinforcement learning approaches that require a parametric model of\nthe underlying asset, our approach can learn the optimal hedging strategy\ndirectly from the historical market data without specifying a parametric model;\nin addition, the learned optimal hedging strategy is contract-unified, i.e., it\napplies to different options contracts with different initial underlying\nprices, strike prices, and maturities. Our approach extends existing\nreinforcement learning methods by learning the tail risk measures of the final\nhedging P&L and the optimal hedging strategy at the same time. We carry out\ncomprehensive empirical study to show that, in the out-of-sample tests, the\nproposed reinforcement learning hedging strategy can obtain statistically\nsignificantly lower tail risk and higher mean of the final P&L than delta\nhedging methods.",
  "text": "A Risk Sensitive Contract-unified Reinforcement\nLearning Approach for Option Hedging\nXianhua Peng*†\nXiang Zhou‡\nBo Xiao §\nYi Wu ¶\nNov 15, 2024\nAbstract\nWe propose a new risk sensitive reinforcement learning approach for the dynamic hedging\nof options. The approach focuses on the minimization of the tail risk of the final P&L of the\nseller of an option. Different from most existing reinforcement learning approaches that require\na parametric model of the underlying asset, our approach can learn the optimal hedging strategy\ndirectly from the historical market data without specifying a parametric model; in addition,\nthe learned optimal hedging strategy is contract-unified, i.e., it applies to different options\ncontracts with different initial underlying prices, strike prices, and maturities. Our approach\nextends existing reinforcement learning methods by learning the tail risk measures of the final\nhedging P&L and the optimal hedging strategy at the same time. We carry out comprehensive\nempirical study to show that, in the out-of-sample tests, the proposed reinforcement learning\nhedging strategy can obtain statistically significantly lower tail risk and higher mean of the\nfinal P&L than delta hedging methods.\nKeywords: option hedging, contract-unified, reinforcement learning, tail risk, CVaR, VaR\n*HSBC Business School, Peking University, University Town, Nanshan District, Shenzhen, 518055, China. Email:\nxianhuapeng@pku.edu.cn.\n†Sargent Institute of Quantitative Economics and Finance, HSBC Business School, Peking University, University\nTown, Nanshan District, Shenzhen, 518055, China.\n‡School of Data Science and Department of Mathematics, City University of Hong Kong, Tat Chee Ave., Kowloon,\nHong Kong. Email: xiang.zhou@cityu.edu.hk.\n§Department of Mathematics, City University of Hong Kong, Tat Chee Ave., Kowloon, Hong Kong. Email:\nboxiao3-c@my.cityu.edu.hk.\n¶HSBC Business School, Peking University, University Town, Nanshan District, Shenzhen, 518055, China. Email:\nwuyi51@pku.edu.cn.\n1\narXiv:2411.09659v1  [q-fin.RM]  14 Nov 2024\n1\nIntroduction\nOption hedging is a classic and important problem. A traditional hedging approach is delta hedg-\ning that is based on a parametric option pricing model. Under a delta hedging strategy, the hedging\nposition at any given moment is equal to the partial derivative of the option pricing function with\nrespect to the underlying stock price at that time. Although delta hedging is widely used in prac-\ntice, it has a few shortcomings: (i) delta hedging assumes that when the underlying stock price\nchanges, the other risk factors such as volatility do not change, which is inconsistent with empiri-\ncal observations such as leverage effect; (ii) delta hedging assumes that the market is frictionless,\nhas no transaction costs, and requires continuous adjustment of the hedging position; (iii) delta\nhedging is subject to model risk as it relies on a parametric option pricing model.\nIn addition to delta hedging, there is a large literature developing mean-variance hedging strate-\ngies based on minimization of a linear combination of mean and variance of the total hedging error\nupon the maturity of an option. Duffie and Richardson (1991) and Basak and Chabakauri (2012)\nstudies mean-variance hedging of non-tradable assets by tradable assets under continuous para-\nmetric models. Schweizer (1995) and Bertsimas et al. (2001) studies mean-variance hedging of\noptions in discrete time under parametric models. In recent years, there are some papers applying\nmodel-based reinforcement learning to the mean-variance hedging of total hedging error; see, for\nexample, Halperin (2020), Kolm and Ritter (2019), Du et al. (2020), Cao et al. (2021). In these\npaper, the cumulative reward of reinforcement learning is an approximation of linear combination\nof mean and variance of the total hedging error, and a parametric model of the underlying stock is\nneeded for simulation of sample paths of the stock. Fecamp et al. (2021) proposes a deep learning\napproach to minimize the mean (asymmetric) squared error of total hedging error under a discrete\ntime parametric model of the stock based on neural network representation of the hedging ratio.\nLütkebohmert et al. (2022) proposes a robust deep hedging approach by simulating sample paths\nof the underlying stock under generalized affine diffusion model that allows parameter uncertainty.\nAnother strand of literature studies the objective of minimizing the variance of the daily hedg-\ning error instead of the total hedging error. Hull and White (2017), Nian et al. (2021), Ruf and\nWang (2022), Xia et al. (2023) assume that the minimum variance hedging ratio is a linear or non-\nlinear function of the option’s Greeks and other variables of the option and use the market data of\nstock prices and options to fit the function. Mikkilä and Kanniainen (2023) proposes a model-free\nreinforcement learning approach that trains the model using using only S&P 500 index and options\ndata. The cumulative reward is defined as a rough approximation of the mean minus a multiple of\nthe standard deviation of the episode hedging error over five trading days.\nHowever, hedging based on the first two moments of hedging error may not be adequate be-\n2\ncause it ignores the high-order moments and tail risk as measured by Value-at-Risk and Conditional\nValue-at-Risk (CVaR). Buehler et al. (2019) propose a model-based deep hedging approach that\nminimizes an optimized certainty equivalent risk measure, e.g., CVaR, of the total hedging error\nof a particular option. Buehler et al. (2019) and their follow-up works (Carbonneau and Godin\n2021, Lütkebohmert et al. 2022, Limmer and Horvath 2023, Wu and Jaimungal 2023) has a few\nlimitations: (i) their approaches need to train a different model for each different option with spe-\ncific initial stock price, strike, or maturity; (ii) their approaches need to specify a parametric model\nof the underlying stock in order to generate simulated sample paths of the stock for training the\nmodel, because one cannot find enough historical data of the stock starting from a particular initial\nstock price; (iii) their approaches cannot be used in a model-free way and hence cannot utilize the\nmarket data of stocks and options.\nIn this paper, we propose a new dynamic hedging strategy based on deep reinforcement learn-\ning, namely contract-unified reinforcement learning (CU-RL), to address the above challenges\nfaced by existing options hedging approaches. In the CU-RL framework, we use deep reinforce-\nment learning to train a contract-unified hedging strategy that can be used to hedge different op-\ntions with different initial stock prices, strike prices, maturities, and other initial states of the hedger\nincluding initial cash and stock positions. The CU-RL approach minimizes the CVaR of the total\nhedging P&L while maximizing its mean. The main difficulty of obtaining a contract-unified hedg-\ning strategy is that the distribution of the total hedging P&L of an option depends on the contract\nparameters of the option and the initial states of the hedger of the option, so do the VaR and CVaR\nof the total hedging P&L. To overcome the difficulty, our key innovation is to use a neural network\nto estimate the conditional VaR of the total hedging P&L of any option that is conditional on the\ncontract parameters and initial states. The input of the neural network is the contract parameters\nand initial states; the output of the neural network is the conditional VaR of the total hedging P&L\nconditional on the contract parameters and initial states. The output of the VaR network is then\nused to calculate the conditional CVaR of the total hedging P&L of the option.\nThe VaR network has two important implications. (i) It allows the training data to include\nany options with any contract parameters and initial states, so the a single unified reinforcement\nlearning model can be trained and generates a unified hedging strategy for any options. (ii) In\nthe existing reinforcement learning approaches, a parametric model is needed because the training\ndata can only include the sample paths of the stock starting from a given initial price, but such\nsample paths are not available in the historical data. The VaR network allows the training data to\ninclude historical sample paths of the stock with any initial price and any options written on the\nstock, so there is no need for a parametric model of the underlying stock, and it allows utilization\n3\nof all information of the historical data.\nWe also provide the algorithm of contract-specific reinforcement learning (CS-RL), a contract-\nspecific version of CU-RL that finds the optimal hedging strategy for a specific option with fixed\ninitial state. The VaR of the total hedging P&L is a number in the contract-specific setting, so a\ntrainable parameter is sufficient to represent it. The CS-RL model has the limitation that it needs\na parametric model of the underlying stock in order to simulate sample path of stocks that starts\nfrom the fixed initial stock price, and hence it cannot utilize the historical data of stock and option\nprices.\nSpecifically, the proposed CS-RL and CU-RL approaches are extensions of the Proximal Policy\nOptimization (PPO) approach that maximize a weighted sum of the expectation of total hedging\nP&L and its negative CVaR. The CS-RL and CU-RL can also be easily extended to other the-state-\nof-art reinforcement learning algorithms other than PPO. The training process takes simulated or\nhistorical stock and option data trajectories combining other market information like interest rate\nas input. In each trajectory, the agent hedges an option until maturity at discrete time steps. At\neach step, the agent chooses underlying asset position and receives a reward. During the process,\ntransaction costs can be incorporated. At each step before the last trading time step ahead of\nmaturity, the reward is defined to be a chosen function of hedging error. At the last trading time\nstep, the reward is defined as the weighted sum of total hedging P&L and its negative CVaR. We\npropose to represent and estimate the VaR of total hedging P&L for a particular option with a\ntrainable parameter ω in the CS-RL approach, and to estimate the VaR of total hedging P&L for\nany option with initial state s0 by the output of a neural network in the CU-RL approach.\nThe CS-RL and CU-RL extend the PPO algorithm by learning the optimal hedging strategy\nand the VaR of the total hedging P&L simultaneously. In each training step, not only the value\nand policy networks in the original PPO, but ω or the VaR network will be updated. The loss of\nω or VaR network is defined as the sample mean of the score function of quantile evaluating at\nthe total hedging P&L of each trajectory, so our algorithms do not need nested simulation to get\nor update risk measure estimation, which is the computational bottleneck in some risk-sensitive\nreinforcement learning algorithms such as Tamar et al. (2015) and Coache and Jaimungal (2024).\nIn summary, the proposed CU-RL has the following advantages. (i) It is contract-unified be-\ncause it allows to train one single model to obtain the optimal hedging policy that applies to options\nwith different strikes, maturity, and initial underlying stock price, etc. (ii) It is data-driven and does\nnot require a parametric model of the underlying asset price, which can effectively avoid model\nmisspecification and parameter estimation errors of parametric models. (iii) By proposing a new\nreward function, it introduces a risk measure of the total hedged P&L in the objective function,\n4\nwhich can effectively control the tail risk of the total hedged P&L. (iv) It can accurately include\nmarket frictions like transaction costs.\nIn the CU-RL approach, we minimize the static CVaR of the total hedging P&L, i.e., the ter-\nminal P&L realized at the maturity of an option, so the learned hedging policy is a precommitted\nstrategy as in many other risk-sensitive reinforcement learning algorithms. Although the precom-\nmitted strategy is not time consistent, the risk objective has clear economic meaning and is de-\nsirable for an options dealer, who are concerned about monitoring the VaR and CVaR of his total\nhedging P&L. Option hedging based on dynamic risk measures or recursive risk measure is stud-\nied in some recent papers; see, e.g., Marzban et al. (2023), Coache and Jaimungal (2024), Coache\net al. (2023), Buehler et al. (2023). A dynamic risk measure has a recursive representation that\ndefines the risk at current state by an one-step risk measure on the current loss plus the risk-to-go.\nAlthough hedging based on dynamic risk measure has the advantage of being time consistent, the\neconomic meaning of the risk measurement of dynamic risk measure is less transparent and dy-\nnamic risk measure tends to be over conservative than static risk measure since risk is compounded\nin time (Iancu et al. 2015).\nWe also contribute to the literature of risk-sensitive reinforcement learning by formulating\nand solving a problem that measures the tail risk of the reward at the terminal time period; in\ncontrast, most existing literature of risk-sensitive reinforcement learning applies risk measures to\nthe cumulative or average reward. For example, Borkar (2001, 2002) consider the risk-sensitive\nreinforcement learning problem with the expected exponential utility. Tamar et al. (2012) and\nPrashanth and Ghavamzadeh (2013) consider variance-related risk measures. Morimurat et al.\n(2010), Tamar et al. (2015), and Chow et al. (2015) consider minimizing CVaR of the cumulative\nreward in reinforcement learning; these algorithms assume that the state transition dynamics is\nknown or can be obtained by nested simulation, so they may be computationally inefficient and\ncannot be trained with real world data. Xu et al. (2023) propose a new episodic risk-sensitive\nreinforcement learning formulation and algorithm based on tabular Markov decision processes\nwith recursive optimized certainty equivalent risk measures. However, they all focus on recursive\nrisk measures, and thus suffer from the problems mentioned above. Moreover, our framework\ncan incorporate flexible reward design before the terminal step, which can provide the agent with\nadditional guidance and thus accelerate the exploration.\nWe validate CS-RL and CU-RL with stock and options data simulated under two parametric\nmodels, the Black-Scholes model and heavy-tail GARCH model proposed by Heston and Nandi\n(2000), and find that our methods outperform the delta hedging methods in terms of tail-risk control\nand profit making. For validating CS-RL, we simulate stock and options price trajectories of a\n5\nsingle option with a fixed initial state including initial underlying stock price, strike, and maturity\nunder BS model and heavy-tail GARCH model. We then use CS-RL to learn hedging strategies to\nminimize CVaR at 0.975 level of final hedging P&L in the case of zero and proportional transaction\ncosts. We compare the CS-RL with benchmark delta hedging methods, which are the BS delta for\nthe case of BS model and the BS delta and the GARCH delta for the case of GARCH model.\nWe compare the out-of-sample final P&L of CS-RL and benchmarks by their mean and tail risk\nmeasured by various risk measures including VaR, CVaR, and median shortfall (MS) at 0.95 and\n0.975 level. CS-RL outperforms these benchmarks in the sense that in all the cases with different\nunderlying dynamics and transaction costs, CS-RL obtains the significantly lowest CVaR of final\nP&L at 0.975 level. Moreover, we find that for BS model with zero and proportional transaction\ncosts and GARCH model with proportional transaction costs, (i) the final P&L of CS-RL has\nsignificantly highest mean with P-value less than 0.001; (ii) CS-RL obtains significantly lowest\ntail risk measured by VaR, MS, and CVaR at 0.95 and 0.975 level.\nFor validating CU-RL, we first simulate a ten-year daily S&P 500 trajectory following BS\nand GARCH models, and list standard S&P 500 call options contracts on a daily basis imitating\nCBOE’s listing rules for specifying strikes and maturities of these products. The prices of these\noptions are calculated under the assumed model. The data of these options are divided into training\nset and test set according to their current dates and expiration dates to avoid information leakage.\nWe use the CU-RL method to train a unified hedging model for options with any contract param-\neters and initial states. For both underlying dynamics and transaction costs, CU-RL outperforms\nbenchmark delta hedging methods in the out-of-sample test set: it obtains the significantly highest\nmean and significantly lowest tail risk among all the methods. The results show the effectiveness\nof proposed methods.\nTo the best of our knowledge, our paper is the first to conduct comprehensive empirical study\non the performance of different hedging strategies in terms of the mean and tail risk of the total\nhedging P&L. In a model-free setting, we test CU-RL using the market data of S&P 500 index\noptions from 01/01/2008 to 12/31/2017. Since for a single option with given initial state and\ncontract parameters, there are rare options in the market data that have the same initial state as the\ngiven option, we cannot obtain enough market data of the option in order to train and test CS-RL\nin a model-free way. Similar to the parametric case, we divide the S&P 500 option data set into\ntraining set, validation set, and test set. We use CU-RL method to train a unified model for each of\neight groups of options: the group of all call (resp., put) options, the group of all short-term near-\nthe-money call (resp., put) options, and two groups of short-term deep-in-the-money call (resp.,\nout-of-the-money put) options. We also check the robustness of CU-RL on all call/put options and\n6\nshort-term near-the-money groups with two alternative reward formulations: a reward that is zero\nbefore maturity and a relative return formation with respect to initial margin. In all the cases, we\ntrain and test CU-RL with both zero and proportional transaction costs. We use BS delta, local\nvolatility function delta, and SABR delta as our benchmarks.\nThe advantage of CU-RL is statistically significant in most of the experiments, where CU-RL\nhave significantly higher mean of final P&L with P-value less than 0.001 and also significantly\nsmaller tail risk measured by VaR and CVaR at 97.5%-level, which is specified in the objective\nfunction of CU-RL, and VaR and CVaR at 95% level. The under-performance of CU-RL only ap-\npears in the two short-term deep-in/out-of-the-money groups, which may be due to lack of enough\ntraining data. Moreover, we find that: (i) CU-RL performs much better than benchmarks in the\nsettings with transaction costs, suggesting it can better incorporate market frictions into hedging\nstrategies; (ii) CU-RL is robust even without using the information of hedging error in the inter-\nmediate reward; (iii) CU-RL can include margin requirement for selling uncovered options and\noptimize risk-controlled relative option return with respect to margin.\n1.1\nRelated Literature\nTraditional literature on option hedging in incomplete market starts with episode mean-variance\ncriterion on the final hedging P&L thanks to its tractability. Duffie and Richardson (1991) formu-\nlate a mean-variance hedging problem to use a correlated tradable asset to hedge a non-tradable\nasset continuously. Schweizer (1992) generalizes Duffie and Richardson (1991) to allow the hedg-\ning object be a contingent claim depending on the non-tradable asset, such as an European call,\nand then extends mean-variance hedging to the discrete time (Schweizer 1995). Bertsimas et al.\n(2001) apply stochastic optimal control to the mean-variance hedging problem in the Markov-state\nsetting and provide tractable solutions for both continuous and discrete time cases, and is later\ndeveloped by ˇCerný (2004) to incorporate stochastic interest rate. Basak and Chabakauri (2012)\naddress the time-consistency issue in the global mean-variance hedging and provide a tractable and\ndynamic optimal strategy. Beyond all these theoretical works on episode mean-variance hedging,\nthere are papers to study daily mean-variance hedging. Bakshi et al. (1997) compare the empirical\nperformance of several stochastic volatility models with jumps on S&P 500 options, and Bakshi\net al. (2000) compare the difference between short-term and long-term options. Since the market\nis incomplete due to stochastic volatility and jumps, they consider the daily minimum variance\nhedging that minimize the instant volatility of the hedged portfolio. Hull and White (2017) study\nthe empirically optimal delta hedging in the sense that it minimizes the variance of daily hedging\nerrors. They prove that the minimum variance delta is approximately equal to the Black-Scholes\n7\ndelta plus Vega multiplied by the sensitivity of expected implied volatility to the price, which can\nbe obtained by regressing on real market data. They find that their method outperform several\nstochastic volatility models on a variety of real-world options. Based on Hull and White (2017),\nXia et al. (2023) propose a two-step approach utilizing the observation that the volatility-price\nelasticity is mean-reverting, and find their method gain marginal improvement over Hull and White\n(2017) on index options. Although mathematically favorable, mean-variance hedging has several\nshortcomings. (i) Minimizing variance also punish the gain over expectation, which means it also\nreject the chance to earn a profit from trading. (ii) All these works rely on parametric assumptions\nand estimation, thus cannot avoid the misspecification and estimation errors. (iii) Mean-variance\nobjectives ignore the higher-order moments, which is crucial in practitioners’ risk management.\nThe literature has recently started to use deep learning methods to solve option hedging prob-\nlems. Buehler et al. (2019) propose to use deep learning to solve the hedging problem of European\noptions with an objective function defined as the terminal P&L of the hedge measured by a convex\nrisk metric. They construct a series of neural networks with the underlying price and the hold-\ning position as input and trading position as output to learn a hedging policy by minimizing the\nrisk of P&L. The method use a different neural network at each time period so the model may\nbe difficult to train for long-maturity options. It requires to train a different model for each op-\ntion with a different initial stock price, strike or maturity. In addition, it requires a parametric\nmodel and can only use simulated data as the training data. Zhang and Huang (2021) empiri-\ncally test the deep hedging method in Buehler et al. (2019). Fecamp et al. (2021) propose an\naugmented LSTM algorithm by adding a feedforward network to the output of an LSTM cell to\nsolve a discrete-time hedging problem in the incomplete market. The objective function is linear\nor quadratic function of the P&L at maturity. Carbonneau and Godin (2021) use deep hedging in\nBuehler et al. (2019) for equal risk pricing of derivatives with complex convex risk measures like\nCVaR. Lütkebohmert et al. (2022) consider robust deep hedging in the sense of parameter uncer-\ntainty of generalized affine diffusion model. Limmer and Horvath (2023) propose a GAN structure\nto do robust deep hedging considering the uncertainty of underlying asset price dynamics, which is\nmodelled by a neural stochastic differential equation. Wu and Jaimungal (2023) consider the robust\nrisk-aware option hedging problem by minimizing the maximum of hedging risk in a Wasserstein\nball around the terminal P&L distribution. Since we can’t exhaust this literature, we refer to Ruf\nand Wang (2020) who provide a comprehensive review of using neural networks for option pricing\nand hedging. However, the series of deep learning approaches proposed by Buehler et al. (2019)\nand their follow-up works have two drawbacks: (i) These approaches are parametric model-based\napproaches for stocks, which require generating simulated data for stocks based on the model and\n8\nthen obtaining the optimal hedging strategy based on the simulated data through deep learning.\nTherefore, these methods cannot avoid the risk of the model being misspecified. Although Lütke-\nbohmert et al. (2022), Limmer and Horvath (2023), Wu and Jaimungal (2023) consider parameter\nuncertainty or distribution uncertainty, their methods still rely on the choice of parameter distribu-\ntions or reference models. (ii) These methods require training a model for each individual option,\nand when any of the underlying price, strike price, or expiration date of the option changes, a new\nmodel needs to be retrained, making it difficult to apply in practice.\nThere are also machine learning methods for option hedging that are data-driven, and thus free\nof model misspecification. To our best knowledge, Hutchinson et al. (1994) are the first in finance\nliterature to use neural networks to price and hedge options. They use neural networks to approx-\nimate the option price both in simulated and historical data, and they choose the partial derivative\nof the pricing function with respect to moneyness as their hedging strategy. They provide early\nevidence that learning methods may complement parametric ones in terms of pricing and hedg-\ning. Chen et al. (2021) use deep neural networks to approximate the option pricing model by a\nsurrogate function, which treats the state, parameters of model as well as the hidden state (e.g.\nvolatility) as input. The hidden state variables and parameters can be estimated by minimizing\nthe distance between the predicted price and real price. However, they use the partial derivative\nof pricing function as Hutchinson et al. (1994), and share the same major drawback in the appli-\ncation of hedging: the partial derivative doesn’t take transaction costs, discrete hedging time, and\na variety of risk-sensitive objectives into consideration, which are crucial in a real-world hedging\ncircumstance.\nNian et al. (2021) minimize the daily hedging error through an encoder-decoder structure of\ndeep learning on option data in real market. Ruf and Wang (2022) use neural networks and linear\nregression based on option Greeks to find the optimal delta hedging strategy to minimize daily\nhedging errors, and find that both data-driven methods outperform the model-based delta hedging.\nAlthough these methods are data-driven and do not require modeling the dynamic changes of the\nstock, they also share several drawbacks. (i) Their objective functions are based on the first two\nmoments of incremental hedging error during the hedging process, which does not reflect the total\nP&L from option hedging. (ii) Both papers only valid their models on a sub-dataset with limit\nrange of moneyness or time-to-maturity. (iii) Both papers only consider discrete hedging, and do\nnot include market friction like transaction costs.\nWith the development of deep reinforcement learning, many researchers have proposed lots of\npopular approaches to solve decision-making problems, including deep Q-learning (DQL) (Mnih\net al. 2015), trust region policy optimization (TRPO) (Abbeel et al. 2015), proximal policy opti-\n9\nmization (PPO) (Schulman et al. 2017), deep deterministic policy gradient (DDPG) (Lillicrap et al.\n2019), and Twin Delayed Deep Deterministic policy gradient (TD3) (Fujimoto et al. 2018). These\nreinforcement learning algorithms maximize the cumulative discounted reward. There are several\npapers studying risk-sensitive reinforcement learning. Borkar (2001, 2002) proposes Actor-critic\nand Q-learning algorithms to maximize expected exponential utility of stationary reward and prove\nthe convergence of these algorithms. The stationary reward is defined as the log expectation of ex-\nponential of cumulative reward divided by the time length, and then let the time length goes to\ninfinity. Tamar et al. (2012) propose a policy gradient algorithm to maximize mean-variance ob-\njective of the cumulative reward, and Prashanth and Ghavamzadeh (2013) propose an actor-critic\nalgorithm for both stationary and cumulative reward. For CVaR-based reinforcement learning,\nMorimurat et al. (2010) use particles to approximate the distribution of conditional expected cu-\nmulative reward for finite state Markov process. Then they use the quantile from particles as VaR.\nTamar et al. (2015) gives the formula of the derivative of CVaR with respect to transition probabil-\nity parameters for policy gradient algorithms. But their algorithm requires to do simulation from\na fixed initial state. Chow et al. (2015) gives a contraction mapping for value function iteration\nbased on the risk envelope of CVaR. The value function is dependent on the state and CVaR level.\nIn the numerical algorithm, they linearly interpolate the CVaR level dimension, which inevitably\nintroduces approximation error. Petrik and Subramanian (2012) study the reinforcement learning\nwith coherent risk measure on cumulative reward as the objective by risk envelope with known\ntransition dynamics. From above, we can conclude that none of these papers are suitable for our\ntask, i.e. to use real market data to train an agent that can hedge options and control the tail risk\nusing reinforcement learning because they require the knowledge of market dynamics or the ability\nto simulate from a fixed state.\nThere are some reinforcement learning-based approaches to solving option hedging problems.\nHalperin (2020) discretizes the stock price under a simple discrete-time Black-Scholes model and\nsolves the hedging problem based on Q-learning using a mean-variance type reward function.\nKolm and Ritter (2019) also solve the hedging problem based on the discrete-time Black-Scholes\nmodel and Q-learning with a reward function defined as a quadratic function of the incremental\nhedge P&L to approximate the variance of the final P&L of the hedge. Cao et al. (2021) consider\nmean-variance hedging final P&L with deep Q-networks. In order to keep track of the standard\ndeviation of the terminal P&L, they use an additional Q-network to approximate the second mo-\nment of the hedging cost. Thus the main drawbacks of these papers on option hedging based\non reinforcement learning include that (i) The reward functions are always in the form of linear\nor quadratic. They only consider the mean or not strictly the variance of the hedging P&L, but\n10\nnot the Value-at-Risk (VaR) or CVaR tail risk measures of the hedging P&L. (ii) All these meth-\nods are equity-based parametric modeling methods and therefore, like the delta hedging methods,\nare not immune to parametric modeling errors. (iii) All these proposed models are dependent on\nparametric models and not adapted to different initial underlying prices and different options with\nvarying maturity and moneyness. They require retraining different model parameters for different\noptions and cannot learn a uniform model for options with different initial underlying prices, strike\nprices, and expiration dates. Du et al. (2020) address the last issue by including the strike price\nin the state to hedge options with different strikes. But it is still based on parametric models and\nreward function is a quadratic function of the incremental hedge P&L. Mikkilä and Kanniainen\n(2023) test deep reinforcement learning approach (TD3) to hedge options with transaction costs\nusing real world S&P 500 hourly data. Their reward is defined as the hedging error minus a mul-\ntiple of the absolute value of hedging error, which is only an approximation of the variance of the\nhedging error. They find that the agent trained with real-world data achieves higher reward than\nthe one trained with synthetic data because the former can better capture the market dynamics.\nAlthough their method is data-driven, it still neglects the tail risk in their objective functions. In\ntheir experiments, the mean term is dominated by the variance term, so they model shows little\nmean improvement. Moreover, their model is not universal: they only consider hedging options\nfor 5 sequential days and exclude any options that are close to maturity; nor do they include deep\nin/out-of-the-money options in their datasets.\nThere are several papers focusing on reinforcement learning with risk measures or utility func-\ntions and its applications in finance. Murray et al. (2022) propose an actor-critic algorithm for\nhedging with exponential utility function, which is time-consistent. Marzban et al. (2023) propose\nan actor-critic algorithm for the hedging problem with recursive expectile risk measure, which they\nbelieve is an ideal choice because it’s coherent, elicitable, and time-consistent. For general applica-\ntions, Coache and Jaimungal (2024) propose a modified actor-critic method for deep reinforcement\nlearning with general recursive convex risk measures based on the risk envelope representation of\nconvex risk measures. Their method involves nested simulation at each visited state to estimate\nsome value of interest, and thus is computationally expensive and cannot use real-world data to\ntrain. Their follow-up work (Coache et al. 2023) proposes a modified actor-critic method specifi-\ncally for recursive conditionally elicitable risk measures like recursive CVaR. They use two neural\nnetworks to approximate the value of VaR and CVaR in each steps. Buehler et al. (2023) solve the\nhedging problem with recursive optimized certainty equivalent (OCE) monetary utility by iterating\nvalue and policy functions with Bellman equations. They also propose to add a neural network to\napproximate the OCE value to the actor-critic framework. All these methods utilize Bellman equa-\n11\ntions of recursive risk measure, and thus are not targeting for some risk measures wildly used in\nindustries like CVaR, which are focusing on terminal P&L and not time consistent. Moreover, all\nthese papers above do not provide empirical performance of their methods trained and evaluated\nwith real-world data.\nThe rest of paper is organized as follows. In Section 2, we present the formulation of the\ndiscrete-time option hedging problem. Section 3 proposes the contract-unified reinforcement learn-\ning (CU-RL) approach for solving the discrete-time option hedging problem. In Section 4, we\nstudy the hedging performance of the proposed CS-RL and CU-RL approaches when the hedging\nmodels are trained based on data simulated under parametric models of the underlying stock. In\nSection 5, we carry out comprehensive empirical study on the performance of the CU-RL approach\nfor hedging S&P 500 index options when the hedging model is trained by using the historical data\nof S&P 500 index price and S&P 500 index options. Section 6 concludes.\n2\nFormulation of the Dynamic Hedging Problem\nIn this section, we formulate the dynamic hedging problem as a discrete-time stochastic control\nproblem that achieves a tradeoff between minimizing the CVaR of the final P&L and maximizing\nthe expectation of the final P&L at the maturity of the European option.\nSuppose at time 0, an option dealer sells an European-style option on one share of a stock\nwith strike K and maturity T periods. Let St be the price of the stock underlying the option.\nThe dealer hedges its short position on the option by dynamically trading the stock at time t =\n0, 1, 2, . . . , T −1. Suppose before rebalancing at time t, the dealer holds Bt amount of cash and\nδt shares of the stock in the hedging portfolio, and he or she observes the option price Zt from the\nmarket or calculated from some option pricing model.\nIn particular, right before rebalancing at time 0, the dealer holds cash B0 and δ0 = 0 share of\nthe stock, where B0 is the amount of cash received by the seller due to the sale of the option.\nSince the dealer has a short position of the option, the dealer’s total portfolio value right before\nrebalancing at time t is\nWt = Bt + δtSt −Zt,\nt = 0, 1, · · · , T.\n(1)\nThen, the dealer decides the number of shares at that will be held in the hedging portfolio after the\ntrading at time t, and then he buys at −δt shares of the stock at time t, which costs (at −δt)St +\nCt(St, δt, at), where Ct(St, δt, at) is the transaction cost. After rebalancing at time t, the dealer\nholds Bt −(at −δt)St −Ct(St, δt, at) in cash.\nHence, right before rebalancing at time t + 1, the number of shares of stock held by the dealer\n12\nis\nδt+1 = at,\n(2)\nand the amount of cash held by the dealer is\nBt+1 = (Bt −(at −δt)St −Ct(St, δt, at))er∆t,\n(3)\nwhere ∆t is the time difference in year between time period t and t + 1, r is the risk-free interest\nrate.\nThe total P&L of the dealer is realized at time T and is equal to WT. The tail risk of the\nfuture P&L X of a portfolio can be measured by VaR or CVaR. The VaR of X at confidence level\nγ is defined as VaRγ(X) := inf {x ∈R : F−X(x) ≥γ}, where F−X(x) := P(−X ≤x) is the\nprobability distribution function of −X, which is the loss of the portfolio. The CVaR at level α of\nX is defined as\nCVaRα(X) :=\n1\n1 −α\nZ 1\nα\nVaRγ(X) dγ.\n(4)\nWe assume that the dealer’s objective is\nmax\na0,a1,...,aT −1 −λ1CVaRα(WT) + λ2E[WT],\n(5)\nwhere λ1 ≥0 and λ2 ≥0 are two constant weights that specify the relative importance of control-\nling the tail risk of the final P&L and maximizing the expectation of the final P&L.\n3\nA Risk Sensitive Contract-unified Reinforcement Learning\nApproach for Option Hedging\nThere are two kinds of solutions to the problem (5): contract-specific solution and contract-unified\nsolution. The contract-specific solution solves the problem (5) for a specific option with given\ncontract parameters, including strike K, maturity T, initial stock price S0, and some initial states\nof the dealer, including initial cash B0 and initial stock position δ0. The contract-specific solution\nmay also depend on the initial option price Z0 or implied volatility σ0.\nThe contract-unified solution to the problem (5) is a unified solution for an infinite number\nof options with any contract parameters (e.g., strike and maturity) and initial states (e.g., initial\nstock price, initial implied volatility, initial cash position, and initial hedging position). In practice,\noption dealers need to hedge a portfolio of options with different contract parameters, starting\n13\ndates, and maturities, hence a contract-unified solution is desirable and important.\nIn Section 3.1, we first propose a contract-specific reinforcement learning algorithm for hedg-\ning a single option. In Section 3.2, we propose a contract-unified reinforcement learning algorithm.\nThe algorithm learns a unified hedging policy that can be used to hedge different option contracts\nwith different contract parameters and initial states of the dealer.\n3.1\nA New Contract-specific Reinforcement Learning Algorithm for Hedg-\ning a Single Option\nIn this subsection, we propose a new contract-specific reinforcement learning (CS-RL) approach\nfor hedging a single option with fixed contract parameters including initial stock price, maturity,\nand strike, etc. The CS-RL approach can only be used when a parametric model is specified for\npricing the option, because only in this case, we can simulate under the parametric model to obtain\nenough training data of sample paths of stock prices and option prices that all start from the same\ninitial stock price and have the same contract parameters. The CS-RL approach cannot be applied\nin a model-free way, because we cannot obtain enough training data of historical prices of options\nwith the same initial stock price and contract parameters as the option that is to be hedged.\nFirst, we propose a new formulation of the hedging problem (5) for a specific option contract in\nSection 3.1.1. Then, we propose a contract-specific reinforcement learning algorithm for solving\nthe problem in Section 3.1.2.\n3.1.1\nA New Formulation of the Hedging Problem (5)\nFirst, We reformulate the hedging problem (5) into a reinforcement learning problem. We use st to\ndenote the state variable at time t. st can include the information that the dealer observes at time\nt right before the rebalancing at time t. st include the stock price St, the dealer’s cash position Bt\nand stock position δt in the hedging portfolio right before the rebalancing at time t, the stochastic\nvolatility σt, and the time to maturity τt = T −t. The stochastic volatility σt can be defined as the\nforecast next-time-period volatility in the parametric model of the stock price (e.g., in a GARCH\nmodel); it may also be defined as the implied volatility calculated from the option price Zt at time\nt, where Zt is the option price calculated based on the parametric option pricing model, such as a\njump diffusion model. In summary, the state st can be represented by\nst := (Bt, δt, St, σt, τt), t = 0, 1, · · · , T.\n(6)\n14\nHaving observed st, the dealer decides the number of shares at that will be held in the hedging\nportfolio after the rebalancing at time t, and carries out the trading. And then, the state transits\nto st+1 = (Bt+1, δt+1, St+1, σt+1, τt+1) at the next time period t + 1, where Bt+1 and δt+1 are\ndetermined by (3) and (2), St+1 and σt+1 are determined by the parametric model of option pricing.\nThe dealer’s objective is to achieve a balance between minimizing the tail risk of the terminal\nP&L and maximizing the expected terminal P&L, as specified in (5). The CVaR in (5) has the\nrepresentation (Rockafellar and Uryasev 2002)\nCVaRα(WT) = inf\nx∈R\n\u001a\nx +\n1\n1 −αE [max(−WT −x, 0)]\n\u001b\n=E\n\u0014\nω +\n1\n1 −α max(−WT −ω, 0)\n\u0015\n,\n(7)\nwhere\nω = VaRα(WT).\n(8)\nHence, we define the reward RT received by the dealer at the terminal time T as\nRT(sT−1, aT−1, sT) := −λ1\n\u0014\nω +\n1\n1 −α max(−WT −ω, 0)\n\u0015\n+ λ2WT,\n(9)\nwhere λ1 ≥0 and λ2 ≥0 are the two weights in (5).\nAt the intermediate time t = 0, 1, . . . , T −2, the dealer takes the action at, and then right\nbefore rebalancing at time t + 1, the dealer’s wealth becomes Wt+1. Although the dealer mainly\nfocuses on the total P&L realized at time T, Wt+1 provides information about the performance of\nthe hedging action at, and can be used to defined the reward Rt+1 that the dealer receives at time\nt + 1. The dealer may be concerned when negative hedging error occurs, i.e., when Wt+1 < 0, and\nmay be indifferent to the value of the hedging error Wt+1 as long as Wt+1 ≥0. So the reward may\nbe defined in an asymmetric way as\nRt+1(st, at, st+1) = −|Wt+1| · 1{Wt+1<0}, t = 0, 1, · · · , T −2.\n(10)\nThis definition only penalizes negative hedging performance but does not provide award for pos-\nitive hedging performance, so it does not encourage profit making. However, profit making is\nrewarded by the definition of the reward RT in (9).\nSuppose at each time t = 0, 1, . . . , T −1, the dealer takes the action at based on the state st by\nfollowing the policy π(at|st), which can be deterministic or stochastic.\n15\nThe above formulation falls into the framework of reinforcement learning, except that there\nis an unknown parameter ω in the expression of RT in (9). We will propose a new algorithm for\nsolving the problem (5) that finds the optimal policy π(a|st) together with the unknown parameter\nω.\n3.1.2\nThe CS-RL Algorithm for Hedging a Single Option\nIn this subsection, we propose the CS-RL algorithm for hedging a single options contract. This\noptions contract has a fixed initial state s0 = (B0, δ0, S0, σ0, τ0) and a given strike K. The rein-\nforcement learning algorithm will learn the optimal hedging strategy that is optimal only for this\nparticular options contract. In other words, the optimal hedging strategy cannot be used for hedging\nother options contracts. The CS-RL algorithm is an extension of the Proximal Policy Optimization\n(PPO) algorithm.\nStarting from the initial state s0, the agent takes actions following a policy π until the target\noption matures, which result in a trajectory\nT = (s0, a0, R1, s1, a1, R2, · · · , sT−1, aT−1, RT, sT).\n(11)\nUnder the policy π, the state value function V π(s) is\nV π(s) = Eπ\n\"T−t−1\nX\nk=0\nγkRt+1+k\n\f\f\f\f\fst = s\n#\n, t = 0, 1, · · · , T −1,\n(12)\nwhere γ ∈[0, 1] is the discount rate. Since our problem is a finite-horizon problem, γ is defined to\nbe 1. The state-action value function under π is\nQπ(s, a) = Eπ\n\"T−t−1\nX\nk=0\nγkRt+1+k\n\f\f\f\f\fst = s, at = a\n#\n, t = 0, 1, · · · , T −1.\n(13)\nThe advantage function under π is\nAπ(s, a) = Qπ(s, a) −V π(s).\n(14)\nWe parameterize the policy π(·|s) by a stochastic policy πθ(a|s) that follows a normal distri-\nbution N(µ(s; ϕ), ψ), where µ(s; ϕ) and ψ are respectively the mean and variance of the normal\ndistribution. The parameter θ is defined as θ := (ϕ, ψ). The mean µ(s; ϕ) is represented by a\nneural network with s as input and ϕ as the network parameter, and ψ is a free parameter that is\n16\nnot affected by the state. For an European call (resp., put) option, the activation function of the last\nlayer of the µ network is defined to be the sigmoid (resp., negative sigmoid) function as the delta of\noption should be in the range (0, 1) (resp., (-1, 0)). The action at is truncated to be within the inter-\nval [−b, b] after it is sampled from the distribution N(µ(st; ϕ), ψ), where b > 0 is a constant. For\nan option written on a single share of the underlying stock, b is defined to be 1. We parameterize\nthe state-value function V (s) by a neural network V (s; ξ) with parameter ξ.\nHowever, different from the common formulation, the proposed rewards measured by the CVaR\nin (9) introduce an unknown parameter ω. Therefore, we extend the PPO method to learn the\nadditional parameter ω together with the optimal hedging policy at the same time.\nFor the policy network, the objective function LP(st, at, ˆAπθold(st, at), θold; θ) is shown as fol-\nlows.\nLP(st, at, ˆAπθold(st, at), θold; θ) = min\n\u0012 π(at|st, θ)\nπ(at|st, θold)\nˆAπθold(st, at), g(ϵ, ˆAπθold(st, at))\n\u0013\n, (15)\nwhere ˆAπθold(st, at) is an estimate of the advantage function in (14) under the old policy πθold, and\ng(ϵ, A) =\n\n\n\n(1 + ϵ)A,\nif A ≥0,\n(1 −ϵ)A,\nelse.\n(16)\nwhere the clip parameter ϵ ∈[0, 1) is used to control how far away the updated policy can be\nallowed to move from the old policy, which avoids the instability caused by drastic policy change\nat one step.\nThe 1-step TD residual of the value function is defined as\nδV\nt := Rt+1 + γV (st+1) −V (st), t = 0, · · · , T −1.\nIn particular, δV\nT−1 = RT −V (sT−1) as V (sT) = 0. The generalized advantage estimator ˆA(st, at)\nis given by\nˆA(st, at) :=\nT−t−1\nX\nl=0\n(γλgae)lδV\nt+l.\n(17)\nwhere λgae ∈[0, 1] is a parameter for controlling the tradeoff between bias and variance. The\ngeneralized rewards-to-go at time t, i.e., the cumulative reward received from time t + 1 to time T,\nis defined as\nGt = ˆA(st, at) + V (st).\n(18)\n17\nThe objective function LV (st, Gt; ξ) for learning the parameter ξ of the value network is spec-\nified as\nLV (st, Gt; ξ) = (V (st; ξ) −Gt)2 ,\n(19)\nwhere V (st; ξ) is the state value predicted by the value network, Gt is calculated based on the\ncurrent parameter of the policy network and the value network.\nWe also need to learn the unknown parameter ω used by the terminal reward RT in (9). By the\ndefinition of ω in (8), ω is the α-level VaR of the total P&L WT. Since WT depends on the contract\nspecific information of the option including the initial state s0 and the strike K, ω also depends on\nthese contract specific information. Since the option contract is fixed, the optimal ω is also a fixed\nvalue.\nBy the result of quantile regression, the unknown parameter ω can be learned by minimizing\nthe loss function\nLO(ω, WT) =\n\n\n\nα|ω −(−WT)|,\n−WT ≥ω,\n(1 −α)|ω −(−WT)|,\n−WT ≤ω.\n(20)\nTo encourage exploration, it is desirable to minimize the entropy loss for the policy πθ(a|s)\nLE(θ) = −\n\u00141\n2 + 1\n2 log(2π) + log(ψ)\n\u0015\n.\n(21)\nOverall, we propose to update the parameter from (θold, ξold, ωold) to some new parameter value\n(θnew, ξnew, ωnew) by carrying out stochastic gradient descent updating for minimizing the objective\nfunction\nL(θ, ξ, ω) = −E\nh\nLP(st, at, ˆAθold\nt (st, at), θold; θ) + c0LE(θ) + c1LV (st, Gt; ξ) + c2LO(ω, WT)\ni\n,\n(22)\nwhere c0 ≥0, c1 > 0 and c2 > 0 are constants.\nEach parameter updating step for θ and ξ is based on a minibatch dataset B. In order to enhance\nthe stability of the algorithm, we cap the L2-norm of the gradient\nNB = ∥∇θ,ξ ¯LB(θ, ξ, ω)∥2\n(23)\nby a maximal gradient norm N ∗= 0.5, where ¯LB(θ, ξ, ω) is the average value of the loss function\nin (22) over the minibatch B. Similarly, each parameter updating step for ω is based on a dataset\n18\nH. We cap the absolute value of the partial derivative\nNH = | ∂\n∂ω\n¯LH(θ, ξ, ω)|\n(24)\nby an upper bound N ∗= 0.5, where ¯LH(θ, ξ, ω) is the average value of the loss function in (22)\nover the dataset H.\nWe summarize the new contract-specific reinforcement learning (CS-RL) algorithm for a single\noption in Algorithm 1. Note that in the algorithm, all the training trajectories start from the same\ninitial state s0 that corresponds to the single options contract.\nAlgorithm 1 The CS-RL algorithm for optimal hedging of a single option with a fixed initial state\ns0\nInitialize parameters θ0, ξ0, ω0.\nfor k from 0 to K −1 do\nInitialize the buffer Dk = ∅and Hk = ∅.\nfor i from 0 to N −1 do\nGenerate a trajectory Ti by starting from s0 and following the policy πθk. Normalize\nstates with the running mean and standard deviation.\nCalculate the generalized advantage estimator and rewards-to-go at time T −1 of the\ntrajectory Ti:\nˆA(i)\nT−1 = R(i)\nT (ωk) −V (s(i)\nT−1; ξk),\nG(i)\nT−1 = R(i)\nT (ωk).\nfor t from T −2 to 0 do\nCompute generalized advantage estimator\nˆA(i)\nt\n= (λgaeγ) · ˆA(i)\nt+1 + R(i)\nt+1 + γV (s(i)\nt+1; ξk) −V (s(i)\nt ; ξk).\nCompute rewards-to-go: G(i)\nt\n= ˆA(i)\nt\n+ V (s(i)\nt ; ξk).\nend for\nAdd the tuples\nn\n(s(i)\nt , a(i)\nt , πθk(a(i)\nt |s(i)\nt ), G(i)\nt , ˆA(i)\nt )\noT−1\nt=0 to the buffer Dk.\nAdd the sample W (i)\nT\nto the buffer Hk.\nend for\nSet θ = θk, ξ = ξk, ω = ωk.\nfor m from 0 to M −1 do\nShuffle the buffer Dk.\nfor i from 0 to |Dk|\nn −1 do\nSequentially collect n tuples from Dk as a minibatch: B = {(sj, aj, πj\nθk, Gj, ˆAj)}n\nj=1.\nCalculate the L2-norm NB defined in (23).\n19\nUpdate the policy network parameter θ by:\nθ ←θ + η\n\"\n1\nn\nn\nX\nj=1\n∇θLP(sj, aj, ˆAj, θk; θ) −c0∇θLE(θ)\n#\n· min\n\u0012N ∗\nNB\n, 1\n\u0013\n;\nUpdate the value network parameter ξ by:\nξ ←ξ −c1η\n\"\n1\nn\nn\nX\nj=1\n∇ξLV (sj, Gj; ξ)\n#\n· min\n\u0012N ∗\nNB\n, 1\n\u0013\n;\nend for\nUse all the N samples {W (j)\nT }N\nj=1 in Hk to update the parameter ω:\nω ←ω −c2η\n\"\n1\nN\nN\nX\nj=1\n∂\n∂ωLO(ω, W (j)\nT )\n#\n· min\n\u0012 N ∗\nNHk\n, 1\n\u0013\n,\nwhere NHk is defined in (24) with H = Hk.\nend for\nθk+1 ←θ; ξk+1 ←ξ; ωk+1 ←ω.\nend for\n3.2\nA Contract-Unified Reinforcement Learning Approach for Option Hedg-\ning\nIn this subsection, we propose a new contract-unified reinforcement learning (CU-RL) algorithm\nfor learning the optimal hedging strategy for options with any contract parameters including initial\nstock price, maturity, and strike, and initial state of the dealer including initial cash and stock\nposition.\nThe CU-RL approach can be used in a model-free way, i.e., it can be used without a parametric\nmodel for option pricing. In contrast, the CS-RL approach can only be used under a parametric\nmodel for option pricing.\nWe first extend the state variable to include all contract parameters that affect the option price,\nincluding initial stock price, maturity, strike, etc, so that the hedging position (i.e., the action)\nobtained from inputing the state variable to the policy network will depend on the parameter of the\n20\noption contract. More precisely, we extend the definition of the state to be\nst =\n\u0012\nBt, δt, St, σt, τt, K\nS0\n, Wt, It\n\u0013\n,\n(25)\nwhere K is the strike of the option and It represents market information that is relevant for the\nvalues of the stock or option. For example, It can be defined as It = (∆t, Γt, Vt, Θt) that represent\nthe delta, gamma, vega and theta, respectively.\nHowever, the extension of state variables is far from enough to obtain hedging policy that is\nuniformly optimal for options with different initial states. In order for the hedging policy to be\noptimal for all options contracts, we will need to use training trajectories starting from different\ninitial states. For an options contract with initial state s0, the distribution of the optimally hedging\nP&L WT depends on s0; for example, the final hedging P&L for an option with a maturity of\nfive days and that for an option with a maturity of one year apparently have different probability\ndistributions. Therefore, the α-level VaR of the final hedging P&L also depends on s0, i.e., ω in\n(8) is a function of the s0 of the option contract.\nWe propose to use a neural network ω(s0; ζ) to represent the α-level VaR of the final hedging\nP&L WT, where s0 is the input of the neural network and ζ is the network parameter. The output\nlayer of the neural network is linear as the VaR can be positive or negative. Similar to the objective\nfunction in (20), the VaR network parameter ζ can be learned through minimizing the loss function\nfor quantile regression\nLO(s0, WT; ζ) =\n\n\n\nα|ω(s0; ζ) −(−WT)|,\n−WT ≥ω(s0; ζ),\n(1 −α)|ω(s0; ζ) −(−WT)|,\n−WT ≤ω(s0; ζ).\n(26)\nSimilar to the CS-RL algorithm, we use a policy network πθ to represent the stochastic policy\nand a state value network V (·; ξ) to represent the state value function. The parameter θ is updated\nfrom θold by stochastic gradient descent updating for minimizing the policy objective function\nLP(st, at, ˆAθold\nt (st, at), θold; θ), which is defined in (15). The parameter ξ is updated from minimiz-\ning the objective LV (st, Gt; ξ) defined in (19).\nOverall, we propose to update the parameter from (θold, ξold, ζold) to some new parameter value\n(θnew, ξnew, ζnew) by carrying out stochastic gradient descent updating for minimizing the objective\nfunction\nL(θ, ξ, ζ) = −E\nh\nLP(st, at, ˆAθold\nt (st, at), θold; θ) + c0LE(θ) + c1LV (st, Gt; ξ) + c2LO(s0, WT; ζ)\ni\n,\n(27)\n21\nwhere c0 ≥0, c1 > 0 and c2 > 0 are constants, LE(θ) is the entropy loss function defined in (21).\nA big advantage of introducing the VaR network is that the CU-RL algorithm can be applied\nin a model-free way, because we can use the historical data of any option with any initial states\nand contract parameters as the training data, which is feasible only because the algorithm can\nconsistently distinguish different option contracts by using the VaR network to compute the VaR\nof the hedging P&L of different option contracts differently. In contrast, the CU-RL algorithm can\nnot be used in a model free way, because there are no enough historical data of option prices that\nhave the initial state as the particular option contract that is to be hedged.\nEach parameter updating step for θ and ξ is based on a minibatch dataset B. In order to enhance\nthe stability of the algorithm, we cap the L2-norm of the gradient\nNB = ∥∇θ,ξ ¯LB(θ, ξ, ζ)∥2\n(28)\nby a maximal gradient norm N ∗= 0.5, where ¯LB(θ, ξ, ζ) is the average value of the loss function\nin (27) over the minibatch B. Similarly, each parameter updating step for ζ is based on a dataset\nH. We cap the absolute value of the gradient\nNH = ∥∇ζ ¯LH(θ, ξ, ζ)∥2\n(29)\nby an upper bound N ∗= 0.5, where ¯LH(θ, ξ, ω) is the average value of the loss function in (27)\nover the dataset H.\nWe summarize the detailed CU-RL algorithm for optimal hedging of options with any initial\nstate s0 in Algorithm 2.\nAlgorithm 2 The CU-RL algorithm for optimal hedging of options with any initial state s0\nInitialize policy network, value network, and VaR network parameter θ0, ξ0, and ζ0, respectively.\nfor k from 0 to K −1 do\nInitialize buffer Dk = ∅and Hk = ∅.\nfor i from 0 to N −1 do\nGenerate a trajectory Ti by starting from some s(i)\n0 and following the policy πθk for an\noption with maturity T (i). Normalize states with the running mean and standard deviation.\nCalculate the generalized advantage estimator and rewards-to-go at time T (i) −1 of the\ntrajectory Ti:\nˆA(i)\nT (i)−1 = R(i)\nT (i)(ω(s(i)\n0 ; ζk)) −V (s(i)\nT (i)−1; ξk),\nG(i)\nT (i)−1 = R(i)\nT (i)(ω(s(i)\n0 ; ζk)).\n22\nfor t from T (i) −2 to 0 do\nCompute generalized advantage estimator:\nˆA(i)\nt\n= (λgaeγ) · ˆA(i)\nt+1 + R(i)\nt+1 + γV (s(i)\nt+1; ξk) −V (s(i)\nt ; ξk)\nCompute rewards-to-go: G(i)\nt\n= ˆA(i)\nt\n+ V (s(i)\nt ; ξk).\nend for\nAdd the tuples\nn\n(s(i)\nt , a(i)\nt , πθk(a(i)\nt |s(i)\nt ), G(i)\nt , ˆA(i)\nt )\noT (i)−1\nt=0\nto the buffer Dk.\nAdd the tuple\n\u0010\ns(i)\n0 , W (i)\nT (i)\n\u0011\nto the buffer Hk.\nend for\nSet θ = θk, ξ = ξk, ζ = ζk.\nfor m from 0 to M −1 do\nShuffle the buffer Dk.\nfor i from 0 to |Dk|\nn −1 do\nSequentially collect n tuples from Dk as a minibatch: B = {(sj, aj, πj\nθk, Gj, ˆAj)}n\nj=1.\nCalculate the L2-norm NB defined in (28).\nUpdate the policy parameter:\nθ ←θ + η\n\"\n1\nn\nn\nX\nj=1\n∇θLP(sj, aj, ˆAj, θk; θ) −c0∇θLE(θ)\n#\n· min\n\u0012N ∗\nNB\n, 1\n\u0013\n;\nUpdate the value parameter:\nξ ←ξ −c1η\n\"\n1\nn\nn\nX\nj=1\n∇ξLV (sj, Gj; ξ)\n#\n· min\n\u0012N ∗\nNB\n, 1\n\u0013\n;\nend for\nUse all the N tuples {(s(j)\n0 , W (j)\nT (j))}N\nj=1 in Hk to update the VaR network parameter ζ:\nζ ←ζ −c2η\n\"\n1\nN\nN\nX\nj=1\n∇ζLO(s(j)\n0 , W (j)\nT (j); ζ)\n#\n· min\n\u0012 N ∗\nNHk\n, 1\n\u0013\n,\nwhere NHk is defined in (29) with H = Hk.\nend for\nθk+1 ←θ; ξk+1 ←ξ; ζk+1 ←ζ.\nend for\n23\n4\nHedging Performance under Parametric Option Pricing Mod-\nels\nIn this section, we demonstrate the hedging performance of the CS-RL approach and the CU-RL\napproach based on simulated data generated by two classical parametric option pricing models, the\nBlack-Scholes model in Section 4.1 and the GARCH model in Section 4.2.\nUnder each model, we compare the hedging performance of the CS-RL approach for hedging\na single option with that of the delta hedging method. We then compare the hedging performance\nof the CU-RL approach for hedging many different options with that of the delta hedging method.\nIn all numerical results based on simulated data in this section and the empirical data in Section\n5, we set the confidence level α = 0.975 for CVaR in the objective function (5), as the CVaR at\n97.5% level is used for setting capital charge for the trading book under the Basel III accord (Basel\nCommittee on Banking Supervision 2019) and is hence concerned in practice. The data is in daily\nfrequency and hedging is performed daily.\nThe hedging performance is measured by multiple criteria, including the mean and standard\nerror of the final P&L, the VaR, the CVaR, and the median shortfall (MS) of the final P&L at level\n95% and 97.5%, respectively, as well as the 95% confidence interval (CI) of each of the tail risk\nmeasures. The MS at 97.5% of the final P&L is the median of the conditional tail distribution\nbeyond the 97.5% VaR; it is equal to VaR at 98.75% and provides a robust alternative to CVaR at\n97.5% level (Kou and Peng 2016). We also calculate the P-value of the one-sided t-test for related\nsamples that tests if the mean of P&L of our method is higher than that of the benchmark method.\nIn all experiments, we consider two cases: one is without transaction cost, the other is with 0.1%\nproportional transaction cost.\n4.1\nHedging Options Based on Data Simulated under Black-Scholes (BS)\nModel\nUnder the Black-Scholes model, the dynamics of the underlying stock price is specified in (30)\ndSt = ˜µStdt + ˜σStdBS\nt ,\n(30)\nwhere BS\nt denotes the standard Brownian motion. Suppose the time unit in the model (30) is one\nday and the parameters ˜µ and ˜σ and the risk free rate r is given by Table 1.\n24\nTable 1: Value of parameters for the BS model.\nParameter\n˜µ\n˜σ\nr\nValue\n0.1\n252\n0.2\n√\n252\n0.03\n365\n4.1.1\nHedging a Single Option Using the CS-RL Method\nWe consider hedging a single European call option with spot price S0 = 100, maturity T = 30\ndays, and strike K = 105. In all simulated sample paths, the initial state s0 = (B0, δ0, S0, σ0, τ0) is\nthe same, where σ0 = ˜σ, τ0 = T, δ0 = 0.0, and B0 = ZBS(S0, σ0, τ0); here ZBS denotes the option\nprice under the BS model.\nIn the implementation of CS-RL method, the coefficients in (5) are λ1 = 1.0, λ2 = 0.0, i.e. the\ndealer only cares about the risk. The coefficients in (22) are c0 = 0, c1 = 0.04, and c2 = 0.08. The\npolicy network and value network are specified as fully connected feedforward neural networks\nwith 3 hidden layers of 32 neurons. The nonlinear activation function for each hidden layer is the\nSwish function. Each hidden layer is followed by a batch normalization layer. In Algorithm 1, the\nsize of buffer Dk is 29988, the minibatch size n = 2048, the number of epochs K = 1000, learning\nrate η = 0.0005, and M = 5.\nFig. 1 shows the three learning curves of CS-RL method for the cumulative reward, the loss for\nvalue network, and the loss for variable ω, respectively. The convergence of the CS-RL method\nseems to be stable.\nWe first train the model in the no-transaction cost case, and then we use the trained network\nparameters in the non-transaction cost case to initialize the parameters for the model in the case of\n0.1% transaction cost.\nTable 2 shows the performance of CS-RL method and the BS delta hedging method on a out-of-\nsample test dataset of 100000 trajectories in the no-transaction cost case and the 0.1% transaction\ncost case. The panel A shows that: (i) CS-RL method obtains a significantly higher mean final\nP&L than the benchmark method. Although the Black-Scholes delta hedging method is optimal\nin the continuously hedging case, CS-RL method obtains a higher mean P&L due to discrete daily\nhedging. (ii) CS-RL method obtains lower CVaR at 0.975 level, the designated risk measure in the\ntotal reward, lower MS at 0.975 level, and lower VaR at 0.975 level. (iii) CS-RL method obtains\nlower VaR and CVaR at 0.95 level, suggesting it can effectively minimize the tail risk measured at\nan alternative level. (iv) All the results with respect to tail risk measures are statistically significant,\nsince all the confidence intervals of CS-RL method are lower and have no overlap with those of\nBS delta hedging method. The panel B shows that similar conclusion holds when 0.1% transaction\ncosts are considered. Although the mean of final P&L falls and the tail risk measures increase due\n25\nto transaction costs, CS-RL method still obtains a significantly higher mean P&L and lower tail\nrisk than the BS delta hedging method.\n0\n200\n400\n600\n800\n1000\nEpochs\n−50\n−40\n−30\n−20\n−10\n0\nMean of reward\n(a) Cumulative reward for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n1.2\n1.4\n1.6\nValue loss\n(b) Loss of value network for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n0.0\n0.5\n1.0\n1.5\n2.0\n2.5\nOmega loss\n(c) Loss of ω for each training epoch\nFigure 1: Learning curves of the CS-RL method for hedging a single option under the Black-\nScholes model. The x-axis of all subfigures represent the training epoch. The y-axis represent the\ncumulative rewards, the loss of value network, and the loss of ω, respectively for the subfigures\n(a), (b), and (c).\n4.1.2\nHedging Many Options Using the CU-RL Method\nWe consider hedging many options with different initial states by using the CU-RL method. We\nsimulate the data set of stock index prices and option prices based on the BS model as follows.\nWe first simulate a single sample path of stock index price St from 01/02/2008 to 12/31/2017\nunder the BS model with parameters in Table 1 and initial price S0 = 1447.16, which is the\nadjusted closing price of the S&P 500 index on 01/02/2008. We then assume that call options on\nthe stock index are listed at the exchange based on a set of rules similar to the strike listing rules\nof S&P 500 (3rd Friday) non-quarterly index options, and that these call options are priced by the\nBS model using parameters in Table 1. More precisely, on each day starting from 01/02/2008, call\noptions with maturities of less than 12 months are listed by the following strike listing rules.\n• Call options with strike prices being the at-the-money (ATM) price ±10% of exercise refer-\nence price (i.e., the closing price in the last trading day) in 5 index points intervals are listed.\n26\nTable 2: The mean, standard error, and tail risk of the final P&L of hedging a single option\nby the CS-RL method and the BS delta hedging method calculated from an out-of-sample\ntest set. The option has parameters T = 30, K = 105. The test set is comprised of 100000 sample\npaths simulated under the Black-Scholes model. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCS-RL\nTraditional Model\nBS delta\nPanel A: without transaction cost\nMean\n1.4783E-02\n5.9855E-05\nStd Err\n1.4534E-03\n1.2621E-03\nP-Value\n3.0907E-89∗∗∗\n0.95-VaR\n0.6481\n0.6799\n0.95-CI of 0.95-VaR\n[0.6413, 0.6553]\n[0.6727, 0.6898]\n0.975-VaR\n0.8307\n0.8915\n0.95-CI of 0.975-VaR\n[0.8207, 0.8414]\n[0.8784, 0.9038]\n0.975-MS\n1.0032\n1.1053\n0.95-CI of 0.975-MS\n[0.9910, 1.0157]\n[1.0871, 1.1227]\n0.95-CVaR\n0.8995\n0.9862\n0.95-CI of 0.95-CVaR\n[0.8899, 0.9082]\n[0.9739, 0.9982]\n0.975-CVaR\n1.0701\n1.1977\n0.95-CI of 0.975-CVaR\n[1.0579, 1.0846]\n[1.1806, 1.2141]\nPanel B: with 0.1% transaction cost\nMean\n-0.1646\n-0.1725\nStd Err\n1.4701E-03\n1.3216E-03\nP-Value\n2.1201E-24∗∗∗\n0.95-VaR\n0.9017\n0.9336\n0.95-CI of 0.95-VaR\n[0.8946, 0.9102]\n[0.9246, 0.9433]\n0.975-VaR\n1.1010\n1.1585\n0.95-CI of 0.975-VaR\n[1.0897, 1.1105]\n[1.1466, 1.1704]\n0.975-MS\n1.2830\n1.3951\n0.95-CI of 0.975-MS\n[1.2670, 1.2986]\n[1.3777, 1.4133]\n0.95-CVaR\n1.1719\n1.2610\n0.95-CI of 0.95-CVaR\n[1.1620, 1.1817]\n[1.2490, 1.2739]\n0.975-CVaR\n1.3532\n1.4873\n0.95-CI of 0.975-CVaR\n[1.3403, 1.3674]\n[1.4697, 1.5054]\n27\nThe option expiration date is roughly 1 week to 2 months from the current date and is the\nthird Friday of a month.\n• Call options with strike prices being the ATM price ±20% of exercise reference price in 10\nindex points intervals. The option expiration date is roughly 2 to 6 months from the current\ndate and is the third Friday of a month.\n• Call options with strike prices being the ATM price ±50% of exercise reference price in 25\nindex points intervals. The option expiration date is roughly 6 to 12 months from the current\ndate and is the third Friday of the month.\n• When the underlying price index is out of the current strike interval of each the above three\nrules, we list a new group of options following the respective rule. Meanwhile, we do not\nrepeatedly list options with the same pair of maturity and strike.\nWe obtain 142987 options in total that expire before 01/02/2018. We group these option paths\ninto the training dataset and test dataset by the split date 12/31/2014. The options that mature\nbefore 12/31/2014 are classified as training data while those starting on or after 12/31/2014 are\nlabeled as test data. The rest of options that cross the day are discarded. In this way, we ensure the\nratio of size of training data to that of test data is roughly 5 to 1. The distribution of maturity and\nmoneyness of training and test data are shown in Table 3.\nTable 3: The number of paths of options in the training data and test data in different ranges\nof maturity and moneyness. The maximum maturity of options in the training data and test data\nis 357 days. The moneyness of options in the training data is in the range of [0.4681, 1.5689] and\nthat of options in the test data is in the range of [0.7963, 1.5573].\nMaturity range\nTraining set\nTest set\nMoneyness range\nTraining set\nTest set\n[7, 14]\n5698\n1025\n(0.1, 0.8]\n3254\n3\n(14, 30]\n11869\n2309\n(0.8, 0.9]\n3199\n56\n(30, 90]\n28771\n5584\n(0.9, 1.1]\n41459\n6472\n(90, 360]\n66809\n12392\n(1.1, 1.5]\n61595\n13779\n(360, ∞]\n0\n0\n(1.5, 1.6]\n3640\n1000\nTotal\n113147\n21310\nTotal\n113147\n21310\nThe state variable st in the CU-RL method is defined in (25), where σt = ˜σ for all t, and\nIt = (∆t, Γt, Vt, Θt), representing the delta, gamma, vega, and theta, respectively.\nIn the implementation of CU-RL method, the coefficients in (27) are c0 = 0, c1 = 0.0004,\nand c2 = 0.08. The policy, value, and VaR networks are specified as fully connected feedforward\nneural networks with 9 hidden layers of 32 neurons. The nonlinear activation function for each\n28\nhidden layer is the Swish function. Each hidden layer is followed by a batch normalization layer.\nIn Algorithm 2, the size of buffer Dk is 59990, the minibatch size n = 30000, the number of\nepochs K = 1000, and M = 5. We apply a linearly decaying learning rate with the initial value\n1e-7 and terminal value 1e-12.\nWe use traditional supervised learning to pre-train an initializer based on the BS delta. The\ninitializer is comprised of a policy network, a value network, and a VaR network, all of which\nhave the same definition of input, output, and structure as the networks used in CU-RL. The policy\nnetwork in the initializer is learned by minimizing the mean-squared loss of its output and the BS\ndelta. For the value network, we simulate trajectories using option paths in the training set and BS\ndelta as actions. Then we use Monte-Carlo method to estimate the value function, i.e. the estimator\nof the value function at the given state st is equal to the sum of discounted realized reward:\nˆV init(st) =\nT\nX\nk=t+1\nγk−tRk.\n(31)\nThe value network is trained to minimize the mean-square loss of ˆV init and its output. At the same\ntime, we collect the initial states and final P&L to train the VaR network to minimize (26). The\ninitializer is only trained in non-transaction cost environment.\nWe train an initializer based on the Black-Scholes delta for 3000 epochs, and then train models\nfor the non-transaction cost case and 0.1% proportional transaction cost case respectively.\nTable 4 shows the performance of CU-RL method and the BS delta hedging method on a out-\nof-sample test dataset of 21310 options in the no-transaction cost case and the 0.1% transaction\ncost case. The panel A shows that: (i) CU-RL obtains a statistically significantly higher mean final\nP&L than the benchmark method; (ii) CU-RL obtains lower CVaR at 0.975 level, the designated\nrisk measure in the total reward of CU-RL, lower MS at 0.975 level, and lower VaR at 0.975 level;\n(iii) CU-RL obtains lower VaR and CVaR at 0.95 level, suggesting it can effectively minimize the\ntail risk measured at an alternative level; (iv) all the results with respect to tail risk measures are\nstatistically significant, since all the confidence intervals of CU-RL are lower and have no overlap\nwith those of BS model. The panel B shows that similar conclusion holds when transaction costs\nare considered, except that the confidence intervals of CU-RL for MS at 0.975 level overlaps with\nBS model’s.\n29\nTable 4: The mean, standard error, and tail risk of the final P&L of hedging call options by\nthe CU-RL method and the BS delta hedging method calculated from an out-of-sample test\nset. The underlying prices of the training data set and the test data set are simulated under the BS\nmodel and the option prices are calculated by the BS model. The test set is comprised of 21310\ncall options with different initial states. The p-values are calculated from a one-sided t-test for\nrelated samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS delta\nPanel A: without transaction cost\nMean\n19.7774\n16.5946\nStd Err\n0.1276\n0.1188\nP-Value\n0.0000E+00∗∗∗\n0.95-VaR\n-1.9950\n-0.7212\n0.95-CI of 0.95-VaR\n[-2.1807, -1.8808]\n[-0.8254, -0.6255]\n0.975-VaR\n-0.5698\n0.3742\n0.95-CI of 0.975-VaR\n[-0.6743, -0.4602]\n[0.2738, 0.6007]\n0.975-MS\n0.4152\n2.9188\n0.95-CI of 0.975-MS\n[0.1513, 0.9358]\n[2.2079, 3.5900]\n0.95-CVaR\n0.3932\n2.1178\n0.95-CI of 0.95-CVaR\n[0.1726, 0.6029]\n[1.8551, 2.4543]\n0.975-CVaR\n2.1091\n4.4515\n0.95-CI of 0.975-CVaR\n[1.7601, 2.4559]\n[3.9563, 5.0340]\nPanel B: with 0.1% transaction cost\nMean\n15.3985\n12.2803\nStd Err\n0.1039\n9.3143E-02\nP-Value\n0.0000E+00∗∗∗\n0.95-VaR\n-0.9939\n0.2501\n0.95-CI of 0.95-VaR\n[-1.1222, -0.8521]\n[3.1943E-02, 0.4363]\n0.975-VaR\n0.3830\n1.6582\n0.95-CI of 0.975-VaR\n[0.1113, 0.7369]\n[1.4087, 1.8205]\n0.975-MS\n3.6044\n4.1778\n0.95-CI of 0.975-MS\n[2.6998, 4.5668]\n[3.5968, 5.2686]\n0.95-CVaR\n2.6001\n3.9766\n0.95-CI of 0.95-CVaR\n[2.2324, 2.9707]\n[3.5864, 4.4425]\n0.975-CVaR\n5.6087\n7.0983\n0.95-CI of 0.975-CVaR\n[5.0622, 6.2609]\n[6.4255, 7.9711]\n30\n4.2\nHedging Options Based on Data Simulated under GARCH Model\nWe consider a GARCH(1,1) model proposed in Heston and Nandi (2000), in which the dynamics\nof the underlying stock price under the physical measure is specified as\nlog( St\nSt−1\n) = r + λσ2\nt + σtzt,\nσ2\nt = ω + βσ2\nt−1 + α(zt−1 −γσt−1)2,\n(32)\nwhere r is the risk-free interest rate, λ is the risk premium parameter, and zt\ni.i.d\n∼N(0, 1). The\nparameters satisfy ω > 0, α > 0, γ > 0, β > 0, and the stationarity condition αγ2 + β < 1.\nHeston and Nandi (2000) show that under the assumption that the value of a call option with one\nperiod to expiration obeys the BS option pricing formula, the dynamics of the GARCH process\nunder the risk neutral measure is given by\nlog( St\nSt−1\n) = r −1\n2σ2\nt + σtzt,\nσ2\nt = ω + βσ2\nt−1 + α(zt−1 −γ∗σt−1)2, where γ∗= γ + 1\n2 + λ,\n(33)\nwhich leads to the closed-form option pricing formula under the model.\n4.2.1\nHedging a single option using the CS-RL method\nWe consider hedging a single European call option with spot price S0 = 2585.64, initial volatility\nσ1 = 0.6652%, maturity T = 45 days, and strike K = S0. We assume the stock price follows a\nGARCH(1, 1) model with parameters given in Table 5, which corresponds to the time unit of one\nday.1\nTable 5: Value of parameters of GARCH(1, 1) model.\nParameter\nλ\nω\nα\nβ\nγ\nσ1\nr\nValue\n0.2981\n3.4105e-07\n9.6154e-06\n0.8168\n0.1497\n0.6652%\n0.03/365\nIn the implementation of CS-RL method for the GARCH model, the coefficients λ1 = 10.0, λ2 =\n0.0 in (9). The coefficients in (22) are c0 = 0, c1 = 0.004, and c2 = 0.008 for the non-transaction\ncost case and c0 = 0, c1 = 0.004, and c2 = 0.0004 for the proportional transaction cost case. The\npolicy network and value network are specified as fully connected feedforward neural networks\nwith 3 hidden layers of 32 neurons; the nonlinear activation function for each hidden layer is the\n31\nSwish function; each hidden layer is followed by a batch normalization layer. In Algorithm 1, the\nsize of buffer Dk is 29988, the minibatch size n = 6000, the number of epochs K = 1000, and\nM = 5. We apply a linearly decaying learning rate with the initial value 0.001 and terminal value\n1e-12.\nWe compare the CS-RL with the BS delta hedging and GARCH delta hedging method. The BS\ndelta at time t is calculated using two definitions of volatility: one is the predicted volatility σt+1\nof the GARCH model, and the other is the implied volatility derived from the option price under\nthe GARCH model. The two BS delta hedging methods are denoted as “BS delta (pred-vol)\" and\n“BS delta\" in Table 6, respectively. The GARCH delta hedging position is the partial derivative of\nthe option price under the GARCH model with respective to the underlying price.\nWe train the model for the non-transaction cost case and then use the trained parameters as an\ninitializer to train a model the 0.1% proportional transaction cost case.\nTable 6 shows the performance of CS-RL method, the two BS delta hedging methods, and the\nGARCH delta hedging method on a out-of-sample test dataset of 160000 sample paths in the no-\ntransaction cost case and the 0.1% transaction cost case. The panel A shows that: (i) CS-RL obtains\nthe lowest CVaR and MS of the final P&L at the chosen level 0.975, and its CVaR at 0.975 level\nis statistically significantly lower; (ii) BS delta method has insignificantly higher mean of the final\nP&L than CS-RL, but it also has higher tail risk; (iii) GARCH delta method has significantly lower\nmean of final P&L than that of CS-RL, although the GARCH delta method has the lowest risk\nmeasured by 0.95-VaR, 0.975-VaR, and 0.95-CVaR; (iv) there is no benchmark method that has\nboth higher profit and lower tail risk than CS-RL. The panel B shows the results when transaction\ncosts are considered. In this case, CS-RL obtains the statistically significantly highest mean and\nlowest risk measure of the final P&L, showing it can adapt to real market setting like transaction\ncosts.\n4.2.2\nHedging Many Options Using the CU-RL Method\nWe consider hedging many options with different initial states by using the CU-RL method. Fol-\nlowing the procedure in Section 4.1.2, we first simulate a single sample path of stock index price St\nfrom 01/02/2008 to 12/31/2017 under the GARCH model with parameters2 in Table 7 and initial\nprice S0 = 1447.16, which is the adjusted closing price of the S&P 500 index on 01/02/2008. We\nthen assume that call options on the stock index are listed at the exchange based on the same set of\nrules specified in Section 4.1.2 and the option prices are calculated from the GARCH model.\nWe obtain 117427 options in total that expire before 12/31/2017. We group these option paths\ninto the training dataset and test dataset by the split date of 12/31/2015. Options that mature before\n32\nTable 6: The mean, standard error, and tail risk of the final P&L of hedging a single option\nby the CS-RL method, the BS delta hedging method, and GARCH delta hedging method\ncalculated from an out-of-sample test set. The test set is comprised of 160000 sample paths\nsimulated under the GARCH model. The BS delta (pred-vol) means the BS delta calculate by\nusing the predicted volatility in the GARCH model. The BS delta means BS delta calculated by\nusing the implied volatility of the option price. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCS-RL\nTraditional Model\nBS delta (pred-vol)\nBS delta\nGARCH delta\nPanel A: without transaction cost\nMean\n-4.8162E-02\n-3.5121E-03\n-4.7628E-03\n-0.1447\nStd Err\n3.2550E-02\n2.9162E-02\n2.8392E-02\n2.6732E-02\nP-Value\n0.9930\n0.9950\n1.0907E-02∗\n0.95-VaR\n20.3432\n20.5685\n19.7982\n18.9447\n0.95-CI of 0.95-VaR\n[20.2019, 20.4794]\n[20.4115, 20.7298]\n[19.6100, 19.9565]\n[18.7851, 19.1157]\n0.975-VaR\n24.9147\n25.7011\n25.2294\n24.4295\n0.95-CI of 0.975-VaR\n[24.7285, 25.1431]\n[25.4535, 25.9052]\n[24.9864, 25.4727]\n[24.1642, 24.6749]\n0.975-MS\n29.3582\n30.7426\n30.7524\n29.9358\n0.95-CI of 0.975-MS\n[29.1231, 29.6659]\n[30.3967, 31.0018]\n[30.4376, 31.0781]\n[29.5927, 30.3444]\n0.95-CVaR\n26.9283\n27.8137\n27.7320\n26.8347\n0.95-CI of 0.95-CVaR\n[26.7402, 27.1381]\n[27.5988, 28.0388]\n[27.4949, 27.9838]\n[26.5976, 27.0748]\n0.975-CVaR\n31.4645\n32.7531\n33.2446\n32.3008\n0.95-CI of 0.975-CVaR\n[31.1943, 31.7834]\n[32.4628, 33.0603]\n[32.9099, 33.5935]\n[31.9550, 32.6367]\nPanel B: with 0.1% transaction cost\nMean\n-4.2708\n-6.9340\n-6.8413\n-7.1186\nStd Err\n3.6128E-02\n3.0048E-02\n2.9897E-02\n2.8512E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n26.7733\n28.4811\n28.4687\n27.9080\n0.95-CI of 0.95-VaR\n[26.6210, 26.9398]\n[28.3106, 28.6669]\n[28.2755, 28.6584]\n[27.7263, 28.0909]\n0.975-VaR\n31.8456\n33.9079\n34.3516\n34.0782\n0.95-CI of 0.975-VaR\n[31.6270, 32.0580]\n[33.7069, 34.1424]\n[34.1239, 34.6104]\n[33.7949, 34.3876]\n0.975-MS\n36.9980\n39.2778\n40.4047\n40.1944\n0.95-CI of 0.975-MS\n[36.6607, 37.3052]\n[38.9173, 39.6481]\n[40.0290, 40.8340]\n[39.8498, 40.5740]\n0.95-CVaR\n34.2219\n36.2107\n37.1237\n36.6094\n0.95-CI of 0.95-CVaR\n[33.9966, 34.4402]\n[35.9716, 36.4342]\n[36.8522, 37.3932]\n[36.3524, 36.8867]\n0.975-CVaR\n39.4503\n41.4951\n43.1377\n42.5885\n0.95-CI of 0.975-CVaR\n[39.1289, 39.7869]\n[41.1799, 41.8056]\n[42.7757, 43.5175]\n[42.2150, 42.9299]\nTable 7: Value of parameters of GARCH(1, 1) model.\nParameter\nλ\nω\nα\nβ\nγ\nσ1\nr\nValue\n0.2886\n1.6615e-09\n1.8284e-05\n0.8503\n0.2993\n0.01931\n0.03/365\n33\nthe day are classified as training data while those starting after the day are labeled as test data.\nThe rest of options that cross the day are dropped. The distribution of maturity and moneyness of\noptions in the training and test data are shown in Table 8.\nTable 8: The number of training paths and test paths in different ranges of maturity and\nmoneyness. The maximum maturity in both the training set and the test set is 357 days. The\nmoneyness of options in the training set is in the range of [0.4723, 1.5629] and that of options in\nthe test set is in the range of [0.9241, 1.5351].\nMaturity range\nTraining set\nTest set\nMoneyness range\nTraining set\nTest set\n[7, 14]\n5211\n865\n(0.1, 0.9]\n6398\n0\n(14, 30]\n10519\n1552\n(0.9, 1.1]\n36059\n5899\n(30, 90]\n27215\n3971\n(1.1, 1.5]\n55285\n9426\n(90, 360]\n58851\n9243\n(1.5, 1.6]\n4054\n306\nTotal\n101796\n15631\nTotal\n101796\n15631\nThe state variable st in the CU-RL method is defined in (25), where σt is defined as the implied\nvolatility calculated from the GARCH option price at time t, and It = (∆t, Γt, Vt, Θt) are the\noption’s Greeks.\nWe train two models for the non-transaction cost case and 0.1% proportional transaction cost\ncase, respectively. We still use the parameters in the pre-trained initializer based on the BS delta\nto initialize network parameters. The number of initializer training epochs is 2000, and the initial\nvalue of the linearly decaying learning rate is set to be 1e-6. Other hyperparameters and network\nstructure are the same as those in Section 4.1.2.\nTable 9 shows the performance of CU-RL method, the BS delta hedging method, and the\nGARCH delta hedging method on a out-of-sample test dataset of 15631 call options. The panel\nA shows that: (i) CU-RL obtains significantly higher mean final P&L than all the benchmark\nmethods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the designated risk measure in the\ntotal reward of CU-RL, the lowest MS at 0.975 level, and lowest VaR at 0.975 level; (iii) CU-RL\nobtains the lowest VaR and CVaR at 0.95 level, suggesting it can effectively minimize the tail risk\nmeasured at an alternative level; (iv) all the results with respect to tail risk measures are statistically\nsignificant, since all the confidence intervals of CU-RL are lower and have no overlap with those\nof other benchmark models. The panel B shows that similar conclusion holds when transaction\ncosts are considered.\n34\nTable 9: The mean, standard error, and tail risk of the final P&L of hedging options by\nthe CU-RL method, two BS delta hedging methods, and the GARCH delta hedging method\ncalculated from an out-of-sample test set. The underlying prices of the training data set and the\ntest data set are simulated under the GARCH model and the option prices are calculated by the\nGARCH model. The test set is comprised of 15631 call options with different initial states. The\nBS delta (pred-vol) means the BS delta calculate by using the predicted volatility in the GARCH\nmodel. The BS delta means BS delta calculated by using the implied volatility of the option price.\nThe p-values are calculated from a one-sided t-test for related samples that tests if the mean P&L of\nour method is higher than that of the benchmark method. 0.95-CI means 95% confidence interval.\nScientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS delta (pred-vol)\nBS delta\nGARCH delta\nPanel A: without transaction cost\nMean\n11.4643\n6.1651\n6.1783\n6.0164\nStd Err\n0.1496\n0.1348\n0.1335\n0.1868\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n5.5937E-239∗∗∗\n0.95-VaR\n5.4522\n10.2452\n9.7802\n18.8301\n0.95-CI of 0.95-VaR\n[5.1055, 5.7649]\n[9.7737, 10.7511]\n[9.3638, 10.2951]\n[16.4881, 20.7133]\n0.975-VaR\n8.6245\n17.9601\n17.5868\n41.2547\n0.95-CI of 0.975-VaR\n[8.2618, 9.0675]\n[16.6295, 19.5196]\n[15.8743, 19.3740]\n[39.7569, 42.7711]\n0.975-MS\n16.9750\n32.9698\n32.9163\n54.0249\n0.95-CI of 0.975-MS\n[13.2471, 20.3019]\n[30.1767, 36.6814]\n[30.1453, 36.4798]\n[52.2357, 55.3731]\n0.95-CVaR\n13.8070\n24.2084\n23.8017\n49.5249\n0.95-CI of 0.95-CVaR\n[12.7461, 15.1009]\n[22.8256, 25.6482]\n[22.3719, 25.2464]\n[46.5163, 52.9706]\n0.975-CVaR\n20.7667\n35.1175\n35.0618\n69.0765\n0.95-CI of 0.975-CVaR\n[18.9307, 23.2112]\n[33.0889, 37.4025]\n[32.9056, 37.3650]\n[65.1642, 73.8666]\nPanel B: with 0.1% transaction cost\nMean\n6.2717\n1.9656\n2.0434\n0.8613\nStd Err\n0.1317\n0.1254\n0.1243\n0.1849\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n6.0211E-247∗∗∗\n0.95-VaR\n8.7052\n16.6240\n16.0929\n27.2466\n0.95-CI of 0.95-VaR\n[8.2856, 9.1425]\n[15.9747, 17.2615]\n[15.5966, 16.7680]\n[24.6823, 30.2913]\n0.975-VaR\n14.8657\n24.6764\n24.5287\n51.7348\n0.95-CI of 0.975-VaR\n[13.6176, 17.2352]\n[23.3038, 26.3341]\n[23.2227, 26.3301]\n[50.9104, 54.9577]\n0.975-MS\n29.5319\n40.8713\n40.9004\n68.8901\n0.95-CI of 0.975-MS\n[26.7955, 31.4739]\n[37.3693, 44.6502]\n[37.3048, 44.7364]\n[67.2344, 70.0849]\n0.95-CVaR\n23.1402\n32.1425\n31.9942\n61.0529\n0.95-CI of 0.95-CVaR\n[21.7837, 24.7895]\n[30.4253, 33.5130]\n[30.4297, 33.6202]\n[58.0521, 64.7725]\n0.975-CVaR\n35.1989\n44.7334\n44.7098\n82.5378\n0.95-CI of 0.975-CVaR\n[32.8350, 38.1706]\n[42.2557, 47.4895]\n[42.1666, 47.4908]\n[78.7115, 87.7272]\n35\n5\nHedging S&P 500 Index Options in the Model-Free Setting\nThe CU-RL method has the unique advantage that it can be used in a model-free setting, i.e., it can\nuse only historical data of the stock and option to learn the hedging strategy without specifying\na parametric model for the underlying stock. In this section, we will train the CU-RL model\nusing only the historical data of the S&P 500 index and index options to demonstrate its empirical\nperformance.\nSection 5.1 describes the data of S&P 500 index options and other market information vari-\nables, and explains the setting of empirical study. In Section 5.2 (resp., Section 5.5), we use the\ndata of all S&P 500 index call (resp., put) options to train a unified model for hedging any call\n(resp., put) options. In Section 5.3 (resp., Section 5.6), we use the data of short-term S&P 500 in-\ndex call (resp., put) options to train a unified model for hedging short-term call (resp., put) options.\nIn Section 5.4 (resp., Section 5.7), we use the data of deep-in-the-money (resp. deep-out-of-the-\nmoney) short-term S&P 500 index call (resp., put) options to train a unified model for hedging\ndeep-in-the-money (resp., deep-out-of-the-money) short-term call (resp., put) options. Section 5.8\npresents the empirical hedging performance of the CU-RL approach when the reward at each time\nperiod t = 0, 1, . . . , T −2 is defined to be zero. Section 5.9 presents the empirical hedging perfor-\nmance of the CU-RL approach when the reward at each time period is divided by the initial margin\nof the option.\n5.1\nData Description and Setting of Empirical Study\nWe use a data set of the historical daily market data of SPX options from 01/01/2008 to 12/31/2017\nthat is obtained from OptionsMetrics. We only retain options with expiration dates prior to 01/02/2018.\nThe data set include the SPX-Traditional (SPX), the SPX Weeklys (SPXW) and the SPX End Of\nMonth (SPX EOM).\nTo utilize the data more efficiently, we pre-process the data in the following way. For the\nhistorical data path of each option contract, we first specify any day before the option matures as\n’today’, then we can obtain an ’independent’ data path from each ’today’ to the expiration date.\nIn this way, many paths of different lengths can be isolated from a single option, which greatly\nimproves data utilization. We divide all paths into three sets, the training set, validation set and\ntest set. The training set comprises of all the paths that expire before 07/01/2017; the validation\nset comprises of all the paths that start after 07/01/2017 and expire before 10/01/2017; and the test\nset comprises of all the paths that start after 10/01/2017 and expires before 01/02/2018. We train\nCU-RL on the training set with different hyperparameters, including the learning rate η, minibatch\n36\nsize n, and replay buffer size |Dk|, and then select the best model based on the performance on\nvalidation set. The results we present are based on the test set.\nThe market data contain the best bid and ask price of options, the strike price, the implied\nvolatility, the Greeks, and so on. We use the middle price of the best bid and the best ask price as\nthe option price Zt, t = 0, · · · , T −1, which is utilized to compute the hedging error in (1). The\ninitial capital B0 is specified to be Z0. The underlying price St is the adjusted closing price of the\nS&P 500 index. We use the overnight London Interbank Offered Rate (LIBOR) rt as the risk-free\ninterest rate.\nThe state variable st in the CU-RL method is defined in (25), where σt is the implied volatility\non day t provided in the market data, and It = (rt, ∆t, Γt, Vt, Θt), which include the LIBOR rate\nand the option’s Greeks in the market data.\nWe compare the strategy learned by CU-RL with three benchmarks, the BS delta hedging,\nthe local volatility function (LVF) and the SABR delta hedging. For the LVF, the strategy δlvf =\nδBS + ν ∂σ\n∂K, where σ is the implied volatility, and ν is the Vega ratio. Both σ and ν are provided by\nmarket data. Therefore, we only need to estimate ∂σ\n∂K for computing δlvf. Assume that the implied\nvolatility depends on the strike price quadratically, i.e. σ = a1K2 + a2K + a3. We classify the\noption data by the date and expiration date. For each group of data, we fit a pair of (a1, a2), and\nthen get ∂σ\n∂K = 2a1K + a2 as the estimated value of δlvf for the states in that group. If the sign of it\nis the same as the Black-Scholes’ delta, we accept the calibrated value δlvf as the holding position.\nOtherwise, we maintain the delta value provided by the Black-Scholes model. Especially, if the\ngroup contains n < 4 data points, we just adopt the value of δBS as the holding position rather than\nestimating the calibrated value δlvf. For the SABR model, the strategy δSABR of test options can be\ncomputed as same as introduced in the pre-training part.\nThe SABR model is defined as\ndFt = αtF β\nt dW (1)\nt\n,\ndαt = ναtdW (2)\nt\n,\n(34)\nwhere W (1)\nt\n, W (2)\nt\nare standard Brownian motions and dW (1)\nt\ndW (2)\nt\n= ρdt, Ft := St exp[(r −\nq)(T −t)] is the forward price. We first calibrate the SABR model with the option data. Test set\ndata is never involved in the pre-training process. We classify option data in the training set by\nthe date and expiration date. Data with the same date and expiration date is collected in a group.\nTherefore, for each group, the time-to-maturity τ, which determined by the difference between the\ndate and expiration date, is unique. Also, the date t has the unique value in each group. Take one\ngroup as an example. Assume that there are n data points in that group. Each data point includes\n37\nthe option price, the underlying price, time-to-maturity, implied volatility. For the SABR model\nshown in (34), we can obtain the estimated value of αt, ρ, ν assuming β = 1. We then compute the\nSABR delta value.\nFor hedging real options, the relative importance coefficients of final P&L in (5) are fixed to\nbe λ1 = 1.0, λ2 = 0.0. In the implementation of CU-RL method for hedging options in the real\nmarket, the coefficients in (27) are always c0 = 0, c1 = 0.04, and c2 = 0.08. In Algorithm 2, we\nalways set the number of epochs K = 1000, and M = 5. We always apply a linearly decaying\nlearning rate with terminal value 1e-12. The policy, value, and VaR networks are specified as fully\nconnected feedforward neural networks. The nonlinear activation function for each hidden layer\nis the Swish function. Each hidden layer is followed by a batch normalization layer. The policy\nnetwork is appended by a Sigmoid layer before it outputs to scale the mean of action to [0, 1]. For\nput options, the output is additionally multiplied by -1 to scale the mean of action to [−1, 0]. The\nnetwork structure is kept the same in all the empirical studies, and we only change the number of\nhidden layers and the number of neurons in each layer. Besides, we always pre-train an initializer\nusing the corresponding training set. The training process of initializers is similar to the one based\non Black-Scholes delta, except that we may replace the BS delta with SABR delta.\n5.2\nPerformance of Hedging All Call Options by a Unified Model\nWe train a unified model for all call options with any initial states by the CU-RL approach. The\ntraining data include the paths of all the call options in the training set. In total, there are 513017\ntraining paths, 113529 validation paths, and 114089 test paths. The distribution of maturity and\nmoneyness of the training, validation, and test dataset of call options are shown in Table 10.\nTable 10: The number of paths of call options in different maturity ranges and moneyness\nranges. The maximum maturity of options in the training, validation, and test data are 361 days,\n88 days, and 88 days, respectively. The moneyness ranges of options in the training, validation,\nand test data are [0.06426, 1.5816], [0.1212, 1.3694], and [0.1153, 1.3839], respectively.\nMaturity range\nTraining set\nValid set\nTest set\nMoneyness range\nTraining set\nValid set\nTest set\n[0, 7]\n62231\n18030\n18979\n(0.0, 0.1]\n129\n0\n0\n(7, 14]\n69967\n19603\n19616\n(0.1, 0.5]\n11734\n1374\n591\n(14, 30]\n151964\n37632\n40222\n(0.5, 0.8]\n102802\n11399\n8084\n(30, 60]\n152372\n31806\n29836\n(0.8, 0.9]\n104469\n19486\n20021\n(60, 90]\n60704\n6458\n5436\n(0.9, 1.1]\n273336\n77634\n82542\n(90, 361]\n15779\n0\n0\n(1.1, 1.5]\n20486\n3636\n2851\n(361, ∞]\n0\n0\n0\n(1.5, 1.6]\n61\n0\n0\nIn the implementation of CU-RL method for hedging all call options in the real market, the\n38\n0\n200\n400\n600\n800\n1000\nEpochs\n−500\n−400\n−300\n−200\n−100\nMean of reward\n(a) Cumulative reward for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n0\n20\n40\n60\n80\n100\n120\nValue loss\n(b) Loss of value network for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n1\n2\n3\n4\n5\n6\nOmega loss\n(c) Loss of VaR network for each training epoch\nFigure 2: Learning curves for the CU-RL method for hedging all S&P 500 call options in the\nreal market. The x-axis of all subfigures represent the training epoch. The y-axis represent the\ncumulative rewards, the loss of value network, and the loss of VaR network, respectively for the\nsubfigures (a), (b), and (c).\n39\nTable 11: The mean, standard error, and tail risk of the final P&L of hedging all call options\nby the CU-RL method, the Black-Scholes, local volatility function, and SABR delta hedging\nmethod calculated from an out-of-sample test set. The test set include all S&P 500 call options\ntraded on or after 10/01/2017 and expired before 01/02/2018. The p-values are calculated from a\none-sided t-test for related samples that tests if the mean P&L of our method is higher than that of\nthe benchmark method. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 =\n1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n2.9249\n-1.0406\n-2.0096\n0.2089\nStd Err\n1.8068E-02\n7.9599E-03\n1.0556E-02\n1.2193E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n3.7794\n5.8561\n8.7729\n5.2496\n0.95-CI of 0.95-VaR\n[3.7359, 3.8328]\n[5.8085, 5.9103]\n[8.6952, 8.8562]\n[5.1924, 5.3053]\n0.975-VaR\n5.0189\n7.1287\n11.0766\n6.7506\n0.95-CI of 0.975-VaR\n[4.9602, 5.0801]\n[7.0642, 7.1983]\n[10.9690, 11.1896]\n[6.6765, 6.8438]\n0.975-MS\n6.1787\n8.2424\n12.4982\n8.5785\n0.95-CI of 0.975-MS\n[6.0986, 6.2639]\n[8.1687, 8.3331]\n[12.4096, 12.5886]\n[8.4534, 8.7365]\n0.95-CVaR\n5.4541\n7.4568\n11.2591\n8.1723\n0.95-CI of 0.95-CVaR\n[5.3940, 5.5081]\n[7.4043, 7.5127]\n[11.1849, 11.3346]\n[8.0410, 8.2998]\n0.975-CVaR\n6.5600\n8.4783\n12.7464\n10.4350\n0.95-CI of 0.975-CVaR\n[6.4845, 6.6419]\n[8.4106, 8.5385]\n[12.6687, 12.8228]\n[10.2362, 10.6633]\nPanel B: with 0.1% transaction cost\nMean\n1.1755\n-3.4508\n-4.6257\n-2.7045\nStd Err\n2.3157E-02\n1.0031E-02\n1.3667E-02\n1.3308E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n6.4345\n9.2068\n13.0101\n9.1282\n0.95-CI of 0.95-VaR\n[6.3899, 6.4861]\n[9.1579, 9.2491]\n[12.9186, 13.0887]\n[9.0536, 9.2073]\n0.975-VaR\n7.6947\n10.5362\n15.6054\n11.4791\n0.95-CI of 0.975-VaR\n[7.6323, 7.7546]\n[10.4645, 10.5985]\n[15.4899, 15.7274]\n[11.3261, 11.6428]\n0.975-MS\n8.9001\n11.6221\n17.3305\n14.7662\n0.95-CI of 0.975-MS\n[8.7990, 8.9929]\n[11.5416, 11.7006]\n[17.2319, 17.4243]\n[14.4888, 15.0669]\n0.95-CVaR\n8.1483\n10.8269\n15.8995\n14.0771\n0.95-CI of 0.95-CVaR\n[8.0870, 8.2041]\n[10.7770, 10.8816]\n[15.8114, 15.9940]\n[13.8530, 14.2852]\n0.975-CVaR\n9.2947\n11.8595\n17.6550\n18.0190\n0.95-CI of 0.975-CVaR\n[9.2246, 9.3839]\n[11.7940, 11.9177]\n[17.5565, 17.7463]\n[17.6693, 18.4025]\n40\nnumber of hidden layers is 9 and the number of neurons in each layer is 32. In Algorithm 2,\nthe size of buffer Dk is 59990, the minibatch size n = 30000. The initial value for the linearly\ndecaying learning rate is 1e-4 for the non-transaction cost case and 1e-5 for the 0.1% proportional\ntransaction cost case. We pre-train the initializer for all call options based on the SABR delta data.\nFig. 2 shows the three learning curves of CU-RL method for the cumulative reward, the loss\nfor value network, and the loss for VaR network, respectively. The convergence of the CU-RL\nmethod seems to be stable. The out-of-sample performance of CU-RL on the test data in both\nnon-transaction cost and proportional transaction cost cases is shown in Table 11.\nThe panel A of Table 11 shows that: (i) CU-RL obtains the significantly highest mean final\nP&L among all the methods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the designated\nrisk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and lowest VaR at 0.975\nlevel; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggesting it can effectively\nminimize the tail risk measured at an alternative level; (iv) all the results with respect to tail risk\nmeasures are statistically significant, since all the confidence intervals of CU-RL are lower and\nhave no overlap with those of other benchmark models.\nThe panel B of Table 11 shows that similar conclusion holds when transaction costs are con-\nsidered. Although the mean of final P&L falls and the risk measure rises due to transaction costs,\nCU-RL still obtains the significantly highest mean and lowest risk of P&L.\n5.3\nPerformance of Hedging Short-Term Near-the-Money Call Options by\na Unified Model\nIn this subsection, we train a unified model for all the short-term call options with maturity T ∈\n[5, 30] and moneyness K\nS0 ∈[0.9, 1.1]. The training set, validation set, and test set contains the\ndata of all such options in the corresponding sets in Section 5.1. There are 160102 training paths,\n39537 validation paths, and 43228 test paths. The distribution of maturity and moneyness in the\ntraining dataset and test dataset is shown in Table 12.\nTable 12: The number of paths of short-term close-to-the-money call options (T ∈[5, 30], K\nS0 ∈\n[0.9, 1.1]) in different maturity ranges and moneyness ranges.\nMaturity range\nTraining set\nValid set\nTest set\nMoneyness range\nTraining set\nValid set\nTest set\n[5, 15]\n55608\n14703\n16236\n[0.9, 0.95]\n40098\n8517\n9253\n[16, 21]\n42787\n10466\n11791\n(0.95, 1.0]\n43386\n12276\n13476\n[22, 30]\n61707\n14368\n15201\n(1.0, 1.05]\n47942\n13235\n14715\n-\n-\n-\n-\n(1.05, 1.1]\n28676\n5509\n5784\nIn the implementation of CU-RL method for short-term call options, the network structure are\n41\nthe same as those in the all call option case, i.e. the three networks are specified as fully connected\nfeedforward neural networks with 9 hidden layers of 32 neurons. In Algorithm 2, the size of buffer\nDk is 29988, the minibatch size n = 20000, and the initial value of the linearly decaying learning\nrate is 1e-6.\nFig. 3 shows the three learning curves of CU-RL method for the cumulative reward, the loss\nfor value network, and the loss for VaR network, respectively. The convergence of the CU-RL\nmethod seems to be stable. The out-of-sample performance of CU-RL on the test data in both\nnon-transaction cost and proportional transaction cost cases is shown in Table 13.\n0\n200\n400\n600\n800\n1000\nEpochs\n−600\n−550\n−500\n−450\n−400\n−350\n−300\n−250\nMean of reward\n(a) Cumulative reward for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n0\n100\n200\n300\n400\nValue loss\n(b) Loss of value network for each training epoch\n0\n200\n400\n600\n800\n1000\nEpochs\n7.0\n7.5\n8.0\n8.5\n9.0\nOmega loss\n(c) Loss of VaR network for each training epoch\nFigure 3: Learning curves for the CU-RL method for hedging S&P 500 short-term call op-\ntions in the real market. The x-axis of all subfigures represent the training epoch. The y-axis\nrepresent the cumulative rewards, the loss of value network, and the loss of VaR network, respec-\ntively for the subfigures (a), (b), and (c).\nThe panel A of Table 13 shows that: (i) CU-RL obtains the significantly highest mean final\nP&L among all the methods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the designated\nrisk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and lowest VaR at 0.975\nlevel; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggesting it can effectively\nminimize the tail risk measured at an alternative level; (iv) all the results with respect to tail risk\nmeasures are statistically significant, since all the confidence intervals of CU-RL are lower and\nhave no overlap with those of other benchmark models.\nThe panel B of Table 13 shows that similar conclusion holds when transaction costs are con-\n42\nTable 13: The mean, standard error, and tail risk of the final P&L of hedging short-term\ncall options by the CU-RL method, the Black-Scholes, local volatility function, and SABR\ndelta hedging method calculated from an out-of-sample test set. The test set include all S&P\n500 short-term call options with T ∈[5, 30], K/S0 ∈[0.9, 1.1] traded on or after 10/01/2017 and\nexpired before 01/02/2018. The p-values are calculated from a one-sided t-test for related samples\nthat tests if the mean P&L of our method is higher than that of the benchmark method. 0.95-CI\nmeans 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001;\n** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n2.4479\n-0.3079\n-1.0298\n0.7770\nStd Err\n2.2538E-02\n1.1242E-02\n1.4010E-02\n1.8853E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n1.5239\n4.0753\n5.9742\n4.4919\n0.95-CI of 0.95-VaR\n[1.4919, 1.5491]\n[4.0187, 4.1357]\n[5.8757, 6.0803]\n[4.3136, 4.6473]\n0.975-VaR\n2.0097\n4.9829\n7.5718\n6.5233\n0.95-CI of 0.975-VaR\n[1.9556, 2.0593]\n[4.9061, 5.0849]\n[7.4473, 7.6647]\n[6.3532, 6.7066]\n0.975-MS\n2.6801\n6.5480\n9.2724\n8.8325\n0.95-CI of 0.975-MS\n[2.6021, 2.7812]\n[6.3322, 6.7633]\n[9.0487, 9.5064]\n[8.5744, 9.0669]\n0.95-CVaR\n2.4143\n5.6511\n8.2637\n7.7263\n0.95-CI of 0.95-CVaR\n[2.3499, 2.4751]\n[5.5673, 5.7563]\n[8.1390, 8.3906]\n[7.5117, 7.9199]\n0.975-CVaR\n3.1050\n6.8327\n9.8537\n10.0016\n0.95-CI of 0.975-CVaR\n[3.0135, 3.2055]\n[6.7043, 6.9722]\n[9.6701, 10.0390]\n[9.7116, 10.3233]\nPanel B: with 0.1% transaction cost\nMean\n1.2380\n-2.3988\n-3.2881\n-2.1633\nStd Err\n2.9677E-02\n1.4498E-02\n1.8475E-02\n2.1290E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n4.5229\n7.3841\n9.8077\n9.5096\n0.95-CI of 0.95-VaR\n[4.4763, 4.5772]\n[7.3077, 7.4348]\n[9.7235, 9.9045]\n[9.3464, 9.6470]\n0.975-VaR\n5.4778\n8.3330\n11.2466\n12.4072\n0.95-CI of 0.975-VaR\n[5.3950, 5.5769]\n[8.2405, 8.4352]\n[11.1512, 11.3675]\n[12.1395, 12.5717]\n0.975-MS\n6.5112\n9.8437\n13.0815\n15.0653\n0.95-CI of 0.975-MS\n[6.3929, 6.6523]\n[9.6109, 10.0783]\n[12.7899, 13.3427]\n[14.7583, 15.4513]\n0.95-CVaR\n6.0319\n8.9888\n12.0782\n13.9373\n0.95-CI of 0.95-CVaR\n[5.9339, 6.1235]\n[8.9041, 9.0956]\n[11.9504, 12.1997]\n[13.6502, 14.1959]\n0.975-CVaR\n7.1246\n10.1843\n13.6890\n17.1279\n0.95-CI of 0.975-CVaR\n[6.9963, 7.2752]\n[10.0535, 10.3302]\n[13.4952, 13.8857]\n[16.7323, 17.5958]\n43\nsidered. Although the mean of final P&L falls and the risk measure rises due to transaction costs,\nCU-RL still obtains the significantly highest mean and lowest risk of P&L.\n5.4\nPerformance of Hedging Short-Term Deep In-the-money (ITM) Call\nOptions by a Unified Model\nWe then train two unified models, one for all the short-term deep ITM call options with K/S0 ∈\n(0.1, 0.8] and T ∈[5, 30], and the other for all the short-term deep ITM call options with K/S0 ∈\n(0.8, 0.9] and T ∈[5, 30]. The distribution of maturity in each dataset is shown in Table 14. We\ndo not train a separate model for short-term deep out-of-the-money (OTM) call options since there\nare not enough such option data.\nTable 14: The number of paths of short-term deep ITM call options (T ∈[5, 30], K\nS0 ∈\n[0.1, 0.9]) in different maturity ranges and moneyness ranges.\nMaturity Range\nK/S0 ∈(0.1, 0.8]\nK/S0 ∈(0.8, 0.9]\nTraining set\nValidation set\nTest set\nTraining set\nValidation set\nTest set\n[5, 15]\n11213\n1177\n1302\n20710\n2405\n2549\n(15, 21]\n5862\n1222\n1137\n10567\n2244\n2343\n(21, 30]\n9405\n1797\n1260\n16619\n2812\n2942\nTotal\n26480\n4196\n3699\n47896\n7461\n7838\nIn the implementation of CU-RL method for short-term deep ITM call options, the number of\nhidden layers is 3 and the number of neurons in each layer is 64. In Algorithm 2, the size of buffer\nDk is 29988, and the initial value of the linearly decaying learning rate is 1e-5. The minibatch size\nn is 10000 for the group with K/S0 ∈(0.1, 0.8] and 20000 for K/S0 ∈(0.8, 0.9].\nThe out-of-sample performance of CU-RL on the test data in both non-transaction cost and\nproportional transaction cost cases for both two groups is shown in Table 15 and Table 16.\nThe panel A of Table 15 and Table 16 share some similar results: (i) CU-RL obtains the signifi-\ncantly highest mean final P&L among all the models; (ii) CU-RL obtains the lowest CVaR at 0.975\nlevel, the designated risk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and\nthe lowest VaR at 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggest-\ning it can effectively minimize the tail risk measured at an alternative level; (iv) the risk measures\nof CU-RL are significantly lower than all benchmark models for the group with K/S0 ∈[0.8, 0.9],\nand significantly lower than those of the BS and LVF models for the group with K/S0 ∈[0.1, 0.8],\nand lower (but not significant) than those of the SABR model with K/S0 ∈[0.1, 0.8]. In summary,\n44\nTable 15: The mean, standard error, and tail risk of the final P&L of hedging short-term\ndeep ITM call options by the CU-RL method, the Black-Scholes, local volatility function, and\nSABR delta hedging method calculated from an out-of-sample test set. The test set include all\nS&P 500 short-term deep ITM call options with K/S0 ∈(0.1, 0.8], T ∈[5, 30] traded on or after\n10/01/2017 and expired before 01/02/2018. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n-0.9170\n-1.2021\n-1.6346\n-0.9364\nStd Err\n2.1436E-02\n2.1928E-02\n2.4261E-02\n2.1641E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n4.6431E-256∗∗∗\n0.95-VaR\n2.8302\n3.0917\n3.7633\n2.8610\n0.95-CI of 0.95-VaR\n[2.7706, 2.8746]\n[3.0538, 3.1576]\n[3.7121, 3.8255]\n[2.8118, 2.9167]\n0.975-VaR\n3.0144\n3.3047\n3.9797\n3.0619\n0.95-CI of 0.975-VaR\n[2.9753, 3.0791]\n[3.2469, 3.3639]\n[3.9329, 4.0338]\n[3.0211, 3.1152]\n0.975-MS\n3.1749\n3.4509\n4.1427\n3.2031\n0.95-CI of 0.975-MS\n[3.1188, 3.2183]\n[3.3891, 3.5506]\n[4.0693, 4.2222]\n[3.1652, 3.2768]\n0.95-CVaR\n3.0646\n3.3813\n4.0893\n3.1075\n0.95-CI of 0.95-CVaR\n[3.0231, 3.1066]\n[3.3316, 3.4375]\n[4.0218, 4.1599]\n[3.0671, 3.1512]\n0.975-CVaR\n3.2070\n3.5660\n4.3072\n3.2514\n0.95-CI of 0.975-CVaR\n[3.1572, 3.2570]\n[3.5008, 3.6467]\n[4.2222, 4.4325]\n[3.2078, 3.3083]\nPanel B: with 0.1% transaction cost\nMean\n-3.5174\n-3.8672\n-4.4077\n-3.5424\nStd Err\n2.0953E-02\n2.2049E-02\n2.5460E-02\n2.1144E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n5.3888\n5.7928\n6.6989\n5.4325\n0.95-CI of 0.95-VaR\n[5.3424, 5.4451]\n[5.7327, 5.8421]\n[6.6379, 6.7802]\n[5.3925, 5.4883]\n0.975-VaR\n5.5728\n5.9834\n7.0165\n5.6369\n0.95-CI of 0.975-VaR\n[5.5505, 5.6389]\n[5.9418, 6.0233]\n[6.9419, 7.0831]\n[5.5884, 5.6918]\n0.975-MS\n5.7304\n6.1250\n7.1544\n5.7720\n0.95-CI of 0.975-MS\n[5.6917, 5.8040]\n[6.0641, 6.2563]\n[7.1279, 7.2956]\n[5.7349, 5.8545]\n0.95-CVaR\n5.6276\n6.0792\n7.1095\n5.6768\n0.95-CI of 0.95-CVaR\n[5.5858, 5.6699]\n[6.0262, 6.1429]\n[7.0303, 7.1944]\n[5.6371, 5.7197]\n0.975-CVaR\n5.7674\n6.2688\n7.3699\n5.8197\n0.95-CI of 0.975-CVaR\n[5.7185, 5.8146]\n[6.1990, 6.3626]\n[7.2737, 7.5052]\n[5.7792, 5.8737]\n45\nTable 16: The mean, standard error, and tail risk of the final P&L of hedging short-term\ndeep ITM call options by the CU-RL method, the Black-Scholes, local volatility function, and\nSABR delta hedging method calculated from an out-of-sample test set. The test set include all\nS&P 500 short-term deep ITM call options with K/S0 ∈(0.8, 0.9], T ∈[5, 30] traded on or after\n10/01/2017 and expired before 01/02/2018. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n-0.8550\n-1.4554\n-2.0387\n-0.9186\nStd Err\n1.4531E-02\n1.5305E-02\n1.7549E-02\n1.4812E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n5.7469E-198∗∗∗\n0.95-VaR\n2.6239\n3.2628\n4.2091\n2.7167\n0.95-CI of 0.95-VaR\n[2.5869, 2.6587]\n[3.1856, 3.3580]\n[4.1432, 4.2826]\n[2.6884, 2.7490]\n0.975-VaR\n2.8483\n3.8865\n5.1523\n2.9877\n0.95-CI of 0.975-VaR\n[2.7983, 2.8948]\n[3.8236, 3.9404]\n[4.9532, 5.3184]\n[2.9419, 3.0411]\n0.975-MS\n3.0496\n4.1914\n5.6199\n3.1872\n0.95-CI of 0.975-MS\n[3.0010, 3.1116]\n[4.1139, 4.2689]\n[5.5426, 5.6980]\n[3.1380, 3.2274]\n0.95-CVaR\n2.9071\n3.8957\n5.1113\n3.0371\n0.95-CI of 0.95-CVaR\n[2.8764, 2.9435]\n[3.8255, 3.9633]\n[5.0121, 5.2318]\n[3.0034, 3.0838]\n0.975-CVaR\n3.0915\n4.2133\n5.6696\n3.2431\n0.95-CI of 0.975-CVaR\n[3.0497, 3.1354]\n[4.1593, 4.2675]\n[5.5843, 5.7540]\n[3.1991, 3.2952]\nPanel B: with 0.1% transaction cost\nMean\n-3.4388\n-4.1924\n-4.9259\n-3.5600\nStd Err\n1.4215E-02\n1.5822E-02\n1.9034E-02\n1.4545E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n5.1834\n6.0773\n7.3344\n5.3393\n0.95-CI of 0.95-VaR\n[5.1475, 5.2109]\n[6.0188, 6.1789]\n[7.2631, 7.4307]\n[5.3076, 5.3721]\n0.975-VaR\n5.4114\n6.7948\n8.4621\n5.6069\n0.95-CI of 0.975-VaR\n[5.3542, 5.4631]\n[6.6689, 6.9024]\n[8.2142, 8.6605]\n[5.5608, 5.6578]\n0.975-MS\n5.6097\n7.1441\n9.0274\n5.7983\n0.95-CI of 0.975-MS\n[5.5637, 5.6687]\n[7.0661, 7.2487]\n[8.9277, 9.1204]\n[5.7632, 5.8362]\n0.95-CVaR\n5.4643\n6.7904\n8.4009\n5.6594\n0.95-CI of 0.95-CVaR\n[5.4343, 5.5007]\n[6.7072, 6.8683]\n[8.2838, 8.5346]\n[5.6249, 5.7089]\n0.975-CVaR\n5.6483\n7.1859\n9.0514\n5.8666\n0.95-CI of 0.975-CVaR\n[5.6084, 5.6914]\n[7.1192, 7.2462]\n[8.9523, 9.1409]\n[5.8234, 5.9222]\n46\nCU-RL performs better than all benchmark models in both profit-making and risk-control in both\ntwo short-term deep ITM call groups.\nThe panel B of Table 15 and Table 16 show the results when transaction costs are considered:\n(i) CU-RL still obtains higher mean and lower risk measure than all benchmark models; (ii) CU-\nRL’s tail risk is significantly lower than BS and LVF models in the two groups and SABR model\nin the group with K/S0 ∈[0.8, 0.9], ans is lower (but not significant) than the SABR model in the\ngroup with K/S0 ∈[0.8, 0.9].\n5.5\nPerformance of Hedging All Put Options by a Unified Model\nWe train a unified model for all put options with any maturity and moneyness. The numbers\nof training, validation, and test paths in different ranges of maturity and moneyness is shown in\nTable 17. Overall, we have 483564 training paths, 125772 validation paths, and 150037 test paths.\nTable 17: The number of paths of put options in different maturity ranges and different\nmoneyness ranges. The maximum maturity of options in the training, validation, and test data are\n550 days, 88 days, and 88 days, respectively. The moneyness ranges of options in the training,\nvalidation, and test data are [0.1059, 2.2423], [0.1201, 1.3490], and [0.03855, 1.3839], respectively.\nMaturity range\nTraining Set\nValid set\nTest Set\nMoneyness range\nTraining Set\nValid set\nTest Set\n(0, 7]\n74943\n22439\n25726\n(0.1, 0.5]\n5004\n3449\n4005\n(7, 14]\n76774\n21236\n26327\n(0.5, 0.8]\n69732\n21429\n25725\n(14, 30]\n153615\n40687\n49900\n(0.8, 0.9]\n103702\n28651\n35149\n(30, 60]\n131998\n34878\n40951\n(0.9, 1.1]\n280256\n70787\n83136\n(60, 90]\n38877\n6532\n7133\n(1.1, 1.5]\n24718\n1456\n1887\n(90, 550]\n7357\n0\n0\n(1.5, 2.3]\n152\n0\n0\nIn the implementation of CU-RL method, the three networks are specified the same as those\nin the all call option case. In Algorithm 2, the size of buffer Dk is 59990, the minibatch size n =\n30000, and the initial value of the linearly decaying learning rate is 1e-4 for the non-transaction\ncost case and 5e-4 for the 0.1% proportional transaction cost case.\nThe out-of-sample performance of CU-RL in both non-transaction cost and proportional trans-\naction cost cases on the test data is shown in Table 18.\nThe panel A of Table 18 shows that: (i) CU-RL obtains the significantly highest mean final\nP&L among all the methods; (ii) CU-RL obtains the second lowest CVaR at 0.95 and 0.975 level\nand VaR at 0.975 level, and obtains the third lowest VaR at 0.95 level; (iii) CU-RL obtains the\nsignificantly lowest MS at 0.975 level among all the methods.\n47\nTable 18: The mean, standard error, and tail risk of the final P&L of hedging all put options\nby the CU-RL method, the Black-Scholes, local volatility function, and SABR delta hedging\nmethod calculated from an out-of-sample test set. The test set include all S&P 500 put options\ntraded on or after 10/01/2017 and expired before 01/02/2018. The p-values are calculated from a\none-sided t-test for related samples that tests if the mean P&L of our method is higher than that of\nthe benchmark method. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 =\n1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n3.3132\n1.7698\n1.0325\n2.5043\nStd Err\n1.2835E-02\n6.6780E-03\n6.4837E-03\n9.9172E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n1.8135E-02\n-1.4677E-02\n1.0552\n-2.4172E-02\n0.95-CI of 0.95-VaR\n[1.5388E-02, 2.2266E-02]\n[-1.5031E-02, -1.4325E-02]\n[1.0077, 1.1090]\n[-2.4224E-02, -2.4111E-02]\n0.975-VaR\n0.1511\n0.1280\n2.9708\n0.2625\n0.95-CI of 0.975-VaR\n[0.1455, 0.1579]\n[0.1032, 0.1551]\n[2.8788, 3.0718]\n[0.2065, 0.3192]\n0.975-MS\n0.5738\n1.1783\n5.1877\n2.3654\n0.95-CI of 0.975-MS\n[0.3860, 0.7930]\n[1.0880, 1.2697]\n[5.0258, 5.3361]\n[2.1944, 2.5420]\n0.95-CVaR\n1.1961\n0.9016\n3.8585\n1.8332\n0.95-CI of 0.95-CVaR\n[1.1414, 1.2622]\n[0.8550, 0.9415]\n[3.7798, 3.9456]\n[1.7549, 1.9240]\n0.975-CVaR\n2.3126\n1.7958\n5.8443\n3.6586\n0.95-CI of 0.975-CVaR\n[2.1870, 2.4377]\n[1.7203, 1.8731]\n[5.7304, 5.9616]\n[3.5077, 3.8106]\nPanel B: with 0.1% transaction cost\nMean\n3.2330\n0.6398\n-0.2402\n1.3500\nStd Err\n1.2606E-02\n4.7636E-03\n6.3944E-03\n9.0985E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n-2.4865E-02\n1.4115\n4.4806\n1.6581\n0.95-CI of 0.95-VaR\n[-2.4877E-02, -2.4851E-02]\n[1.3590, 1.4621]\n[4.3757, 4.5848]\n[1.5897, 1.7050]\n0.975-VaR\n0.6123\n3.0216\n7.8318\n5.1990\n0.95-CI of 0.975-VaR\n[0.5303, 0.6885]\n[2.9267, 3.1172]\n[7.6875, 7.9599]\n[5.0026, 5.3900]\n0.975-MS\n2.1933\n5.2327\n10.6417\n9.4210\n0.95-CI of 0.975-MS\n[2.0984, 2.3027]\n[5.0877, 5.3966]\n[10.4548, 10.7951]\n[9.1458, 9.7027]\n0.95-CVaR\n1.8365\n3.9472\n8.6063\n6.8241\n0.95-CI of 0.95-CVaR\n[1.7487, 1.9270]\n[3.8594, 4.0215]\n[8.4893, 8.7219]\n[6.6475, 6.9837]\n0.975-CVaR\n3.6154\n5.8264\n11.2287\n10.7077\n0.95-CI of 0.975-CVaR\n[3.4637, 3.7859]\n[5.7068, 5.9436]\n[11.0766, 11.3523]\n[10.4892, 10.9313]\n48\nThe panel B of Table 18 shows the results when transaction costs are considered. CU-RL\nobtains significantly higher mean and lower risk than all the benchmark models, suggesting it can\nefficiently adapt to real market settings like transaction costs.\n5.6\nPerformance of Hedging Short-Term Near-the-Money Put Options by a\nUnified Model\nWe train a unified model for all the short-term put options with maturity T ∈[5, 30] and moneyness\nK/S0 ∈[0.9, 1.1]. The distribution of data is shown in Table 19. We have 153433 training paths,\n36011 validation paths, and 43560 test paths in total.\nTable 19:\nThe number of paths of short-term close-to-the-money put options (T\n∈\n[5, 30], K/S0 ∈[0.9, 1.1]) in different maturity ranges and moneyness ranges.\nMaturity range\nTraining set\nValid set\nTest set\nMoneyness range\nTraining set\nValid set\nTest set\n[5, 15]\n57322\n14031\n16927\n[0.9, 0.95]\n49857\n12756\n14791\n[16, 21]\n39671\n9168\n11634\n(0.95, 1.0]\n47056\n13790\n15410\n[22, 30]\n56440\n12812\n14999\n(1.0, 1.05]\n39701\n7801\n10436\n-\n-\n-\n-\n(1.05, 1.1]\n16819\n1664\n2923\nIn the implementation of CU-RL method for short-term put options, the three networks are\nspecified the same as those in the short-term call option case. In Algorithm 2, the size of buffer Dk\nis 29988, the minibatch size n = 20000, and the initial value of the linearly decaying learning rate\nis 1e-7. The out-of-sample performance of CU-RL on the test data in both non-transaction cost\nand proportional transaction cost cases is shown in Table 20.\nThe panel A of Table 20 shows that: (i) CU-RL obtains the significantly highest mean final\nP&L among all the methods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the designated\nrisk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and the lowest VaR\nat 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggesting it can\neffectively minimize the tail risk measured at an alternative level; (iv) all the results with respect to\ntail risk measures are statistically significant, since all the confidence intervals of CU-RL are lower\nand have no overlap with those of other benchmark models.\nThe panel B of Table 20 shows that similar conclusion holds when transaction costs are con-\nsidered. Although the mean of final P&L falls and the risk measure rises due to transaction costs,\nCU-RL still obtains the significantly highest mean P&L and lowest tail risk among all the models.\n49\nTable 20: The mean, standard error, and tail risk of the final P&L of hedging short-term\nput options by the CU-RL method, the Black-Scholes, local volatility function, and SABR\ndelta hedging method calculated from an out-of-sample test set. The test set include all S&P\n500 short-term put options with T ∈[5, 30], K/S0 ∈[0.9, 1.1] traded on or after 10/01/2017 and\nexpired before 01/02/2018. The p-values are calculated from a one-sided t-test for related samples\nthat tests if the mean P&L of our method is higher than that of the benchmark method. 0.95-CI\nmeans 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001;\n** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n3.6391\n2.1169\n1.2713\n2.8813\nStd Err\n1.4954E-02\n1.1516E-02\n1.3597E-02\n1.5848E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n-0.3462\n0.2967\n2.8337\n0.1565\n0.95-CI of 0.95-VaR\n[-0.3491, -0.3422]\n[0.2501, 0.3555]\n[2.7215, 2.9420]\n[8.2989E-02, 0.2311]\n0.975-VaR\n-0.2232\n1.6854\n5.0178\n2.4963\n0.95-CI of 0.975-VaR\n[-0.2381, -0.2108]\n[1.5671, 1.8278]\n[4.7887, 5.2264]\n[2.2016, 2.7177]\n0.975-MS\n-3.0624E-02\n3.0683\n7.4019\n5.8128\n0.95-CI of 0.975-MS\n[-0.1380, 0.2908]\n[2.9316, 3.2132]\n[7.1735, 7.6450]\n[5.5032, 6.1951]\n0.95-CVaR\n0.4815\n2.2504\n5.7857\n3.9512\n0.95-CI of 0.95-CVaR\n[0.4086, 0.5624]\n[2.1449, 2.3651]\n[5.6220, 5.9502]\n[3.7296, 4.1748]\n0.975-CVaR\n1.2492\n3.6460\n7.8232\n6.8865\n0.95-CI of 0.975-CVaR\n[1.1070, 1.4046]\n[3.4992, 3.8027]\n[7.6186, 8.0282]\n[6.5428, 7.2275]\nPanel B: with 0.1% transaction cost\nMean\n2.4949\n0.4693\n-0.5903\n1.1193\nStd Err\n1.4396E-02\n1.0408E-02\n1.4632E-02\n1.7650E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n0.6014\n3.3338\n7.0026\n4.8350\n0.95-CI of 0.95-VaR\n[0.5210, 0.6527]\n[3.1943, 3.4723]\n[6.8557, 7.1900]\n[4.6088, 5.0868]\n0.975-VaR\n2.3465\n5.6212\n9.7243\n8.8841\n0.95-CI of 0.975-VaR\n[2.0971, 2.5911]\n[5.4690, 5.8033]\n[9.4652, 9.9380]\n[8.5287, 9.1957]\n0.975-MS\n5.2083\n7.6481\n12.2785\n13.3470\n0.95-CI of 0.975-MS\n[4.9034, 5.5251]\n[7.3692, 7.9166]\n[12.0182, 12.5933]\n[12.8422, 13.7619]\n0.95-CVaR\n3.5991\n6.2739\n10.5583\n10.5216\n0.95-CI of 0.95-CVaR\n[3.4086, 3.7708]\n[6.1303, 6.4243]\n[10.3660, 10.7509]\n[10.2091, 10.8206]\n0.975-CVaR\n5.9896\n8.1932\n12.9010\n14.4257\n0.95-CI of 0.975-CVaR\n[5.7212, 6.2719]\n[8.0094, 8.3915]\n[12.6551, 13.1424]\n[14.0018, 14.8322]\n50\n5.7\nPerformance of Hedging Short-Term Deep OTM Put Options by a Uni-\nfied Model\nWe train two unified models for two groups of short-term deep OTM put options, one for options\nwith K/S0 ∈(0.1, 0.8] and T ∈[5, 30], and another for options with K/S0 ∈(0.8, 0.9] and\nT ∈[5, 30]. The number of paths in these two groups distributed in each range of maturity is\nlisted in Table 21. For other groups of put options such as deep ITM put options, we do not train a\nTable 21: The number of paths of short-term deep OTM put options (T ∈[5, 30], K\nS0 ∈\n[0.1, 0.9]) in different maturity ranges and moneyness ranges.\nMaturity range\nK/S0 ∈(0.1, 0.8]\nK/S0 ∈(0.8, 0.9]\nTraining set\nValidation set\nTest set\nTraining set\nValidation set\nTest set\n[5, 15]\n12992\n4662\n5997\n30464\n6691\n8224\n(15, 21]\n6317\n2842\n3573\n13345\n3597\n4701\n(21, 30]\n9481\n3956\n4582\n18086\n4634\n5750\nTotal\n28790\n11460\n10830\n61895\n14922\n18675\nseparate model for them due to the small number of sample paths for these groups of options.\nIn the implementation of CU-RL method for short-term deep OTM put options, for the group\nof options with K/S0 ∈(0.1, 0.8], T ∈[5, 30], the number of hidden layers is 3 and the number\nof neurons in each layer is 64; for the group of options with K/S0 ∈(0.8, 0.9], T ∈[5, 30], the\nnumber of hidden layers is 9 and the number of neurons in each layer is 32. In Algorithm 2,\nthe size of buffer Dk is 29988. The minibatch size n = 10000 for the group of options with\nK/S0 ∈(0.1, 0.8], T ∈[5, 30] and n = 20000 for the group of options with K/S0 ∈(0.8, 0.9], T ∈\n[5, 30]. The initial value of the linearly decaying learning rate is 1e-5 and 1e-6 for the two groups,\nrespectively. The out-of-sample performance of CU-RL on the test data for these two groups in\nboth non-transaction cost and proportional transaction cost cases is shown in Table 22 and Table 23.\nFor short-term deep OTM put groups with K/S0 ∈(0.1, 0.8] and T ∈[5, 30], the panel A of\nTable 22 shows that the SABR model obtains the significantly highest mean and lowest risk of\nfinal P&L when there is no transaction costs. The panel B of Table 22 shows the results when\ntransaction costs are considered: (i) CU-RL obtains the significantly highest mean P&L; (ii) gaps\nbetween risk of CU-RL and SABR model has shrunk compared with the non-transaction costs\ncase; (iii) CU-RL obtains significantly higher mean and lower risk of final P&L than BS and LVF\nmodels.\nFor short-term deep OTM put groups with K/S0 ∈(0.8, 0.9] and T ∈[5, 30], the panel A of\nTable 23 shows that: (i) CU-RL obtains the significantly highest mean final P&L among all the\n51\nTable 22: The mean, standard error, and tail risk of the final P&L of hedging short-term deep\nOTM put options by the CU-RL method, the Black-Scholes, local volatility function, and\nSABR delta hedging method calculated from an out-of-sample test set. The test set include all\nS&P 500 short-term deep OTM put options with K/S0 ∈(0.1, 0.8], T ∈[5, 30] traded on or after\n10/01/2017 and expired before 01/02/2018. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n8.5582E-02\n7.2430E-02\n4.6072E-02\n8.9578E-02\nStd Err\n7.6920E-04\n6.6749E-04\n5.5973E-04\n8.1035E-04\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n1.0000\n0.95-VaR\n-1.8503E-02\n-1.3678E-02\n1.7931E-02\n-2.3806E-02\n0.95-CI of 0.95-VaR\n[-1.9034E-02, -1.8108E-02]\n[-1.4009E-02, -1.3326E-02]\n[1.7032E-02, 1.8527E-02]\n[-2.3857E-02, -2.3760E-02]\n0.975-VaR\n-1.3243E-02\n-1.0464E-02\n2.5295E-02\n-2.3239E-02\n0.95-CI of 0.975-VaR\n[-1.4181E-02, -1.1892E-02]\n[-1.0937E-02, -9.9875E-03]\n[2.4158E-02, 2.6366E-02]\n[-2.3329E-02, -2.3132E-02]\n0.975-MS\n-3.5757E-03\n-7.4580E-03\n3.3576E-02\n-2.2592E-02\n0.95-CI of 0.975-MS\n[-5.4143E-03, -2.0991E-03]\n[-7.9426E-03, -6.5728E-03]\n[3.1568E-02, 3.6246E-02]\n[-2.2753E-02, -2.2429E-02]\n0.95-CVaR\n-8.6098E-03\n-8.9487E-03\n3.0199E-02\n-2.2796E-02\n0.95-CI of 0.95-CVaR\n[-9.8438E-03, -6.6239E-03]\n[-9.4146E-03, -8.5024E-03]\n[2.8950E-02, 3.1760E-02]\n[-2.2916E-02, -2.2669E-02]\n0.975-CVaR\n-8.7025E-04\n-5.7024E-03\n3.9368E-02\n-2.2035E-02\n0.95-CI of 0.975-CVaR\n[-3.0705E-03, 3.2885E-03]\n[-6.3221E-03, -4.9219E-03]\n[3.7535E-02, 4.1911E-02]\n[-2.2214E-02, -2.1780E-02]\nPanel B: with 0.1% transaction cost\nMean\n8.9664E-02\n6.6259E-02\n3.1905E-02\n8.7802E-02\nStd Err\n8.3541E-04\n6.0998E-04\n4.7966E-04\n7.9536E-04\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n5.1955E-264∗∗∗\n0.95-VaR\n-2.0142E-02\n-1.2569E-02\n2.8042E-02\n-2.3095E-02\n0.95-CI of 0.95-VaR\n[-2.0407E-02, -1.9873E-02]\n[-1.2889E-02, -1.2190E-02]\n[2.6859E-02, 2.9196E-02]\n[-2.3161E-02, -2.3009E-02]\n0.975-VaR\n-1.7304E-02\n-8.9517E-03\n3.9573E-02\n-2.2343E-02\n0.95-CI of 0.975-VaR\n[-1.7880E-02, -1.6700E-02]\n[-9.3516E-03, -8.2934E-03]\n[3.8163E-02, 4.1121E-02]\n[-2.2465E-02, -2.2228E-02]\n0.975-MS\n-1.4809E-02\n-5.3823E-03\n5.1441E-02\n-2.1531E-02\n0.95-CI of 0.975-MS\n[-1.5073E-02, -1.4303E-02]\n[-6.1535E-03, -4.4011E-03]\n[4.9155E-02, 5.4390E-02]\n[-2.1692E-02, -2.1285E-02]\n0.95-CVaR\n-1.6585E-02\n-7.1078E-03\n4.7055E-02\n-2.1600E-02\n0.95-CI of 0.95-CVaR\n[-1.6914E-02, -1.6237E-02]\n[-7.6653E-03, -6.5500E-03]\n[4.5079E-02, 4.9624E-02]\n[-2.1800E-02, -2.1369E-02]\n0.975-CVaR\n-1.4122E-02\n-3.2974E-03\n6.0934E-02\n-2.0440E-02\n0.95-CI of 0.975-CVaR\n[-1.4509E-02, -1.3661E-02]\n[-4.0675E-03, -2.4065E-03]\n[5.7952E-02, 6.4633E-02]\n[-2.0781E-02, -1.9998E-02]\n52\nTable 23: The mean, standard error, and tail risk of the final P&L of hedging short-term deep\nOTM put options by the CU-RL method, the Black-Scholes, local volatility function, and\nSABR delta hedging method calculated from an out-of-sample test set. The test set include all\nS&P 500 short-term deep OTM put options with K/S0 ∈(0.8, 0.9], T ∈[5, 30] traded on or after\n10/01/2017 and expired before 01/02/2018. The p-values are calculated from a one-sided t-test\nfor related samples that tests if the mean P&L of our method is higher than that of the benchmark\nmethod. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4.\n*** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n0.4138\n0.3049\n0.1879\n0.4132\nStd Err\n2.6157E-03\n1.8834E-03\n1.5830E-03\n2.5488E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n7.7142E-03∗∗\n0.95-VaR\n-4.8771E-02\n-3.8981E-02\n6.0163E-02\n-4.9792E-02\n0.95-CI of 0.95-VaR\n[-5.0166E-02, -4.8090E-02]\n[-4.0157E-02, -3.7644E-02]\n[5.6466E-02, 6.3566E-02]\n[-5.0382E-02, -4.9470E-02]\n0.975-VaR\n-4.1106E-02\n-2.2767E-02\n0.1024\n-4.4632E-02\n0.95-CI of 0.975-VaR\n[-4.1961E-02, -3.9940E-02]\n[-2.4812E-02, -2.1465E-02]\n[9.6918E-02, 0.1083]\n[-4.5362E-02, -4.3686E-02]\n0.975-MS\n-2.8747E-02\n-1.0257E-02\n0.1574\n-2.8819E-02\n0.95-CI of 0.975-MS\n[-3.0709E-02, -2.5949E-02]\n[-1.3455E-02, -6.4147E-03]\n[0.1490, 0.1759]\n[-3.4076E-02, -2.6308E-02]\n0.95-CVaR\n-3.6316E-02\n-1.8801E-02\n0.1465\n-3.6995E-02\n0.95-CI of 0.95-CVaR\n[-3.7417E-02, -3.5206E-02]\n[-2.0315E-02, -1.7107E-02]\n[0.1373, 0.1565]\n[-3.8371E-02, -3.5450E-02]\n0.975-CVaR\n-2.7437E-02\n-5.8987E-03\n0.2149\n-2.6365E-02\n0.95-CI of 0.975-CVaR\n[-2.8966E-02, -2.6000E-02]\n[-7.8539E-03, -3.7092E-03]\n[0.2001, 0.2310]\n[-2.8647E-02, -2.3516E-02]\nPanel B: with 0.1% transaction cost\nMean\n0.4006\n0.2559\n0.1013\n0.3916\nStd Err\n2.6129E-03\n1.6459E-03\n1.3821E-03\n2.4645E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n1.7061E-109∗∗∗\n0.95-VaR\n-4.4230E-02\n-2.6262E-02\n0.1520\n-4.5208E-02\n0.95-CI of 0.95-VaR\n[-4.5117E-02, -4.2671E-02]\n[-2.7969E-02, -2.4354E-02]\n[0.1462, 0.1568]\n[-4.6047E-02, -4.4291E-02]\n0.975-VaR\n-3.1203E-02\n-1.1862E-02\n0.2186\n-2.9030E-02\n0.95-CI of 0.975-VaR\n[-3.3209E-02, -2.8028E-02]\n[-1.3490E-02, -9.5395E-03]\n[0.2063, 0.2286]\n[-3.3061E-02, -2.5331E-02]\n0.975-MS\n-1.7395E-02\n5.4970E-03\n0.3108\n-1.5243E-02\n0.95-CI of 0.975-MS\n[-1.8426E-02, -1.5570E-02]\n[1.9718E-03, 8.5926E-03]\n[0.2930, 0.3278]\n[-1.8050E-02, -7.8001E-03]\n0.95-CVaR\n-2.6874E-02\n-4.4017E-03\n0.2777\n-1.3720E-02\n0.95-CI of 0.95-CVaR\n[-2.8295E-02, -2.5459E-02]\n[-6.0792E-03, -2.3641E-03]\n[0.2652, 0.2912]\n[-1.7014E-02, -9.8549E-03]\n0.975-CVaR\n-1.5173E-02\n1.0600E-02\n0.3766\n1.2644E-02\n0.95-CI of 0.975-CVaR\n[-1.6950E-02, -1.3417E-02]\n[7.9409E-03, 1.3339E-02]\n[0.3583, 0.3977]\n[6.9763E-03, 1.9468E-02]\n53\nmodels; (ii) CU-RL obtains the lowest CVaR at 0.975 level, which is the designate risk measure in\nthe objective; (iii) CU-RL obtains the second lowest tail risk measured by other tail risk measures,\nand higher risk than those obtained by the SABR model. However, the confidence intervals of tail\nrisk of SABR model overlap with those of the CU-RL method. The panel B of Table 23 shows the\nresults when transaction costs are considered: (i) CU-RL obtains the significantly highest mean\nP&L and lowest risk except 0.95-VaR among all the models; (ii) CU-RL obtains the second lowest\nVaR at 0.95 level, which is higher than that obtained by the SABR model. However, the confidence\ninterval of VaR at 0.95 level of SABR model overlap with that of the CU-RL method.\nIt is clear from Table 20, Table 22, and Table 23 that CU-RL performs very well for all short-\nterm put options, fairly well for short-term deep OTM put groups with K/S0 ∈(0.8, 0.9] and\nT ∈[5, 30], and not so well for short-term deep OTM put groups with K/S0 ∈(0.1, 0.8] and\nT ∈[5, 30]. The number of training sample paths for the three groups of options are 153433,\n61890, and 28790, respectively, which may explain the difference of the performance of the CU-\nRL method for the three groups of put options.\n5.8\nPerformance of Zero Intermediate Reward\nWe consider a different reward function defined in (35), which we call the zero intermediate reward,\nto test whether the CU-RL method can still perform well without intermediate information about\nthe hedging error before maturity. We look into the performance of four unified CU-RL models,\nwhich are for all short-term near-the-money call options with T ∈[5, 30] and K/S0 ∈[0.9, 1.1],\nall short-term near-the-money put options with T ∈[5, 30] and K/S0 ∈[0.9, 1.1], all call options,\nand all put options, respectively.\nRt+1 =\n\n\n\n0,\nt = 0, · · · , T −2,\n−λ1\n\u0002\nω +\n1\n1−α max(−Wt+1 −ω, 0)\n\u0003\n+ λ2Wt+1,\nt = T −1.\n(35)\nFor the short-term near-the-money call/put options, we utilize the same value of hyperparame-\nters as those in the experiments with the asymmetric reward in (10), which is demonstrated in the\nprevious sections. The performance of the CU-RL method under zero intermediate reward for the\nshort-term near-the-money call (resp., put) options is shown in Table 24 (resp., Table 25).\nThe panel A of Table 24 and Table 25 share some similar results: (i) CU-RL obtains the sig-\nnificantly highest mean final P&L among all the methods; (ii) CU-RL obtains the lowest CVaR\nat 0.975 level, the designated risk measure in the total reward of CU-RL, the lowest MS at 0.975\nlevel, and the lowest VaR at 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95\n54\nTable 24: The mean, standard error, and tail risk of the final P&L of hedging short-term\ncall options by the CU-RL method under zero intermediate reward, the Black-Scholes, local\nvolatility function, and SABR delta hedging method calculated from an out-of-sample test\nset. The test set include all S&P 500 short-term call options with T ∈[5, 30], K/S0 ∈[0.9, 1.1]\ntraded on or after 10/01/2017 and expired before 01/02/2018. The p-values are calculated from a\none-sided t-test for related samples that tests if the mean P&L of our method is higher than that of\nthe benchmark method. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 =\n1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n2.2823\n-0.3079\n-1.0298\n0.7770\nStd Err\n2.1255E-02\n1.1242E-02\n1.4010E-02\n1.8853E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n1.5612\n4.0753\n5.9742\n4.4919\n0.95-CI of 0.95-VaR\n[1.5339, 1.5876]\n[4.0187, 4.1357]\n[5.8757, 6.0803]\n[4.3136, 4.6473]\n0.975-VaR\n2.0183\n4.9829\n7.5718\n6.5233\n0.95-CI of 0.975-VaR\n[1.9709, 2.0557]\n[4.9061, 5.0849]\n[7.4473, 7.6647]\n[6.3532, 6.7066]\n0.975-MS\n2.4958\n6.5480\n9.2724\n8.8325\n0.95-CI of 0.975-MS\n[2.4380, 2.5615]\n[6.3322, 6.7633]\n[9.0487, 9.5064]\n[8.5744, 9.0669]\n0.95-CVaR\n2.3147\n5.6511\n8.2637\n7.7263\n0.95-CI of 0.95-CVaR\n[2.2593, 2.3713]\n[5.5673, 5.7563]\n[8.1390, 8.3906]\n[7.5117, 7.9199]\n0.975-CVaR\n2.8765\n6.8327\n9.8537\n10.0016\n0.95-CI of 0.975-CVaR\n[2.8021, 2.9604]\n[6.7043, 6.9722]\n[9.6701, 10.0390]\n[9.7116, 10.3233]\nPanel B: with 0.1% transaction cost\nMean\n0.6826\n-2.3988\n-3.2881\n-2.1633\nStd Err\n2.4415E-02\n1.4498E-02\n1.8475E-02\n2.1290E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n4.4408\n7.3841\n9.8077\n9.5096\n0.95-CI of 0.95-VaR\n[4.4080, 4.4744]\n[7.3077, 7.4348]\n[9.7235, 9.9045]\n[9.3464, 9.6470]\n0.975-VaR\n4.9933\n8.3330\n11.2466\n12.4072\n0.95-CI of 0.975-VaR\n[4.9482, 5.0347]\n[8.2405, 8.4352]\n[11.1512, 11.3675]\n[12.1395, 12.5717]\n0.975-MS\n5.5183\n9.8437\n13.0815\n15.0653\n0.95-CI of 0.975-MS\n[5.4365, 5.5752]\n[9.6109, 10.0783]\n[12.7899, 13.3427]\n[14.7583, 15.4513]\n0.95-CVaR\n5.3392\n8.9888\n12.0782\n13.9373\n0.95-CI of 0.95-CVaR\n[5.2765, 5.4039]\n[8.9041, 9.0956]\n[11.9504, 12.1997]\n[13.6502, 14.1959]\n0.975-CVaR\n5.9848\n10.1843\n13.6890\n17.1279\n0.95-CI of 0.975-CVaR\n[5.8917, 6.0812]\n[10.0535, 10.3302]\n[13.4952, 13.8857]\n[16.7323, 17.5958]\n55\nTable 25: The mean, standard error, and tail risk of the final P&L of hedging short-term\nput options by the CU-RL method under zero intermediate reward, the Black-Scholes, local\nvolatility function, and SABR delta hedging method calculated from an out-of-sample test\nset. The test set include all S&P 500 short-term put options with T ∈[5, 30], K/S0 ∈[0.9, 1.1]\ntraded on or after 10/01/2017 and expired before 01/02/2018. The p-values are calculated from a\none-sided t-test for related samples that tests if the mean P&L of our method is higher than that of\nthe benchmark method. 0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 =\n1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n3.3823\n2.1169\n1.2713\n2.8813\nStd Err\n1.3178E-02\n1.1516E-02\n1.3597E-02\n1.5848E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n-0.3389\n0.2967\n2.8337\n0.1565\n0.95-CI of 0.95-VaR\n[-0.3453, -0.3286]\n[0.2501, 0.3555]\n[2.7215, 2.9420]\n[8.2989E-02, 0.2311]\n0.975-VaR\n-0.2076\n1.6854\n5.0178\n2.4963\n0.95-CI of 0.975-VaR\n[-0.2224, -0.1994]\n[1.5671, 1.8278]\n[4.7887, 5.2264]\n[2.2016, 2.7177]\n0.975-MS\n0.3872\n3.0683\n7.4019\n5.8128\n0.95-CI of 0.975-MS\n[8.7402E-02, 0.5821]\n[2.9316, 3.2132]\n[7.1735, 7.6450]\n[5.5032, 6.1951]\n0.95-CVaR\n0.5382\n2.2504\n5.7857\n3.9512\n0.95-CI of 0.95-CVaR\n[0.4625, 0.6242]\n[2.1449, 2.3651]\n[5.6220, 5.9502]\n[3.7296, 4.1748]\n0.975-CVaR\n1.3534\n3.6460\n7.8232\n6.8865\n0.95-CI of 0.975-CVaR\n[1.2013, 1.5114]\n[3.4992, 3.8027]\n[7.6186, 8.0282]\n[6.5428, 7.2275]\nPanel B: with 0.1% transaction cost\nMean\n2.2157\n0.4693\n-0.5903\n1.1193\nStd Err\n1.2139E-02\n1.0408E-02\n1.4632E-02\n1.7650E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n0.6401\n3.3338\n7.0026\n4.8350\n0.95-CI of 0.95-VaR\n[0.5642, 0.7139]\n[3.1943, 3.4723]\n[6.8557, 7.1900]\n[4.6088, 5.0868]\n0.975-VaR\n2.3640\n5.6212\n9.7243\n8.8841\n0.95-CI of 0.975-VaR\n[2.1802, 2.5743]\n[5.4690, 5.8033]\n[9.4652, 9.9380]\n[8.5287, 9.1957]\n0.975-MS\n5.0646\n7.6481\n12.2785\n13.3470\n0.95-CI of 0.975-MS\n[4.7650, 5.3493]\n[7.3692, 7.9166]\n[12.0182, 12.5933]\n[12.8422, 13.7619]\n0.95-CVaR\n3.4671\n6.2739\n10.5583\n10.5216\n0.95-CI of 0.95-CVaR\n[3.3021, 3.6385]\n[6.1303, 6.4243]\n[10.3660, 10.7509]\n[10.2091, 10.8206]\n0.975-CVaR\n5.6452\n8.1932\n12.9010\n14.4257\n0.95-CI of 0.975-CVaR\n[5.3870, 5.8671]\n[8.0094, 8.3915]\n[12.6551, 13.1424]\n[14.0018, 14.8322]\n56\nlevel, suggesting it can effectively minimize the tail risk measured at an alternative level; (iv) all\nthe results with respect to tail risk measures are statistically significant, since all the confidence\nintervals of CU-RL are lower and have no overlap with those of other benchmark models.\nThe panel B of Table 24 and Table 25 shows that similar conclusion holds when transaction\ncosts are considered. Although the mean of final P&L falls and the risk measure rises due to\ntransaction costs, CU-RL still obtains the significantly highest mean P&L and lowest tail risk\namong all the models.\nWe also demonstrate the performance of CU-RL under the zero intermediate reward for all\ncall/put options. The initial learning rate is 1e-4 for the group of call options and 5e-4 for the\ngroup of put options. Other hyperparameters are the same as those in the previous experiments\nwith asymmetric reward. The performance of CU-RL for all call (resp., put) options is presented\nin Table 26 (resp., Table 27).\nFor all call options, the panel A of Table 26 shows that: (i) CU-RL obtains the statistically\nsignificantly highest mean final P&L than the benchmark methods; (ii) CU-RL obtains the lowest\nCVaR at 0.975 level, the designated risk measure in the total reward of CU-RL, the lowest MS at\n0.975 level, and the lowest VaR at 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at\n0.95 level, suggesting it can effectively minimize the tail risk measured at an alternative level; (iv)\nall the results with respect to tail risk measures are statistically significant, since all the confidence\nintervals of CU-RL are lower and have no overlap with those of other benchmark models. The\npanel B of Table 26 shows that conclusion (i)-(v) holds when transaction costs are considered.\nAlthough the mean of final P&L falls and the risk measure rises due to transaction costs, CU-RL\nstill obtains the significantly highest mean P&L and lowest tail risk among all the models.\nFor all put options, the panel A of Table 27 shows that: (i) CU-RL obtains the statistically\nsignificantly highest mean final P&L than the benchmark methods; (ii) the SABR model obtains the\nlowest VaR at 0.95 level, and BS model obtains the lowest of other risk measures. The panel B of\nTable 27 shows the results when transaction costs are considered. CU-RL obtains the significantly\nhighest mean P&L and significantly lowest tail risk among all the models.\n5.9\nPerformance of Reward Divided by Initial Margin\nIf we are more concerned about the relative value of return, the reward function is correspondingly\ndefined as a ratio. We consider a naive case, in which the reward is divided by the initial margin.\n57\nTable 26: The mean, standard error, and tail risk of the final P&L of hedging all call options\nby the CU-RL method under zero intermediate reward, the Black-Scholes, local volatility\nfunction, and SABR delta hedging method calculated from an out-of-sample test set. The test\nset include all S&P 500 call options traded on or after 10/01/2017 and expired before 01/02/2018.\nThe p-values are calculated from a one-sided t-test for related samples that tests if the mean P&L of\nour method is higher than that of the benchmark method. 0.95-CI means 95% confidence interval.\nScientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n1.8178\n-1.0406\n-2.0096\n0.2089\nStd Err\n1.5774E-02\n7.9599E-03\n1.0556E-02\n1.2193E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n4.0525\n5.8561\n8.7729\n5.2496\n0.95-CI of 0.95-VaR\n[4.0010, 4.1030]\n[5.8085, 5.9103]\n[8.6952, 8.8562]\n[5.1924, 5.3053]\n0.975-VaR\n5.4518\n7.1287\n11.0766\n6.7506\n0.95-CI of 0.975-VaR\n[5.3833, 5.5354]\n[7.0642, 7.1983]\n[10.9690, 11.1896]\n[6.6765, 6.8438]\n0.975-MS\n6.8008\n8.2424\n12.4982\n8.5785\n0.95-CI of 0.975-MS\n[6.7074, 6.8981]\n[8.1687, 8.3331]\n[12.4096, 12.5886]\n[8.4534, 8.7365]\n0.95-CVaR\n6.0031\n7.4568\n11.2591\n8.1723\n0.95-CI of 0.95-CVaR\n[5.9372, 6.0746]\n[7.4043, 7.5127]\n[11.1849, 11.3346]\n[8.0410, 8.2998]\n0.975-CVaR\n7.3161\n8.4783\n12.7464\n10.4350\n0.95-CI of 0.975-CVaR\n[7.2162, 7.4155]\n[8.4106, 8.5385]\n[12.6687, 12.8228]\n[10.2362, 10.6633]\nPanel B: with 0.1% transaction cost\nMean\n-0.4011\n-3.4508\n-4.6257\n-2.7045\nStd Err\n1.8508E-02\n1.0031E-02\n1.3667E-02\n1.3308E-02\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n7.1001\n9.2068\n13.0101\n9.1282\n0.95-CI of 0.95-VaR\n[7.0291, 7.1711]\n[9.1579, 9.2491]\n[12.9186, 13.0887]\n[9.0536, 9.2073]\n0.975-VaR\n8.9425\n10.5362\n15.6054\n11.4791\n0.95-CI of 0.975-VaR\n[8.8347, 9.0652]\n[10.4645, 10.5985]\n[15.4899, 15.7274]\n[11.3261, 11.6428]\n0.975-MS\n10.7439\n11.6221\n17.3305\n14.7662\n0.95-CI of 0.975-MS\n[10.6113, 10.8734]\n[11.5416, 11.7006]\n[17.2319, 17.4243]\n[14.4888, 15.0669]\n0.95-CVaR\n9.6051\n10.8269\n15.8995\n14.0771\n0.95-CI of 0.95-CVaR\n[9.5224, 9.6937]\n[10.7770, 10.8816]\n[15.8114, 15.9940]\n[13.8530, 14.2852]\n0.975-CVaR\n11.3110\n11.8595\n17.6550\n18.0190\n0.95-CI of 0.975-CVaR\n[11.2006, 11.4316]\n[11.7940, 11.9177]\n[17.5565, 17.7463]\n[17.6693, 18.4025]\n58\nTable 27: The mean, standard error, and tail risk of the final P&L of hedging all put options\nby the CU-RL method under zero intermediate reward, the Black-Scholes, local volatility\nfunction, and SABR delta hedging method calculated from an out-of-sample test set. The test\nset include all S&P 500 put options traded on or after 10/01/2017 and expired before 01/02/2018.\nThe p-values are calculated from a one-sided t-test for related samples that tests if the mean P&L of\nour method is higher than that of the benchmark method. 0.95-CI means 95% confidence interval.\nScientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n2.9270\n1.7698\n1.0325\n2.5043\nStd Err\n1.1616E-02\n6.6780E-03\n6.4837E-03\n9.9172E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n0.3696\n-1.4677E-02\n1.0552\n-2.4172E-02\n0.95-CI of 0.95-VaR\n[0.3527, 0.3876]\n[-1.5031E-02, -1.4325E-02]\n[1.0077, 1.1090]\n[-2.4224E-02, -2.4111E-02]\n0.975-VaR\n1.0080\n0.1280\n2.9708\n0.2625\n0.95-CI of 0.975-VaR\n[0.9654, 1.0490]\n[0.1032, 0.1551]\n[2.8788, 3.0718]\n[0.2065, 0.3192]\n0.975-MS\n1.8201\n1.1783\n5.1877\n2.3654\n0.95-CI of 0.975-MS\n[1.7031, 2.0037]\n[1.0880, 1.2697]\n[5.0258, 5.3361]\n[2.1944, 2.5420]\n0.95-CVaR\n1.8967\n0.9016\n3.8585\n1.8332\n0.95-CI of 0.95-CVaR\n[1.8402, 1.9566]\n[0.8550, 0.9415]\n[3.7798, 3.9456]\n[1.7549, 1.9240]\n0.975-CVaR\n3.1783\n1.7958\n5.8443\n3.6586\n0.95-CI of 0.975-CVaR\n[3.0660, 3.2867]\n[1.7203, 1.8731]\n[5.7304, 5.9616]\n[3.5077, 3.8106]\nPanel B: with 0.1% transaction cost\nMean\n3.5599\n0.6398\n-0.2402\n1.3500\nStd Err\n1.6160E-02\n4.7636E-03\n6.3944E-03\n9.0985E-03\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n0.8111\n1.4115\n4.4806\n1.6581\n0.95-CI of 0.95-VaR\n[0.7839, 0.8352]\n[1.3590, 1.4621]\n[4.3757, 4.5848]\n[1.5897, 1.7050]\n0.975-VaR\n1.3976\n3.0216\n7.8318\n5.1990\n0.95-CI of 0.975-VaR\n[1.3821, 1.4144]\n[2.9267, 3.1172]\n[7.6875, 7.9599]\n[5.0026, 5.3900]\n0.975-MS\n1.9062\n5.2327\n10.6417\n9.4210\n0.95-CI of 0.975-MS\n[1.8538, 1.9473]\n[5.0877, 5.3966]\n[10.4548, 10.7951]\n[9.1458, 9.7027]\n0.95-CVaR\n1.8588\n3.9472\n8.6063\n6.8241\n0.95-CI of 0.95-CVaR\n[1.8205, 1.9002]\n[3.8594, 4.0215]\n[8.4893, 8.7219]\n[6.6475, 6.9837]\n0.975-CVaR\n2.6139\n5.8264\n11.2287\n10.7077\n0.95-CI of 0.975-CVaR\n[2.5419, 2.6846]\n[5.7068, 5.9436]\n[11.0766, 11.3523]\n[10.4892, 10.9313]\n59\nAt first, we define the reward as (36).\nRt+1 =\n\n\n\n−|Wt+1|\nM0\n· I{Wt+1<0},\nt = 0, · · · , T −2,\n−λ1\nh\nω +\n1\n1−α max(−Wt+1\nM0 −ω, 0)\ni\n+ λ2\nWt+1\nM0 ,\nt = T −1,\n(36)\nwhere M0 is the initial value in the margin account. The computation of the initial margin obeys\nthe following rule given by CBOE.\n• Rule for initial margin:\nWriters of uncovered calls must deposit/maintain 100% of the option proceeds plus 15%\nof the aggregate contract value (current index level × 100) minus the amount by which the\noption is out-of-the-money, if any, subject to a minimum for calls of option proceeds plus\n10% of the aggregate contract value.\nBriefly, in our experiment3,\nM0 = max{Z0 + 15%S0 −max(K −S0, 0), Z0 + 10%S0}.\n(37)\nAlso, we look into the performance on the short-term near-the-money call options with T ∈\n[5, 30] and K/S0 ∈[0.9, 1.1] as well as the whole dataset of call options.\nFor the short-term near-the-money call options, the network structure and hyperparameters in\nthe implementation of CU-RL are the same as those in the experiments with the asymmetric reward\nin (10), except that the initial value of the linearly decaying learning rate is 1e-7 for short-term call\noptions. The comparison of final P&L between different models is shown in Table 28.\nIn the implementation of CU-RL for all call options in margin formation, the size of buffer\nDk is 59990, the minibatch size n = 30000, the initial value of linearly decaying learning rate is\n1e-5, and the number of training epochs for the intializer is 3000, the networks are all feedforward\nneural networks with 9 hidden layers of 32 neurons, and the initializers are based on SABR delta.\nThe experimental results of these two groups are shown in Table 29.\nThe panel A of Table 28 shows that: (i) CU-RL obtains the significantly highest mean of\nrelative final P&L among all the methods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the\ndesignated risk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and the lowest\nVaR at 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggesting it can\neffectively minimize the tail risk measured at an alternative level; (iv) all the results with respect to\ntail risk measures are statistically significant, since all the confidence intervals of CU-RL are lower\nand have no overlap with those of other benchmark models.\n60\nTable 28: The mean, standard error, and tail risk of the relative final P&L of hedging short-\nterm call options by the CU-RL method under asymmetric reward divided by initial margin,\nthe Black-Scholes, local volatility function, and SABR delta hedging method calculated from\nan out-of-sample test set. The test set include all S&P 500 short-term call options with T ∈\n[5, 30], K/S0 ∈[0.9, 1.1] traded on or after 10/01/2017 and expired before 01/02/2018. The p-\nvalues are calculated from a one-sided t-test for related samples that tests if the mean P&L of our\nmethod is higher than that of the benchmark method. 0.95-CI means 95% confidence interval.\nScientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n3.1397E-03\n-2.6187E-04\n-1.8676E-03\n2.5142E-03\nStd Err\n3.1366E-05\n2.7744E-05\n3.4199E-05\n5.0769E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n2.3747E-33∗∗∗\n0.95-VaR\n3.2257E-03\n8.6222E-03\n1.3355E-02\n1.0296E-02\n0.95-CI of 0.95-VaR\n[3.1442E-03, 3.3243E-03]\n[8.4544E-03, 8.7870E-03]\n[1.3103E-02, 1.3596E-02]\n[9.9422E-03, 1.0636E-02]\n0.975-VaR\n4.9374E-03\n1.1915E-02\n1.8358E-02\n1.5684E-02\n0.95-CI of 0.975-VaR\n[4.7626E-03, 5.1704E-03]\n[1.1621E-02, 1.2294E-02]\n[1.7917E-02, 1.8788E-02]\n[1.5288E-02, 1.6205E-02]\n0.975-MS\n1.1671E-02\n1.6796E-02\n2.3744E-02\n2.2342E-02\n0.95-CI of 0.975-MS\n[1.0923E-02, 1.2452E-02]\n[1.6061E-02, 1.7439E-02]\n[2.3080E-02, 2.4471E-02]\n[2.1643E-02, 2.2977E-02]\n0.95-CVaR\n8.2889E-03\n1.3892E-02\n2.0444E-02\n1.9374E-02\n0.95-CI of 0.95-CVaR\n[7.9718E-03, 8.6364E-03]\n[1.3630E-02, 1.4243E-02]\n[2.0074E-02, 2.0816E-02]\n[1.8764E-02, 1.9932E-02]\n0.975-CVaR\n1.2679E-02\n1.7798E-02\n2.5396E-02\n2.6081E-02\n0.95-CI of 0.975-CVaR\n[1.2094E-02, 1.3286E-02]\n[1.7382E-02, 1.8218E-02]\n[2.4840E-02, 2.5936E-02]\n[2.5234E-02, 2.7098E-02]\nPanel B: with 0.1% transaction cost\nMean\n-1.0952E-03\n-4.9026E-03\n-6.8922E-03\n-4.5536E-03\nStd Err\n3.2253E-05\n3.3791E-05\n4.3422E-05\n5.5580E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n9.1583E-03\n1.6725E-02\n2.3106E-02\n2.2920E-02\n0.95-CI of 0.95-VaR\n[8.9951E-03, 9.3405E-03]\n[1.6476E-02, 1.6946E-02]\n[2.2805E-02, 2.3380E-02]\n[2.2516E-02, 2.3439E-02]\n0.975-VaR\n1.5522E-02\n2.0508E-02\n2.8101E-02\n3.1004E-02\n0.95-CI of 0.975-VaR\n[1.4879E-02, 1.6623E-02]\n[2.0158E-02, 2.0847E-02]\n[2.7619E-02, 2.8581E-02]\n[3.0262E-02, 3.1798E-02]\n0.975-MS\n2.2954E-02\n2.5189E-02\n3.3416E-02\n3.9520E-02\n0.95-CI of 0.975-MS\n[2.2134E-02, 2.3941E-02]\n[2.4538E-02, 2.5899E-02]\n[3.2759E-02, 3.4164E-02]\n[3.8745E-02, 4.0528E-02]\n0.95-CVaR\n1.7806E-02\n2.2421E-02\n3.0336E-02\n3.6213E-02\n0.95-CI of 0.95-CVaR\n[1.7355E-02, 1.8300E-02]\n[2.2140E-02, 2.2793E-02]\n[2.9944E-02, 3.0731E-02]\n[3.5335E-02, 3.7005E-02]\n0.975-CVaR\n2.4329E-02\n2.6536E-02\n3.5446E-02\n4.5898E-02\n0.95-CI of 0.975-CVaR\n[2.3716E-02, 2.4973E-02]\n[2.6100E-02, 2.6988E-02]\n[3.4860E-02, 3.6033E-02]\n[4.4740E-02, 4.7399E-02]\n61\nThe panel B of Table 28 shows that similar conclusion holds when transaction costs are con-\nsidered. Although the mean of final P&L falls and the risk measure rises due to transaction costs,\nCU-RL still obtains the significantly highest mean P&L and lowest tail risk among all the models.\nTable 29: The mean, standard error, and tail risk of the relative final P&L of hedging all\ncall options by the CU-RL method under asymmetric reward divided by initial margin, the\nBlack-Scholes, local volatility function, and SABR delta hedging method calculated from an\nout-of-sample test set. The test set include all S&P 500 call options traded on or after 10/01/2017\nand expired before 01/02/2018. The p-values are calculated from a one-sided t-test for related\nsamples that tests if the mean P&L of our method is higher than that of the benchmark method.\n0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4. *** : p <\n0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n2.3970E-03\n-1.3067E-03\n-3.3349E-03\n1.4441E-03\nStd Err\n2.5146E-05\n1.7018E-05\n2.2938E-05\n3.1437E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n7.3631E-263∗∗∗\n0.95-VaR\n7.2071E-03\n9.7598E-03\n1.6684E-02\n8.4188E-03\n0.95-CI of 0.95-VaR\n[7.1301E-03, 7.2933E-03]\n[9.6739E-03, 9.8307E-03]\n[1.6503E-02, 1.6842E-02]\n[8.3140E-03, 8.5129E-03]\n0.975-VaR\n9.1565E-03\n1.1937E-02\n2.1775E-02\n1.3115E-02\n0.95-CI of 0.975-VaR\n[9.0113E-03, 9.3224E-03]\n[1.1824E-02, 1.2038E-02]\n[2.1483E-02, 2.2105E-02]\n[1.2821E-02, 1.3462E-02]\n0.975-MS\n1.4802E-02\n1.4700E-02\n2.7850E-02\n2.0665E-02\n0.95-CI of 0.975-MS\n[1.4366E-02, 1.5349E-02]\n[1.4456E-02, 1.4964E-02]\n[2.7488E-02, 2.8264E-02]\n[2.0009E-02, 2.1370E-02]\n0.95-CVaR\n1.2538E-02\n1.3466E-02\n2.3992E-02\n1.8755E-02\n0.95-CI of 0.95-CVaR\n[1.2319E-02, 1.2774E-02]\n[1.3322E-02, 1.3614E-02]\n[2.3754E-02, 2.4245E-02]\n[1.8273E-02, 1.9236E-02]\n0.975-CVaR\n1.7064E-02\n1.6195E-02\n2.9148E-02\n2.7358E-02\n0.95-CI of 0.975-CVaR\n[1.6659E-02, 1.7477E-02]\n[1.5994E-02, 1.6422E-02]\n[2.8804E-02, 2.9464E-02]\n[2.6594E-02, 2.8229E-02]\nPanel B: with 0.1% transaction cost\nMean\n1.0003E-03\n-6.0007E-03\n-8.4565E-03\n-4.7971E-03\nStd Err\n4.1182E-05\n2.0696E-05\n2.9907E-05\n3.4930E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n1.1730E-02\n1.7711E-02\n2.7216E-02\n1.9514E-02\n0.95-CI of 0.95-VaR\n[1.1680E-02, 1.1793E-02]\n[1.7612E-02, 1.7811E-02]\n[2.6998E-02, 2.7432E-02]\n[1.9148E-02, 1.9861E-02]\n0.975-VaR\n1.4023E-02\n2.0756E-02\n3.3764E-02\n2.9338E-02\n0.95-CI of 0.975-VaR\n[1.3819E-02, 1.4307E-02]\n[2.0564E-02, 2.0921E-02]\n[3.3387E-02, 3.4175E-02]\n[2.8814E-02, 3.0036E-02]\n0.975-MS\n2.4669E-02\n2.4463E-02\n4.0843E-02\n4.0211E-02\n0.95-CI of 0.975-MS\n[2.3959E-02, 2.5348E-02]\n[2.4157E-02, 2.4774E-02]\n[4.0344E-02, 4.1297E-02]\n[3.9400E-02, 4.1280E-02]\n0.95-CVaR\n2.0243E-02\n2.2499E-02\n3.6241E-02\n3.7885E-02\n0.95-CI of 0.95-CVaR\n[1.9858E-02, 2.0617E-02]\n[2.2320E-02, 2.2685E-02]\n[3.5932E-02, 3.6550E-02]\n[3.7120E-02, 3.8634E-02]\n0.975-CVaR\n2.7901E-02\n2.6014E-02\n4.2498E-02\n5.1933E-02\n0.95-CI of 0.975-CVaR\n[2.7268E-02, 2.8635E-02]\n[2.5765E-02, 2.6268E-02]\n[4.2083E-02, 4.2897E-02]\n[5.0711E-02, 5.3279E-02]\nThe panel A of Table 29 shows that: (i) CU-RL obtains the significantly highest mean of\nrelative final P&L among all the methods; (ii) CU-RL obtains the lowest VaR at 0.95 and 0.975\nlevel, and CVaR at 0.95 level, while BS model obtains the lowest MS and CVaR at 0.975 level; (iii)\nCU-RL obtains these lowest risk measures with statistically significance at 95% level. The panel\nB of Table 29 shows the results (i)-(iii) still holds when transaction costs are considered.\nWe also define a relative reward in (38), which always keeps zero unless the option matures.\n62\nRt+1 =\n\n\n\n0,\nt = 0, · · · , T −2,\n−λ1\nh\nω +\n1\n1−α max(−Wt+1\nM0 −ω, 0)\ni\n+ λ2\nWt+1\nM0 ,\nt = T −1,\n(38)\nwhere M0 is the initial value in the margin account. The initial margin is still computed following\nthe rule in (37).\nIn the implementation of CU-RL for short-term near-the-money call options in margin for-\nmation with zero intermediate reward in (38), the size of buffer Dk is 29988, the minibatch size\nn = 20000, and the initial value of linearly decaying learning rate is 1e-6 for the non-transaction\ncost case and 1e-5 for the proportional transaction cost case, the networks are all feedforward neu-\nral networks with 9 hidden layers of 32 neurons, and the initializers are based on SABR delta. The\nnumbers of training epochs for all initializers are 2000. The comparison of final P&L between\ndifferent models is shown in Table 30.\nIn the implementation of CU-RL for all call options in margin formation with zero intermediate\nreward in (38), the size of buffer Dk is 59990, the minibatch size n = 60000, the numbers of\ntraining epochs for the initializers are 2000, and the initial value of linearly decaying learning\nrate is 1e-9 for the non-transaction cost case and 1e-8 for the proportional transaction cost case.\nThe networks are all feedforward neural networks with 9 hidden layers of 32 neurons, and the\ninitializers are based on Black-Scholes delta. The experimental results of these two groups are\nshown in Table 31.\nThe panel A of Table 30 shows that: (i) CU-RL obtains the significantly highest mean of\nrelative final P&L among all the methods; (ii) CU-RL obtains the lowest CVaR at 0.975 level, the\ndesignated risk measure in the total reward of CU-RL, the lowest MS at 0.975 level, and the lowest\nVaR at 0.975 level; (iii) CU-RL obtains the lowest VaR and CVaR at 0.95 level, suggesting it can\neffectively minimize the tail risk measured at an alternative level; (iv) all the results with respect to\ntail risk measures are statistically significant, since all the confidence intervals of CU-RL are lower\nand have no overlap with those of other benchmark models.\nThe panel B of Table 30 shows that similar conclusion holds when transaction costs are con-\nsidered. Although the mean of final P&L falls and the risk measure rises due to transaction costs,\nCU-RL still obtains the significantly highest mean P&L and lowest tail risk among all the models.\nThe panel A of Table 31 shows that: (i) CU-RL’s mean of relative final P&L is higher than\nBS and LVF model but lower than SABR model; (ii) the SABR model obtains the lowest VaR at\n0.95 level while CU-RL obtains the significantly lowest tail risk measured by other risk measures.\nThe panel B of Table 31 shows the results when transaction costs are considered. CU-RL has the\nsignificantly highest mean of final relative P&L while obtaining the significantly lowest tail risk.\n63\nTable 30: The mean, standard error, and tail risk of the relative final P&L of hedging short-\nterm call options by the CU-RL method under zero intermediate reward divided by initial\nmargin, the Black-Scholes, local volatility function, and SABR delta hedging method calcu-\nlated from an out-of-sample test set. The test set include all S&P 500 short-term call options\nwith T ∈[5, 30], K/S0 ∈[0.9, 1.1] traded on or after 10/01/2017 and expired before 01/02/2018.\nThe p-values are calculated from a one-sided t-test for related samples that tests if the mean P&L of\nour method is higher than that of the benchmark method. 0.95-CI means 95% confidence interval.\nScientific notation: 1.23E-4 = 1.23 × 10−4. *** : p < 0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n7.3005E-03\n-2.6187E-04\n-1.8676E-03\n2.5142E-03\nStd Err\n6.7308E-05\n2.7744E-05\n3.4199E-05\n5.0769E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n2.8653E-03\n8.6222E-03\n1.3355E-02\n1.0296E-02\n0.95-CI of 0.95-VaR\n[2.8131E-03, 2.9220E-03]\n[8.4544E-03, 8.7870E-03]\n[1.3103E-02, 1.3596E-02]\n[9.9422E-03, 1.0636E-02]\n0.975-VaR\n3.9160E-03\n1.1915E-02\n1.8358E-02\n1.5684E-02\n0.95-CI of 0.975-VaR\n[3.8367E-03, 3.9954E-03]\n[1.1621E-02, 1.2294E-02]\n[1.7917E-02, 1.8788E-02]\n[1.5288E-02, 1.6205E-02]\n0.975-MS\n5.1041E-03\n1.6796E-02\n2.3744E-02\n2.2342E-02\n0.95-CI of 0.975-MS\n[4.9795E-03, 5.2856E-03]\n[1.6061E-02, 1.7439E-02]\n[2.3080E-02, 2.4471E-02]\n[2.1643E-02, 2.2977E-02]\n0.95-CVaR\n5.2750E-03\n1.3892E-02\n2.0444E-02\n1.9374E-02\n0.95-CI of 0.95-CVaR\n[5.0914E-03, 5.4721E-03]\n[1.3630E-02, 1.4243E-02]\n[2.0074E-02, 2.0816E-02]\n[1.8764E-02, 1.9932E-02]\n0.975-CVaR\n7.2227E-03\n1.7798E-02\n2.5396E-02\n2.6081E-02\n0.95-CI of 0.975-CVaR\n[6.8975E-03, 7.5695E-03]\n[1.7382E-02, 1.8218E-02]\n[2.4840E-02, 2.5936E-02]\n[2.5234E-02, 2.7098E-02]\nPanel B: with 0.1% transaction cost\nMean\n3.0086E-03\n-4.9026E-03\n-6.8922E-03\n-4.5536E-03\nStd Err\n7.0405E-05\n3.3791E-05\n4.3422E-05\n5.5580E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n0.95-VaR\n8.9019E-03\n1.6725E-02\n2.3106E-02\n2.2920E-02\n0.95-CI of 0.95-VaR\n[8.8369E-03, 8.9762E-03]\n[1.6476E-02, 1.6946E-02]\n[2.2805E-02, 2.3380E-02]\n[2.2516E-02, 2.3439E-02]\n0.975-VaR\n1.0468E-02\n2.0508E-02\n2.8101E-02\n3.1004E-02\n0.95-CI of 0.975-VaR\n[1.0263E-02, 1.0687E-02]\n[2.0158E-02, 2.0847E-02]\n[2.7619E-02, 2.8581E-02]\n[3.0262E-02, 3.1798E-02]\n0.975-MS\n1.5126E-02\n2.5189E-02\n3.3416E-02\n3.9520E-02\n0.95-CI of 0.975-MS\n[1.4462E-02, 1.5855E-02]\n[2.4538E-02, 2.5899E-02]\n[3.2759E-02, 3.4164E-02]\n[3.8745E-02, 4.0528E-02]\n0.95-CVaR\n1.3572E-02\n2.2421E-02\n3.0336E-02\n3.6213E-02\n0.95-CI of 0.95-CVaR\n[1.3235E-02, 1.3909E-02]\n[2.2140E-02, 2.2793E-02]\n[2.9944E-02, 3.0731E-02]\n[3.5335E-02, 3.7005E-02]\n0.975-CVaR\n1.7635E-02\n2.6536E-02\n3.5446E-02\n4.5898E-02\n0.95-CI of 0.975-CVaR\n[1.6995E-02, 1.8240E-02]\n[2.6100E-02, 2.6988E-02]\n[3.4860E-02, 3.6033E-02]\n[4.4740E-02, 4.7399E-02]\n64\nTable 31: The mean, standard error, and tail risk of the relative final P&L of hedging all call\noptions by the CU-RL method under zero intermediate reward divided by initial margin, the\nBlack-Scholes, local volatility function, and SABR delta hedging method calculated from an\nout-of-sample test set. The test set include all S&P 500 call options traded on or after 10/01/2017\nand expired before 01/02/2018. The p-values are calculated from a one-sided t-test for related\nsamples that tests if the mean P&L of our method is higher than that of the benchmark method.\n0.95-CI means 95% confidence interval. Scientific notation: 1.23E-4 = 1.23 × 10−4. *** : p <\n0.001; ** : p < 0.01; ∗: p < 0.05.\nCU-RL\nTraditional Model\nBS Model\nLVF Model\nSABR Model\nPanel A: without transaction cost\nMean\n-1.2085E-04\n-1.3067E-03\n-3.3349E-03\n1.4441E-03\nStd Err\n1.8511E-05\n1.7018E-05\n2.2938E-05\n3.1437E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n1.0000\n0.95-VaR\n8.4498E-03\n9.7598E-03\n1.6684E-02\n8.4188E-03\n0.95-CI of 0.95-VaR\n[8.3976E-03, 8.5019E-03]\n[9.6739E-03, 9.8307E-03]\n[1.6503E-02, 1.6842E-02]\n[8.3140E-03, 8.5129E-03]\n0.975-VaR\n9.8070E-03\n1.1937E-02\n2.1775E-02\n1.3115E-02\n0.95-CI of 0.975-VaR\n[9.7235E-03, 9.8718E-03]\n[1.1824E-02, 1.2038E-02]\n[2.1483E-02, 2.2105E-02]\n[1.2821E-02, 1.3462E-02]\n0.975-MS\n1.1330E-02\n1.4700E-02\n2.7850E-02\n2.0665E-02\n0.95-CI of 0.975-MS\n[1.1205E-02, 1.1449E-02]\n[1.4456E-02, 1.4964E-02]\n[2.7488E-02, 2.8264E-02]\n[2.0009E-02, 2.1370E-02]\n0.95-CVaR\n1.0501E-02\n1.3466E-02\n2.3992E-02\n1.8755E-02\n0.95-CI of 0.95-CVaR\n[1.0420E-02, 1.0573E-02]\n[1.3322E-02, 1.3614E-02]\n[2.3754E-02, 2.4245E-02]\n[1.8273E-02, 1.9236E-02]\n0.975-CVaR\n1.1959E-02\n1.6195E-02\n2.9148E-02\n2.7358E-02\n0.95-CI of 0.975-CVaR\n[1.1850E-02, 1.2077E-02]\n[1.5994E-02, 1.6422E-02]\n[2.8804E-02, 2.9464E-02]\n[2.6594E-02, 2.8229E-02]\nPanel B: with 0.1% transaction cost\nMean\n-4.7287E-03\n-6.0007E-03\n-8.4565E-03\n-4.7971E-03\nStd Err\n1.9512E-05\n2.0696E-05\n2.9907E-05\n3.4930E-05\nP-Value\n0.0000E+00∗∗∗\n0.0000E+00∗∗∗\n2.8414E-02∗\n0.95-VaR\n1.5313E-02\n1.7711E-02\n2.7216E-02\n1.9514E-02\n0.95-CI of 0.95-VaR\n[1.5243E-02, 1.5385E-02]\n[1.7612E-02, 1.7811E-02]\n[2.6998E-02, 2.7432E-02]\n[1.9148E-02, 1.9861E-02]\n0.975-VaR\n1.7085E-02\n2.0756E-02\n3.3764E-02\n2.9338E-02\n0.95-CI of 0.975-VaR\n[1.6993E-02, 1.7180E-02]\n[2.0564E-02, 2.0921E-02]\n[3.3387E-02, 3.4175E-02]\n[2.8814E-02, 3.0036E-02]\n0.975-MS\n1.8970E-02\n2.4463E-02\n4.0843E-02\n4.0211E-02\n0.95-CI of 0.975-MS\n[1.8838E-02, 1.9086E-02]\n[2.4157E-02, 2.4774E-02]\n[4.0344E-02, 4.1297E-02]\n[3.9400E-02, 4.1280E-02]\n0.95-CVaR\n1.8034E-02\n2.2499E-02\n3.6241E-02\n3.7885E-02\n0.95-CI of 0.95-CVaR\n[1.7929E-02, 1.8133E-02]\n[2.2320E-02, 2.2685E-02]\n[3.5932E-02, 3.6550E-02]\n[3.7120E-02, 3.8634E-02]\n0.975-CVaR\n1.9948E-02\n2.6014E-02\n4.2498E-02\n5.1933E-02\n0.95-CI of 0.975-CVaR\n[1.9804E-02, 2.0109E-02]\n[2.5765E-02, 2.6268E-02]\n[4.2083E-02, 4.2897E-02]\n[5.0711E-02, 5.3279E-02]\n65\n6\nConclusion\nIn conclusion, we propose a contract-unified reinforcement learning (CU-RL) algorithm for option\nhedging. It is contract-unified in the sense that it provides a unified hedging strategy for hedging\nall options contracts with different initial states such as initial stock prices and different contract\nparameters such as maturities and strikes.\nWe formulate the hedging problem as a reinforcement learning problem that maximizes a\nweighted sum of the negative CVaR and expectation of the final P&L of an option contract. The\nVaR and CVaR of final P&L for an option contract depend on the initial state of the option. The\nCU-RL algorithm solves the reinforcement learning problem and the estimation of the VaR of the\nfinal P&L simultaneously by extending the PPO algorithm. A key innovation of the CU-RL al-\ngorithm is to represent the VaR of the final P&L of an option contract by a neural network with\nthe initial state of the option contract as input. The neural network allows the CU-RL algorithm to\ntrain a unified hedging function that applies to an option contract with any initial state.\nFor the first time in the literature, we train a risk sensitive contract-unified hedging model using\nonly the historical market price of S&P 500 index and index options. Comprehensive empirical\nresults demonstrate the effectiveness and robustness of the CU-RL model. Compared with the BS\nand SABR delta hedging methods and a minimum variance hedging method, the CU-RL approach\nachieves significantly higher mean of P&L and lower tail risk in most empirical experiments.\nThe performance of CU-RL remains stable in the presence of transaction costs and alternative\ndefinitions of reward in the problem formulation.\nAlthough we demonstrate the CU-RL approach by European stock option, the approach can\nbe extended in a straightforward way for hedging general European style derivatives with possibly\nmultiple underlying assets.\nEndnotes\n1. The parameters are obtained by fitting the GARCH(1, 1) model to the historical data of S&P\n500 index from 03/05/2013 to 11/16/2017 assuming r = 0.03/365. S0 is the adjusted closing price\nof S&P 500 index on 11/16/2017, and the initial volatility σ1 is computed from the data and model\nparameter.\n2. The parameters are obtained from fitting the GARCH model to the adjusted closing price of\nS&P 500 index from 01/02/2008 to 12/31/2017, assuming r = 0.03/365.\n3. We assume that one option targets one share of underlying such that the aggregate contract\n66\nvalue is current index level × 1.\nAcknowledgement\nXianhua Peng is partially supported by the Natural Science Foundation of Shenzhen (Grant No.\nJCYJ20190813104607549).\nReferences\nAbbeel, P., Jordan, M., Levine, S., Moritz, P. and Schulman, J. (2015). Trust region policy optimization,\nProceedings of the 32nd International Conference on Machine Learning, Vol. 3, pp. 1889–1897.\nAndersen, L. and Andreasen, J. (2000). Jump-diffusion processes: volatility smile fitting and numerical\nmethods for option pricing, Review of Derivatives Research 4(3): 231–262.\nBakshi, G., Cao, C. and Chen, Z. (1997). Empirical performance of alternative option pricing models, The\nJournal of Finance 52(5): 2003–2049.\nBakshi, G., Cao, C. and Chen, Z. (2000). Pricing and hedging long-term options, Journal of Econometrics\n94(1): 277–318.\nBasak, S. and Chabakauri, G. (2012). Dynamic hedging in incomplete markets: a simple solution, The\nReview of Financial Studies 25(6): 1845–1896.\nBasel Committee on Banking Supervision (2019). Minimal capital requirement for market risk, Bank for\nInternational Settlement, Basel, Switzland.\nBertsimas, D., Kogan, L. and Lo, A. W. (2001). Hedging derivative securities and incomplete markets: an\nϵ-arbitrage approach, Operations Research 49(3): 372–397.\nBlack, F. and Scholes, M. (1973). The pricing of options and corporate liabilities, The Journal of Political\nEconomy 81: 637–654.\nBorkar, V. S. (2001). A sensitivity formula for risk-sensitive cost and the actor-critic algorithm, Systems and\nControl Letters 44(5): 339–346.\nBorkar, V. S. (2002). Q-learning for risk-sensitive control, Mathematics of Operations Research 27(2): 294–\n311.\nBuehler, H., Gonon, L., Teichmann, J. and Wood, B. (2019).\nDeep hedging, Quantitative Finance\n19(8): 1271–1291.\nBuehler, H., Murray, P. and Wood, B. (2023). Deep bellman hedging. arXiv, preprint, https://arxiv.\narg/abs/2207.00932.\n67\nCao, J., Chen, J., Hull, J. and Poulos, Z. (2021). Deep hedging of derivatives using reinforcement learning,\nJournal of Financial Data Science 3(1): 10–27.\nCarbonneau, A. and Godin, F. (2021). Equal risk pricing of derivatives with deep hedging, Quantitative\nFinance 21(4): 593–608.\nChen, H., Didisheim, A. and Scheidegger, S. (2021). Deep structural estimation: with an application to\noption pricing. arXiv, preprint, https://arxiv.arg/abs/2102.09209.\nChow, Y., Tamar, A., Mannor, S. and Pavone, M. (2015). Risk-sensitive and robust decision-making: A\nCVaR optimization approach, Advances in Neural Information Processing Systems, Vol. 2015-Janua,\npp. 1522–1530.\nCoache, A. and Jaimungal, S. (2024). Reinforcement learning with dynamic convex risk measures, Mathe-\nmatical Finance 34(2): 557–587.\nCoache, A., Jaimungal, S. and Cartea, A. (2023). Conditionally elicitable dynamic risk measures for deep\nreinforcement learning, SIAM Journal on Financial Mathematics 14(4): 1249–1289.\nDu, J., Jin, M., Kolm, P. N., Ritter, G., Wang, Y. and Zhang, B. (2020). Deep reinforcement learning for\noption replication and hedging, The Journal of Financial Data Science 2(4): 44–57.\nDuffie, D. and Richardson, H. R. (1991). Mean-variance hedging in continuous time, The Annals of Applied\nProbability 1(1): 1 – 15.\nDupire, B. (1994). Pricing with a smile, Risk 7: 1–10.\nFecamp, S., Mikael, J. and Warin, X. (2021). Deep learning for discrete-time hedging in incomplete markets,\nJournal of computational Finance 25(2): 51–85.\nFujimoto, S., van Hoof, H. and Meger, D. (2018). Addressing function approximation rrror in actor-critic\nmethods, in J. Dy and A. Krause (eds), Proceedings of the 35th International Conference on Machine\nLearning, Vol. 80 of Proceedings of Machine Learning Research, PMLR, pp. 1587–1596.\nHagan, P. S., Kumar, D., Lesniewski, A. S. and Woodward, D. E. (2002). Managing smile risk, The Best of\nWilmott 1: 249–296.\nHalperin, I. (2020).\nQLBS: Q-learner in the black-scholes(-merton) worlds, Journal of Derivatives\n28(1): 99–122.\nHeston, S. L. (1993). A closed-form solution for options with stochastic volatility with applications to bond\nand currency options, The Review of Financial Studies 6(2): 327–343.\nHeston, S. L. and Nandi, S. (2000). A closed-form GARCH option valuation model, The Review of Financial\nStudies 13(3): 585–625.\nHull, J. and White, A. (2017). Optimal delta hedging for options, Journal of Banking and Finance 82: 180–\n190.\nHutchinson, J. M., Lo, A. W. and Poggio, T. (1994). A nonparametric approach to pricing and hedging\nderivative securities via learning networks, The Journal of Finance 49(3): 851–889.\n68\nIancu, D. A., Petrik, M. and Subramanian, D. (2015). Tight approximations of dynamic risk measures,\nMathematics of Operations Research 40(3): 655–682.\nKolm, P. N. and Ritter, G. (2019). Dynamic replication and hedging: a reinforcement learning approach,\nJournal of Financial Data Science 1(1): 159–171.\nKou, S. and Peng, X. (2016). On the measurement of economic tail risk, Operations Research 64(5): 1056–\n1072.\nLillicrap, T. P., Hunt, J. J., Pritzel, A., Heess, N., Erez, T., Tassa, Y., Silver, D. and Wierstra, D. (2019). Con-\ntinuous control with deep reinforcement learning. arXiv, preprint, https://arxiv.arg/abs/\n1509.02971.\nLimmer, Y. and Horvath, B. (2023). Robust hedging GANs. arXiv, preprint, https://arxiv.org/\nabs/2307.02310.\nLütkebohmert, E., Schmidt, T. and Sester, J. (2022).\nRobust deep hedging, Quantitative Finance\n22(8): 1465–1480.\nMarzban, S., Delage, E. and Li, J. Y.-M. (2023). Deep reinforcement learning for option pricing and hedging\nunder dynamic expectile risk measures, Quantitative Finance 23(10): 1411–1430.\nMikkilä, O. and Kanniainen, J. (2023). Empirical deep hedging, Quantitative Finance 23(1): 111–122.\nMnih, V., Kavukcuoglu, K., Silver, D., Rusu, A. A., Veness, J., Bellemare, M. G., Graves, A., Riedmiller,\nM., Fidjeland, A. K., Ostrovski, G., Petersen, S., Beattie, C., Sadik, A., Antonoglou, I., King, H.,\nKumaran, D., Wierstra, D., Legg, S. and Hassabis, D. (2015). Human-level control through deep\nreinforcement learning, Nature 518(7540): 529–533.\nMorimurat, T., Sugiyama, M., Kashima, H., Hachiya, H. and Tanaka, T. (2010). Nonparametric return\ndistribution approximation for reinforcement learning, ICML 2010 - Proceedings, 27th International\nConference on Machine Learning, pp. 799–806.\nMurray, P., Wood, B., Buehler, H., Wiese, M. and Pakkanen, M. S. (2022). Deep hedging: continuous\nreinforcement learning for hedging of general portfolios across multiple risk aversions, 3rd ACM In-\nternational Conference on AI in Finance 1: 361–368.\nNian, K., Coleman, T. F. and Li, Y. (2021). Learning sequential option hedging models from market data,\nJournal of Banking and Finance 133: 106277.\nPetrik, M. and Subramanian, D. (2012). An approximate solution method for large risk-averse Markov deci-\nsion processes, Proceedings of the Twenty-Eighth Conference on Uncertainty in Artificial Intelligence,\nUAI’12, AUAI Press, Arlington, Virginia, USA, p. 805–814.\nPrashanth, L. A. and Ghavamzadeh, M. (2013). Actor-critic algorithms for risk-sensitive MDPs, Advances\nin Neural Information Processing Systems.\nRockafellar, R. T. and Uryasev, S. (2002). Conditional value-at-risk for general loss distributions, Journal\nof Banking and Finance 26(7): 1443–1471.\n69\nRuf, J. and Wang, W. (2020). Neural networks for option pricing and hedging: a literature review, Journal\nof Computational Finance 24(1): 1–46.\nRuf, J. and Wang, W. (2022). Hedging with linear regressions and neural networks, Journal of Business &\nEconomic Statistics 40(4): 1442–1454.\nSchulman, J., Wolski, F., Dhariwal, P., Radford, A. and Klimov, O. (2017). Proximal policy optimization\nalgorithms. arXiv, preprint, https://arxiv.arg/abs/1707.06347.\nSchweizer, M. (1992).\nMean-variance hedging for general claims, The Annals of Applied Probability\n2(1): 171 – 179.\nSchweizer, M. (1995). Variance-optimal hedging in discrete time, Mathematics of Operations Research\n20(1): 1–32.\nTamar, A., Di Castro, D. and Mannor, S. (2012). Policy gradients with variance related risk criteria, Pro-\nceedings of the 29th International Conference on Machine Learning, ICML 2012, Vol. 1, pp. 935–942.\nTamar, A., Glassner, Y. and Mannor, S. (2015). Optimizing the CVaR via sampling, Proceedings of the\nNational Conference on Artificial Intelligence, Vol. 4, pp. 2993–2999.\nˇCerný, A. (2004). Dynamic programming and mean-variance hedging in discrete time, Applied Mathemati-\ncal Finance 11(1): 1–25.\nWu, D. and Jaimungal, S. (2023).\nRobust risk-aware option hedging, Applied Mathematical Finance\n30(3): 153–174.\nXia, K., Yang, X. and Zhu, P. (2023). Delta hedging and volatility-price elasticity: a two-step approach,\nJournal of Banking and Finance 153: 106898.\nXu, W., Gao, X. and He, X. (2023). Regret bounds for Markov decision processes with recursive optimized\ncertainty equivalents, in A. Krause, E. Brunskill, K. Cho, B. Engelhardt, S. Sabato and J. Scarlett (eds),\nProceedings of the 40th International Conference on Machine Learning, Vol. 202 of Proceedings of\nMachine Learning Research, PMLR, pp. 38400–38427.\nZhang, J. and Huang, W. (2021). Option hedging using lstm-rnn: an empirical analysis, Quantitative Fi-\nnance 21(10): 1753–1772.\n70\n",
  "categories": [
    "q-fin.RM",
    "q-fin.PR"
  ],
  "published": "2024-11-14",
  "updated": "2024-11-14"
}